/*! For license information please see premium.js.LICENSE.txt */
!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("Formio")):"function"==typeof define&&define.amd?define(["Formio"],e):"object"==typeof exports?exports.premium=e(require("Formio")):n.premium=e(n.Formio)}(self,(function(__WEBPACK_EXTERNAL_MODULE_formiojs__){return function(){var __webpack_modules__={"./lib/Wizard.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar OriginalWizard = formiojs__WEBPACK_IMPORTED_MODULE_0__.Displays.displays.wizard;\nvar Wizard = /** @class */ (function (_super) {\n    __extends(Wizard, _super);\n    function Wizard() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Wizard.prototype.emitWizardPageSelected = function (index) {\n        this.setChangingMode();\n        this.emit('wizardPageSelected', this.pages[index], index);\n    };\n    Wizard.prototype.emitNextPage = function () {\n        this.setChangingMode();\n        this.emit('nextPage', { page: this.page, submission: this.submission });\n    };\n    Wizard.prototype.emitPrevPage = function () {\n        this.setChangingMode();\n        this.emit('prevPage', { page: this.page, submission: this.submission });\n    };\n    Wizard.prototype.focusOnComponent = function (key) {\n        var superFocusOnComponent = _super.prototype.focusOnComponent.call(this, key);\n        var dynamicWizardComponent = this.hasDynamicWizard();\n        if (dynamicWizardComponent && dynamicWizardComponent.isChangingMode) {\n            this.focusOnDynamicWizard();\n        }\n        return superFocusOnComponent;\n    };\n    Wizard.prototype.hasButton = function (name, nextPage) {\n        if (nextPage === void 0) { nextPage = this.getNextPage(); }\n        // get page options with global options as default values\n        var _a = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.currentPage, 'component.buttonSettings', {}), _b = _a.previous, previous = _b === void 0 ? this.options.buttonSettings.showPrevious : _b, _c = _a.cancel, cancel = _c === void 0 ? this.options.buttonSettings.showCancel : _c, _d = _a.submit, submit = _d === void 0 ? this.options.buttonSettings.showSubmit : _d, _e = _a.next, next = _e === void 0 ? this.options.buttonSettings.showNext : _e;\n        var dynamicWizardComponent = this.hasDynamicWizard();\n        var showNavButtons = !(dynamicWizardComponent === null || dynamicWizardComponent === void 0 ? void 0 : dynamicWizardComponent.isChangingMode) || this.options.readOnly;\n        switch (name) {\n            case 'previous':\n                return previous && (this.getPreviousPage() > -1) && showNavButtons;\n            case 'next':\n                return next && (nextPage !== null) && (nextPage !== -1) && showNavButtons;\n            case 'cancel':\n                return cancel && !this.options.readOnly && showNavButtons;\n            case 'submit':\n                return submit && !this.options.readOnly && ((nextPage === null) || (this.page === (this.pages.length - 1))) && !(dynamicWizardComponent === null || dynamicWizardComponent === void 0 ? void 0 : dynamicWizardComponent.isChangingMode);\n            default:\n                return true;\n        }\n    };\n    Wizard.prototype.setEditMode = function (submission) {\n        if (!this.valueIsSet) {\n            this.valueIsSet = true;\n            if (!this.editMode && submission._id && !this.options.readOnly) {\n                this.editMode = true;\n                this.redraw();\n            }\n        }\n    };\n    Wizard.prototype.focusOnDynamicWizard = function () {\n        if (this.element && !this.element.classList.contains('dynamicWizard-changingMode')) {\n            this.element.classList.add('dynamicWizard-changingMode');\n            this.redraw();\n        }\n    };\n    Wizard.prototype.setChangingMode = function () {\n        if (this.options.readOnly) {\n            return;\n        }\n        var dynamicWizardComponent = this.hasDynamicWizard();\n        // If the current page contains dynamicWizard component\n        if (dynamicWizardComponent && !this.editMode) {\n            this.emit('setChangingMode');\n            if (this.element && !this.element.classList.contains('dynamicWizard-changingMode')) {\n                this.element.classList.add('dynamicWizard-changingMode');\n                this.redraw();\n            }\n        }\n        else if (this.element) {\n            if (dynamicWizardComponent === null || dynamicWizardComponent === void 0 ? void 0 : dynamicWizardComponent.isChangingMode) {\n                dynamicWizardComponent.isChangingMode = false;\n                this.redraw();\n            }\n            if (this.element.classList.contains('dynamicWizard-changingMode')) {\n                this.element.classList.remove('dynamicWizard-changingMode');\n            }\n        }\n    };\n    Wizard.prototype.hasDynamicWizard = function () {\n        return this.currentPage.components.find(function (comp) { return comp.component.type === 'dynamicWizard' && comp._parentVisible && comp._visible && !comp._disabled; });\n    };\n    Wizard.prototype.updatePages = function () {\n        this.pages = this.allPages;\n        var dynamicWizardComponent = this.hasDynamicWizard();\n        if (this.element && this.element.classList.contains('dynamicWizard-changingMode') && !dynamicWizardComponent) {\n            this.element.classList.remove('dynamicWizard-changingMode');\n        }\n    };\n    return Wizard;\n}(OriginalWizard));\n/* harmony default export */ __webpack_exports__[\"default\"] = (Wizard);\n\n\n//# sourceURL=webpack://premium/./lib/Wizard.js?")},"./lib/components/DataSource/DataSource.form.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _editForm_DataSource_edit_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editForm/DataSource.edit.data */ \"./lib/components/DataSource/editForm/DataSource.edit.data.js\");\n/* harmony import */ var _editForm_DataSource_edit_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editForm/DataSource.edit.fetch */ \"./lib/components/DataSource/editForm/DataSource.edit.fetch.js\");\n/* harmony import */ var _editForm_DataSource_edit_trigger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editForm/DataSource.edit.trigger */ \"./lib/components/DataSource/editForm/DataSource.edit.trigger.js\");\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nvar componentEditForm = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.component.editForm;\n\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n    var extend = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        extend[_i] = arguments[_i];\n    }\n    return componentEditForm.apply(void 0, __spreadArrays([[\n            {\n                key: 'data',\n                components: _editForm_DataSource_edit_data__WEBPACK_IMPORTED_MODULE_1__.default,\n            },\n            {\n                label: 'Trigger',\n                key: 'trigger',\n                weight: 10,\n                components: _editForm_DataSource_edit_trigger__WEBPACK_IMPORTED_MODULE_3__.default,\n            },\n            {\n                label: 'Fetch',\n                key: 'fetch',\n                weight: 20,\n                components: _editForm_DataSource_edit_fetch__WEBPACK_IMPORTED_MODULE_2__.default,\n            },\n            {\n                key: 'display',\n                ignore: true,\n            },\n            {\n                key: 'validation',\n                ignore: true,\n            },\n            {\n                key: 'layout',\n                ignore: true,\n            },\n        ]], extend));\n}\n\n\n//# sourceURL=webpack://premium/./lib/components/DataSource/DataSource.form.js?")},"./lib/components/DataSource/DataSource.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _DataSource_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataSource.form */ \"./lib/components/DataSource/DataSource.form.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\n\nvar Component = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.component;\nvar DataSource = /** @class */ (function (_super) {\n    __extends(DataSource, _super);\n    function DataSource(component, options, data) {\n        return _super.call(this, component, options, data) || this;\n    }\n    Object.defineProperty(DataSource, \"builderInfo\", {\n        get: function () {\n            return {\n                title: 'Data Source',\n                icon: 'cloud',\n                group: 'premium',\n                documentation: 'http://help.form.io/userguide/#datasource',\n                weight: 30,\n                schema: DataSource.schema(),\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DataSource.prototype, \"requestHeaders\", {\n        /**\n         * Get the request headers for this select dropdown.\n         */\n        get: function () {\n            var _this = this;\n            // Create the headers object.\n            var headers = new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Headers();\n            // Add custom headers to the url.\n            if (this.component.fetch && this.component.fetch.headers) {\n                try {\n                    this.component.fetch.headers.forEach(function (header) {\n                        if (header.key) {\n                            headers.set(header.key, _this.interpolate(header.value));\n                        }\n                    });\n                }\n                catch (err) {\n                    /* tslint:disable */\n                    console.warn(err.message);\n                    /* tslint:enable */\n                }\n            }\n            if (this.reqMethod === 'POST' && !headers.has('Content-type')) {\n                headers.set('Content-type', 'application/json');\n            }\n            return headers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DataSource.prototype, \"reqMethod\", {\n        get: function () {\n            var method = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'fetch.method', 'get');\n            return method.toUpperCase();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DataSource.schema = function () {\n        var extend = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            extend[_i] = arguments[_i];\n        }\n        return Component.schema.apply(Component, __spreadArrays([{\n                label: 'Data Source',\n                key: 'dataSource',\n                type: 'datasource',\n                persistent: 'client-only',\n            }], extend));\n    };\n    DataSource.prototype.init = function () {\n        if (formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'trigger.init', false)) {\n            this.refresh();\n        }\n        return _super.prototype.init.call(this);\n    };\n    DataSource.prototype.render = function () {\n        if (this.builderMode) {\n            return _super.prototype.render.call(this, this.component.label || 'Data Source');\n        }\n        // Is there a better way to be hidden on the page?\n        return _super.prototype.render.call(this, ' ');\n    };\n    DataSource.prototype.attach = function (element) {\n        this.attachRefreshOnBlur();\n        this.attachRefreshOnEvent();\n        return _super.prototype.attach.call(this, element);\n    };\n    DataSource.prototype.attachRefreshOnBlur = function () {\n        var _this = this;\n        if (this.component.refreshOnBlur) {\n            this.on('blur', function (instance) {\n                _this.checkRefreshOn([{ instance: instance, value: instance.dataValue }], { fromBlur: true });\n            });\n        }\n    };\n    DataSource.prototype.attachRefreshOnEvent = function () {\n        var _this = this;\n        if (this.component.refreshOnEvent) {\n            this.on(this.component.refreshOnEvent, function () { return _this.refresh(); });\n        }\n    };\n    DataSource.prototype.refresh = function (value, changed, flags) {\n        if (!this.options.readOnly) {\n            switch (this.component.dataSrc) {\n                case 'url':\n                    this.getDataFromUrl(flags);\n                    break;\n                case 'indexeddb':\n                    if (!window.indexedDB) {\n                        window.alert(\"Your browser doesn't support current version of indexedDB\");\n                    }\n                    this.getDataFromIndexedDb(flags);\n                    break;\n                case 'custom':\n                    // TODO: Implement custom async code?\n                    break;\n            }\n        }\n    };\n    DataSource.prototype.getDataFromUrl = function (flags) {\n        var _this = this;\n        var body = null;\n        var isBody = !!formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'fetch.specifyPostBody', '');\n        if (isBody && this.reqMethod === 'POST') {\n            body = this.specifyBody();\n        }\n        var request = formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.makeStaticRequest(this.interpolate(this.component.fetch.url), this.reqMethod, body, {\n            headers: this.requestHeaders,\n            noToken: !(this.component.fetch && this.component.fetch.authenticate),\n            ignoreCache: !this.component.allowCaching\n        });\n        // assign after setupForm\n        Promise.all([\n            request,\n            this.root && this.root.submissionReady ? this.root.submissionReady : Promise.resolve()\n        ])\n            .then(function (data) {\n            setTimeout(function () {\n                _this.assign(data[0], flags);\n            });\n        })\n            .catch(function (err) {\n            /* tslint:disable */\n            console.warn(err);\n            /* tslint:enable */\n        });\n    };\n    DataSource.prototype.getDataFromIndexedDb = function (flags) {\n        var _this = this;\n        if (this.component.indexeddb && this.component.indexeddb.database && this.component.indexeddb.table) {\n            var request_1 = window.indexedDB.open(this.component.indexeddb.database);\n            request_1.onupgradeneeded = function (event) {\n                if (_this.component.customOptions) {\n                    var db_1 = event.target.result;\n                    var objectStore = db_1.createObjectStore(_this.component.indexeddb.table, { keyPath: 'myKey', autoIncrement: true });\n                    objectStore.transaction.oncomplete = function () {\n                        var transaction = db_1.transaction(_this.component.indexeddb.table, 'readwrite');\n                        _this.component.customOptions.forEach(function (item) {\n                            transaction.objectStore(_this.component.indexeddb.table).put(item);\n                        });\n                    };\n                }\n            };\n            request_1.onerror = function () {\n                window.alert(request_1.errorCode);\n            };\n            request_1.onsuccess = function (event) {\n                var db = event.target.result;\n                var transaction = db.transaction(_this.component.indexeddb.table, 'readwrite');\n                var objectStore = transaction.objectStore(_this.component.indexeddb.table);\n                new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve) {\n                    var responseItems = [];\n                    objectStore.getAll().onsuccess = function (event) {\n                        event.target.result.forEach(function (item) {\n                            responseItems.push(item);\n                        });\n                        resolve(responseItems);\n                    };\n                }).then(function (items) { return _this.assign(items, flags); });\n            };\n        }\n    };\n    DataSource.prototype.assign = function (data, flags) {\n        if (!formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isEqual(this.dataValue, data)) {\n            this.dataValue = data;\n            this.triggerChange(flags && flags.fromSubmission ? { dataSourceInitialLoading: true } : null);\n        }\n        if (this.component.event) {\n            this.emitEvents();\n        }\n    };\n    DataSource.prototype.emitEvents = function () {\n        this.emit(this.interpolate(this.component.event), this.data);\n        this.events.emit(this.interpolate(this.component.event), this.data);\n        this.emit('customEvent', {\n            type: this.interpolate(this.component.event),\n            component: this.component,\n            data: this.data,\n        });\n    };\n    DataSource.prototype.validateMultiple = function () {\n        // DataSource component can have both values.\n        return false;\n    };\n    DataSource.prototype.specifyBody = function () {\n        var result = null;\n        try {\n            result = this.evaluate(this.component.fetch.specifyPostBody, {\n                value: this.dataValue,\n                row: this.data,\n                data: this.rootValue,\n                component: this.component,\n            }, 'body');\n        }\n        catch (e) {\n            result = null;\n        }\n        return result;\n    };\n    ;\n    DataSource.editForm = _DataSource_form__WEBPACK_IMPORTED_MODULE_1__.default;\n    return DataSource;\n}(Component));\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataSource);\n\n\n//# sourceURL=webpack://premium/./lib/components/DataSource/DataSource.js?")},"./lib/components/DataSource/editForm/DataSource.edit.data.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        weight: 0,\n        type: 'textfield',\n        input: true,\n        key: 'label',\n        label: 'Label',\n        placeholder: 'Field Label',\n        tooltip: 'The label for this field.',\n        validate: {\n            required: true,\n        },\n    },\n    {\n        key: 'multiple',\n        ignore: true,\n    },\n    {\n        key: 'defaultValue',\n        ignore: true,\n    },\n    {\n        key: 'dbIndex',\n        ignore: true,\n    },\n    {\n        key: 'allowCalculateOverride',\n        ignore: true,\n    },\n    {\n        key: 'customDefaultValuePanel',\n        ignore: true,\n    },\n    {\n        key: 'calculateValuePanel',\n        ignore: true,\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DataSource/editForm/DataSource.edit.data.js?")},"./lib/components/DataSource/editForm/DataSource.edit.fetch.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'select',\n        input: true,\n        weight: 0,\n        tooltip: 'The source to get the data. You can fetch from a URL or use javascript to get the value.',\n        key: 'dataSrc',\n        defaultValue: 'url',\n        label: 'Data Source Type',\n        dataSrc: 'values',\n        data: {\n            values: [\n                { label: 'URL', value: 'url' },\n                { label: 'IndexedDB', value: 'indexeddb' },\n            ],\n        },\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        weight: 9,\n        key: 'indexeddb.fromExisting',\n        label: 'Choose from existing databases?',\n        defaultValue: false,\n        tooltip: 'Check it if you want to select an existing database.',\n        conditional: {\n            json: {\n                in: [{ var: 'data.dataSrc' }, ['indexeddb']],\n            },\n        },\n    },\n    {\n        type: 'textfield',\n        weight: 10,\n        input: true,\n        key: 'indexeddb.database',\n        label: 'Database name',\n        forceOverride: true,\n        tooltip: 'The name of the indexeddb database.',\n        conditional: {\n            json: {\n                and: [\n                    {\n                        in: [{ var: 'data.dataSrc' }, ['indexeddb']],\n                    },\n                    {\n                        '!==': [{ var: 'data.indexeddb.fromExisting' }, true],\n                    },\n                ],\n            },\n        },\n    },\n    {\n        type: 'textfield',\n        input: true,\n        key: 'indexeddb.table',\n        label: 'Table name',\n        forceOverride: true,\n        weight: 16,\n        tooltip: 'The name of table in the indexeddb database.',\n        conditional: {\n            json: {\n                and: [\n                    {\n                        in: [{ var: 'data.dataSrc' }, ['indexeddb']],\n                    },\n                    {\n                        '!==': [{ var: 'data.indexeddb.fromExisting' }, true],\n                    },\n                ],\n            },\n        },\n    },\n    {\n        type: 'select',\n        input: true,\n        key: 'indexeddb.database',\n        label: 'Existing Database name',\n        weight: 10,\n        tooltip: 'The name of the existing indexeddb database.',\n        dataSrc: 'custom',\n        valueProperty: 'value',\n        skipMerge: true,\n        data: {\n            custom: function (context) {\n                if (!window.indexedDB) {\n                    window.alert(\"Your browser doesn't support current version of indexedDB\");\n                    return [];\n                }\n                var values = window.indexedDB.databases()\n                    .then(function (res) { return res.map(function (_a) {\n                    var name = _a.name;\n                    return ({ value: name, label: name });\n                }); });\n                return values;\n            },\n        },\n        conditional: {\n            json: {\n                '===': [{ var: 'data.indexeddb.fromExisting' }, true],\n            },\n        },\n    },\n    {\n        type: 'select',\n        input: true,\n        key: 'indexeddb.table',\n        label: 'Existing Table name',\n        refreshOn: 'indexeddb.database',\n        clearOnRefresh: true,\n        weight: 16,\n        tooltip: 'The name of an existing table in the indexeddb database.',\n        dataSrc: 'custom',\n        valueProperty: 'value',\n        skipMerge: true,\n        data: {\n            custom: function (context) {\n                if (!window.indexedDB) {\n                    window.alert(\"Your browser doesn't support current version of indexedDB\");\n                    return [];\n                }\n                var database = context.data.indexeddb.database;\n                if (database) {\n                    return new Promise(function (resolve) {\n                        var db = window.indexedDB.open(database);\n                        db.onsuccess = function (sender) {\n                            var objectStoreNames = sender.target.result.objectStoreNames;\n                            if (objectStoreNames.length) {\n                                var values = Array.from(objectStoreNames).map(function (name) { return ({ value: name, label: name }); });\n                                resolve(values);\n                            }\n                            else {\n                                resolve([]);\n                            }\n                        };\n                        db.onerror = function () { return resolve([]); };\n                    });\n                }\n                return [];\n            },\n        },\n        conditional: {\n            json: {\n                '===': [{ var: 'data.indexeddb.fromExisting' }, true],\n            },\n        },\n    },\n    {\n        type: 'textfield',\n        input: true,\n        key: 'fetch.url',\n        weight: 10,\n        label: 'Data Source URL',\n        placeholder: 'Data Source URL',\n        tooltip: 'A URL that returns data. You can interpolate form data using curly bracket notation.',\n        clearOnHide: true,\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },\n        },\n    },\n    {\n        type: 'select',\n        input: true,\n        label: 'Method',\n        key: 'fetch.method',\n        clearOnHide: true,\n        tooltip: 'The HTTP Request method to use when making the request.',\n        defaultValue: 'get',\n        weight: 11,\n        template: '<span>{{ item.label }}</span>',\n        dataSrc: 'values',\n        data: {\n            values: [\n                { label: 'Get', value: 'get' },\n                { label: 'Put', value: 'put' },\n                { label: 'Post', value: 'post' },\n                { label: 'Patch', value: 'patch' },\n                { label: 'Delete', value: 'delete' },\n            ],\n        },\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },\n        },\n    },\n    {\n        type: 'datagrid',\n        input: true,\n        label: 'Request Headers',\n        key: 'fetch.headers',\n        /* tslint:disable */\n        tooltip: 'Set any headers that should be sent along with the request to the url. This is useful for authentication.',\n        /* tslint:enable */\n        weight: 12,\n        components: [\n            {\n                label: 'Key',\n                key: 'key',\n                input: true,\n                type: 'textfield',\n            },\n            {\n                label: 'Value',\n                key: 'value',\n                input: true,\n                type: 'textfield',\n            },\n        ],\n        clearOnHide: true,\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },\n        },\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        key: 'fetch.forwardHeaders',\n        label: 'Forward Headers',\n        tooltip: 'Check this if you would like to forward the headers passed to the server to the fetch endpoint.',\n        clearOnHide: true,\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },\n        },\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        weight: 26,\n        key: 'fetch.authenticate',\n        label: 'Form.io Authentication',\n        tooltip: 'Check this if you would like to pass Form.io Authentication headers with the request.',\n        clearOnHide: true,\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] },\n        },\n    },\n    {\n        type: 'panel',\n        title: 'POST Body Specification',\n        theme: 'default',\n        collapsible: true,\n        collapsed: true,\n        key: 'specifyPostBodyPanel',\n        weight: 1000,\n        tooltip: 'Write custom code to specify POST Body.',\n        conditional: {\n            json: {\n                and: [\n                    {\n                        '===': [{ var: 'data.dataSrc' }, 'url'],\n                    },\n                    {\n                        '===': [{ var: 'data.fetch.method' }, 'post'],\n                    },\n                ],\n            },\n        },\n        components: [\n            {\n                type: 'htmlelement',\n                tag: 'div',\n                /* eslint-disable prefer-template */\n                content: '<p>The following variables are available in all scripts.</p>' +\n                    '<table class=\"table table-bordered table-condensed table-striped\">' +\n                    '<tr><th>form</th><td>The complete form JSON object</td></tr>' +\n                    '<tr><th>submission</th><td>The complete submission object.</td></tr>' +\n                    '<tr><th>data</th><td>The complete submission data object.</td></tr>' +\n                    '<tr><th>row</th><td>Contextual \"row\" data, used within DataGrid, EditGrid, and Container components</td></tr>' +\n                    '<tr><th>component</th><td>The current component JSON</td></tr>' +\n                    '<tr><th>instance</th><td>The current component instance.</td></tr>' +\n                    '<tr><th>value</th><td>The current value of the component.</td></tr>' +\n                    '<tr><th>moment</th><td>The moment.js library for date manipulation.</td></tr>' +\n                    '<tr><th>_</th><td>An instance of <a href=\"https://lodash.com/docs/\" target=\"_blank\">Lodash</a>.</td></tr>' +\n                    '<tr><th>utils</th><td>An instance of the <a href=\"http://formio.github.io/formio.js/docs/identifiers.html#utils\" target=\"_blank\">FormioUtils</a> object.</td></tr>' +\n                    '<tr><th>util</th><td>An alias for \"utils\".</td></tr>' +\n                    '</table><br/>'\n                /* eslint-enable prefer-template */\n            },\n            {\n                type: 'textarea',\n                key: 'fetch.specifyPostBody',\n                rows: 5,\n                editor: 'ace',\n                hideLabel: true,\n                input: true,\n                placeholder: 'body = {\\n  data: {\\n    b: data.a,\\n    submit: true,\\n  },\\n}'\n            },\n            {\n                type: 'htmlelement',\n                tag: 'div',\n                content: '<p>Enter custom javascript code.</p><p><h4>Example:</h4><pre>body = {\\n  data: {\\n    b: data.a,\\n    submit: true,\\n  },\\n};</pre></p>'\n            }\n        ]\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        weight: 1001,\n        key: 'allowCaching',\n        label: 'Enable to Store Request Result in the Cache',\n        defaultValue: true,\n        tooltip: 'When checked, the requests and its results will be stored in the cache and if the Select will try to make the request to the same URL with the same paremetrs, the cached data will be returned. It allows to increase performance, but if the remote source\\'s data is changing quite often and you always need to keep it up-to-date, uncheck this option.',\n        conditional: {\n            json: { '===': [{ var: 'data.dataSrc' }, 'url'] }\n        },\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DataSource/editForm/DataSource.edit.fetch.js?")},"./lib/components/DataSource/editForm/DataSource.edit.trigger.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'checkbox',\n        input: true,\n        key: 'trigger.init',\n        label: 'Trigger on form init',\n        tooltip: 'When enabled the request will be made when the form is initialized.',\n        weight: 15,\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        key: 'trigger.server',\n        label: 'Trigger on server',\n        tooltip: 'When enabled the request will be made on the server during validation.',\n        description: 'Async requests on the server can slow down processing since the server must wait for a response before proceeding. Do not add too many server side requests or performance will suffer.',\n        weight: 15,\n    },\n    {\n        type: 'select',\n        input: true,\n        key: 'refreshOn',\n        label: 'Trigger on Data change',\n        weight: 10,\n        tooltip: 'Refresh data when another field changes.',\n        dataSrc: 'custom',\n        valueProperty: 'value',\n        data: {\n            custom: function (context) {\n                var values = [];\n                values.push({ label: 'Any Change', value: 'data' });\n                context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {\n                    if (component.key !== context.data.key) {\n                        values.push({\n                            label: component.label || component.key,\n                            value: path,\n                        });\n                    }\n                });\n                return values;\n            },\n        },\n    },\n    {\n        type: 'select',\n        input: true,\n        key: 'refreshOnBlur',\n        label: 'Trigger on blur of Component',\n        weight: 10,\n        tooltip: 'Refresh data when another field was blured.',\n        dataSrc: 'custom',\n        valueProperty: 'value',\n        data: {\n            custom: function (context) {\n                var values = [];\n                values.push({ label: 'Any Change', value: 'data' });\n                context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {\n                    if (component.key !== context.data.key) {\n                        values.push({\n                            label: component.label || component.key,\n                            value: path,\n                        });\n                    }\n                });\n                return values;\n            },\n        },\n    },\n    {\n        type: 'textfield',\n        label: 'Trigger on Event',\n        key: 'refreshOnEvent',\n        input: true,\n        weight: 110,\n        tooltip: 'Refresh data when this event is fired.'\n    },\n    {\n        type: 'textfield',\n        label: 'Triggered Event',\n        key: 'event',\n        input: true,\n        weight: 120,\n        tooltip: 'The event to fire when triggered.',\n        description: 'When in a datagrid or editgrid, { { rowIndex } } is available for interpolation to target a specific row.',\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DataSource/editForm/DataSource.edit.trigger.js?")},"./lib/components/DynamicWizard/DynamicWizard.form.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ "formiojs");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _editForm_DynamicWizard_edit_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editForm/DynamicWizard.edit.data */ "./lib/components/DynamicWizard/editForm/DynamicWizard.edit.data.js");\n/* harmony import */ var _editForm_DynamicWizard_edit_display__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editForm/DynamicWizard.edit.display */ "./lib/components/DynamicWizard/editForm/DynamicWizard.edit.display.js");\n/* harmony import */ var _editForm_DynamicWizard_edit_templates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editForm/DynamicWizard.edit.templates */ "./lib/components/DynamicWizard/editForm/DynamicWizard.edit.templates.js");\n/* harmony import */ var _editForm_DynamicWizard_edit_validation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./editForm/DynamicWizard.edit.validation */ "./lib/components/DynamicWizard/editForm/DynamicWizard.edit.validation.js");\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nvar baseEditForm = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.component.editForm;\n\n\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n    var extend = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        extend[_i] = arguments[_i];\n    }\n    return baseEditForm.apply(void 0, __spreadArrays([[\n            {\n                label: \'Templates\',\n                key: \'templates\',\n                weight: 5,\n                components: _editForm_DynamicWizard_edit_templates__WEBPACK_IMPORTED_MODULE_3__.default\n            },\n            {\n                key: \'display\',\n                components: _editForm_DynamicWizard_edit_display__WEBPACK_IMPORTED_MODULE_2__.default,\n            },\n            {\n                key: \'data\',\n                components: _editForm_DynamicWizard_edit_data__WEBPACK_IMPORTED_MODULE_1__.default,\n            },\n            {\n                key: \'validation\',\n                components: _editForm_DynamicWizard_edit_validation__WEBPACK_IMPORTED_MODULE_4__.default\n            }\n        ]], extend));\n}\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/DynamicWizard.form.js?')},"./lib/components/DynamicWizard/DynamicWizard.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _DynamicWizard_form__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DynamicWizard.form */ \"./lib/components/DynamicWizard/DynamicWizard.form.js\");\n/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./templates */ \"./lib/components/DynamicWizard/templates/index.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nvar EditGrid = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.editgrid;\n\n\nvar FormState = {\n    New: 'new',\n    Editing: 'editing',\n    Saved: 'saved',\n    Removed: 'removed',\n    Draft: 'draft',\n};\nvar DynamicWizard = /** @class */ (function (_super) {\n    __extends(DynamicWizard, _super);\n    function DynamicWizard() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.apply(this, args) || this;\n        _this.type = 'dynamicWizard';\n        _this.isChangingMode = true;\n        _this.isSavingInProgress = false;\n        _this.editRows = [];\n        _this.changingRowIndex = null;\n        _this.step = 0;\n        _this.buttonSettings = {\n            showPrevious: true,\n            showNext: true,\n            showSubmit: true,\n            showCancel: !_this.options.readOnly\n        };\n        _this.shouldUpdate = true;\n        return _this;\n    }\n    DynamicWizard.schema = function () {\n        var extend = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            extend[_i] = arguments[_i];\n        }\n        return EditGrid.schema.apply(EditGrid, __spreadArrays([{\n                type: 'dynamicWizard',\n                label: 'Dynamic Wizard',\n                key: 'dynamicWizard',\n                templates: {\n                    header: DynamicWizard.defaultHeaderTemplate,\n                    row: DynamicWizard.defaultRowTemplate,\n                    footer: '',\n                },\n            }], extend));\n    };\n    Object.defineProperty(DynamicWizard, \"builderInfo\", {\n        get: function () {\n            return {\n                title: 'Dynamic Wizard',\n                group: 'premium',\n                icon: 'tasks',\n                ignoreForForm: true,\n                disableSiblings: true,\n                weight: 20,\n                schema: DynamicWizard.schema(),\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard, \"defaultHeaderTemplate\", {\n        get: function () {\n            return \"<div class=\\\"row\\\">\\n    <div class=\\\"col-sm-2\\\">\\n      Users\\n    </div>\\n  </div>\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard, \"defaultRowTemplate\", {\n        get: function () {\n            return \"<div class=\\\"list-group-item\\\">\\n    <div class=\\\"list-group-subheader\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-2\\\">\\n          User {{ rowIndex + 1 }}\\n        </div>\\n        {% if (!ctx.self.options.readOnly && !component.disabled) { %}\\n        <div class=\\\"col-sm-2\\\">\\n          <div class=\\\"btn-group pull-right\\\">\\n            <button class=\\\"btn btn-default btn-light btn-sm editCard\\\"><i class=\\\"{{ ctx.iconClass('edit') }}\\\"></i></button>\\n            <button class=\\\"btn btn-danger btn-sm removeCard\\\"><i class=\\\"{{ ctx.iconClass('trash') }}\\\"></i></button>\\n          </div>\\n        </div>\\n        {% } %}\\n      </div>\\n    </div>\\n    {% ctx.util.eachComponent(ctx.components, function(component) { %}\\n    {% if ((!component.hasOwnProperty('tableView') || component.tableView) && isVisibleInRow(component)) { %}\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-2\\\">\\n        {{ component.key }}\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-2\\\">\\n        {{ ctx.getView(component, ctx.row[component.key]) }}\\n      </div>\\n    </div>\\n    {% } %}\\n    {% }) %}\\n  </div>\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"dynamicWizardKey\", {\n        get: function () {\n            return \"dynamicWizard-\" + this.key;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"rowRef\", {\n        get: function () {\n            return this.dynamicWizardKey + \"-row\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"rowElements\", {\n        get: function () {\n            return this.refs[this.rowRef];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"rowRefs\", {\n        get: function () {\n            return this.refs[\"dynamicWizard-\" + this.component.key + \"-row\"];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"agreeButtonRef\", {\n        get: function () {\n            return this.dynamicWizardKey + \"-agreeButton\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"denyButtonRef\", {\n        get: function () {\n            return this.dynamicWizardKey + \"-denyButton\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"agreeButtonElements\", {\n        get: function () {\n            return this.refs[this.agreeButtonRef];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"cancelRowRef\", {\n        get: function () {\n            return this.dynamicWizardKey + \"-cancelRow\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"cancelRowElements\", {\n        get: function () {\n            return this.refs[this.cancelRowRef];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"inlineEditMode\", {\n        get: function () {\n            return this.component.inlineEdit;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"saveEditMode\", {\n        get: function () {\n            return !this.inlineEditMode;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"rootWizard\", {\n        get: function () {\n            return this.findRoot(this.parent);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DynamicWizard.prototype, \"buttons\", {\n        get: function () {\n            var _this = this;\n            var buttons = {};\n            [\n                { name: 'cancel', method: 'cancelRow' },\n                { name: 'previous', method: 'prevPage' },\n                { name: 'next', method: 'nextPage' },\n            ].forEach(function (button) {\n                if (_this.hasButton(button.name)) {\n                    buttons[button.name] = button;\n                }\n            });\n            return buttons;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    DynamicWizard.prototype.init = function () {\n        this.prevVisibility = this._visible;\n        this.prevBlocking = this.disabled;\n        this.secondRender = false;\n        this.shouldUpdate = true;\n        this.changingRowIndex = null;\n        if (this.builderMode) {\n            this.editRows = [];\n        }\n        return _super.prototype.init.call(this);\n    };\n    DynamicWizard.prototype.render = function (children) {\n        var _a, _b;\n        if (this.builderMode) {\n            return _super.prototype.render.call(this);\n        }\n        var dataValue = this.dataValue || [];\n        var headerTemplate = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.Evaluator.noeval ? _templates__WEBPACK_IMPORTED_MODULE_2__.default.header : formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'templates.header');\n        var editRow = this.editRows[this.changingRowIndex];\n        if (this.step === 0 && editRow && !editRow.components[this.step]._visible) {\n            this.nextPage();\n        }\n        return _super.prototype.render.call(this, children || this.renderTemplate('dynamicWizard', {\n            ref: {\n                row: this.rowRef,\n                agreeButton: this.agreeButtonRef,\n                denyButton: this.denyButtonRef,\n            },\n            header: this.renderString(headerTemplate),\n            footer: this.renderString(formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'templates.footer'), {\n                components: this.component.components,\n                value: dataValue,\n            }),\n            rows: this.editRows.map(this.renderRow.bind(this)),\n            currentComponent: this.step === -1 ? null : (_b = (_a = this.editRows[this.changingRowIndex]) === null || _a === void 0 ? void 0 : _a.components[this.step]) === null || _b === void 0 ? void 0 : _b.render(),\n            errors: this.editRows.map(function (row) { return row.error; }),\n            buttons: this.buttons,\n            hasRemoveButtons: this.hasRemoveButtons(),\n            isChangingMode: this.isChangingMode,\n            isDisabled: this._disabled,\n            isBlocking: !this._visible || this._disabled,\n            dynamicWizardKey: this.dynamicWizardKey,\n            readOnly: this.options.readOnly,\n        }));\n    };\n    DynamicWizard.prototype.attach = function (element) {\n        var _a;\n        var _this = this;\n        var superAttach = _super.prototype.attach.call(this, element);\n        if (this.builderMode) {\n            return _super.prototype.attach.call(this, element);\n        }\n        var reset = !this.editRows.length && this.step === 0 && this.changingRowIndex === 0;\n        if (((!this.secondRender && this.shouldUpdate) || reset) && !this.options.readOnly) {\n            this.secondRender = true;\n            var onFirstPage = this.root.page === 0 && this.page === this.root.page;\n            if (onFirstPage && this._parentVisible && this._visible && !this._disabled) {\n                this.shouldUpdate = false;\n                this.isInitRowExists = true;\n                this.addRow(true, reset);\n                return;\n            }\n        }\n        if (this.root.valueIsSet && this.rootWizard.valueIsSet && this.isInitRowExists) {\n            this.isInitRowExists = false;\n            if (this.rootWizard.editMode) {\n                this.cancelRow();\n            }\n            else {\n                this.rootWizard.redraw().then(function () {\n                    if (_this.rootWizard.id !== _this.root.id && _this.root.page === 0) {\n                        _this.redraw();\n                    }\n                });\n            }\n        }\n        this.visibilityCheck();\n        this.blockingCheck();\n        this.on('setChangingMode', function () {\n            if (_this.shouldUpdate && _this.page === _this.rootWizard.page) {\n                _this.addRow();\n                _this.shouldUpdate = false;\n                _this.secondRender = true;\n            }\n        });\n        this.loadRefs(element, (_a = {},\n            _a[this.agreeButtonRef] = 'multiple',\n            _a[this.denyButtonRef] = 'multiple',\n            _a[this.rowRef] = 'multiple',\n            _a[this.dynamicWizardKey + \"-cancel\"] = 'single',\n            _a[this.dynamicWizardKey + \"-previous\"] = 'single',\n            _a[this.dynamicWizardKey + \"-next\"] = 'single',\n            _a));\n        this.agreeButtonElements.forEach(function (agreeButton) {\n            _this.addEventListener(agreeButton, 'click', function () {\n                _this.addRow();\n                if (_this.rootWizard.currentNextPage === -1) {\n                    _this.rootWizard.redraw();\n                }\n            });\n        });\n        this.attachNav();\n        if (!this.isChangingMode) {\n            this.rowElements.forEach(function (row, rowIndex) {\n                // Attach edit and remove button events.\n                [\n                    {\n                        className: 'removeCard',\n                        event: 'click',\n                        action: function () { return _this.removeRow(rowIndex); },\n                    },\n                    {\n                        className: 'editCard',\n                        event: 'click',\n                        action: function () {\n                            _this.editRow(rowIndex);\n                        },\n                    },\n                ].forEach(function (_a) {\n                    var className = _a.className, event = _a.event, action = _a.action;\n                    var elements = row.getElementsByClassName(className);\n                    Array.prototype.forEach.call(elements, function (element) {\n                        _this.addEventListener(element, event, action);\n                    });\n                });\n            });\n        }\n        else {\n            var editRow = this.editRows[this.changingRowIndex];\n            if (editRow) {\n                this.attachComponents(this.rowElements[0], editRow.components, this.component.components, true);\n            }\n        }\n        return superAttach;\n    };\n    DynamicWizard.prototype.attachNav = function () {\n        var _this = this;\n        formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.each(this.buttons, function (button) {\n            var buttonElement = _this.refs[_this.dynamicWizardKey + \"-\" + button.name];\n            _this.addEventListener(buttonElement, 'click', function (event) {\n                event.preventDefault();\n                var cancelRedraw = _this[button.method]();\n                if (cancelRedraw && button.method === 'nextPage') {\n                    return;\n                }\n                _this.redraw();\n                var editRow = _this.editRows[_this.changingRowIndex];\n                if (editRow) {\n                    _this.validateRow(editRow, false);\n                }\n            });\n        });\n    };\n    DynamicWizard.prototype.attachComponents = function (element, components, container, isDynamicWizard) {\n        var _a;\n        if (container === void 0) { container = this.component.components; }\n        if (this.builderMode) {\n            return _super.prototype.attachComponents.call(this, element, components, container);\n        }\n        if (!isDynamicWizard) {\n            return;\n        }\n        components = components || this.component.components;\n        element = this.hook('attachComponents', element, components, container, this);\n        if (!element) {\n            // Return a non-resolving promise.\n            return (new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function () {\n                // empty\n            }));\n        }\n        var index = 0;\n        var promises = [];\n        if (!this.isChangingMode) {\n            Array.prototype.slice.call(element.children).forEach(function (child) {\n                if (!child.getAttribute('data-noattach') && components[index]) {\n                    promises.push(components[index].attach(child));\n                    index++;\n                }\n            });\n        }\n        else if (!formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isNil(this.step) && element.children[0] && !((_a = element.children[0]) === null || _a === void 0 ? void 0 : _a.getAttribute('data-noattach')) && components[this.step]) {\n            promises.push(components[this.step].attach(element.children[0]));\n        }\n        return formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise.all(promises);\n    };\n    DynamicWizard.prototype.visibilityCheck = function () {\n        if (this.page === this.root.page) {\n            if (this._visible && !this.prevVisibility) {\n                this.prevVisibility = true;\n                this.addRow();\n            }\n            if (this.prevVisibility && !this._visible) {\n                this.prevVisibility = false;\n            }\n        }\n    };\n    DynamicWizard.prototype.blockingCheck = function () {\n        if (this.page === this.root.page && this.prevBlocking && !this.disabled) {\n            this.prevBlocking = false;\n            this.isChangingMode = false;\n            this.rootWizard.redraw();\n        }\n    };\n    DynamicWizard.prototype.isOpen = function (editRow) {\n        return [FormState.New, FormState.Editing].includes(editRow === null || editRow === void 0 ? void 0 : editRow.state);\n    };\n    DynamicWizard.prototype.addRow = function (firstPage, reset) {\n        if (firstPage === void 0) { firstPage = false; }\n        if (reset === void 0) { reset = false; }\n        if (this.options.readOnly) {\n            return;\n        }\n        var dataObj = {};\n        var rowIndex = this.editRows.length;\n        var editRow;\n        if (formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isNil(this.changingRowIndex) || reset) {\n            this.changingRowIndex = this.editRows.length;\n            editRow = {\n                components: this.createRowComponents(dataObj, rowIndex),\n                data: dataObj,\n                state: FormState.New,\n                backup: null,\n                error: null,\n            };\n            this.editRows.push(editRow);\n            if (this.inlineEditMode) {\n                this.dataValue.push(dataObj);\n                this.triggerChange();\n            }\n            this.checkRow('checkData', null, {}, editRow.data, editRow.components);\n            if (this.component.modal) {\n                this.addRowModal(rowIndex);\n            }\n        }\n        this.isChangingMode = true;\n        this.step = this.step !== -1 ? this.step : 0;\n        this.toggleChangingMode(firstPage);\n        return editRow || this.editRows[this.changingRowIndex];\n    };\n    DynamicWizard.prototype.cancelRow = function () {\n        var rowIndex = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.clone(this.changingRowIndex);\n        if (this.options.readOnly) {\n            return;\n        }\n        var editRow = this.editRows[rowIndex];\n        if (editRow.state === FormState.New) {\n            if (this.isSavingInProgress) {\n                this.removeRow(rowIndex);\n            }\n            else {\n                editRow.state = FormState.Removed;\n                this.clearErrors(rowIndex);\n                this.destroyComponents(rowIndex);\n                if (this.inlineEditMode) {\n                    this.splice(rowIndex);\n                }\n                this.editRows.splice(rowIndex, 1);\n            }\n        }\n        else if (editRow.state === FormState.Editing) {\n            editRow.state = editRow.prevState;\n            if (this.inlineEditMode) {\n                this.dataValue[rowIndex] = editRow.backup;\n            }\n            editRow.data = editRow.backup;\n            editRow.backup = null;\n            if (this.isSavingInProgress) {\n                this.setValues(editRow);\n                this.rebuild();\n            }\n            this.restoreRowContext(editRow);\n            if (!this.component.rowDrafts) {\n                this.clearErrors(rowIndex);\n            }\n        }\n        this.returnPrevPageState();\n        this.shouldUpdate = true;\n        this.checkValidity(null, true);\n        this.redraw();\n        if (this.component.rowDrafts) {\n            this.checkValidity(this.data, false);\n        }\n    };\n    DynamicWizard.prototype.returnPrevPageState = function () {\n        this.isChangingMode = false;\n        this.isSavingInProgress = false;\n        this.step = -1;\n        this.changingRowIndex = null;\n        this.toggleChangingMode();\n    };\n    DynamicWizard.prototype.setValues = function (editRow) {\n        if (this.options.readOnly) {\n            return;\n        }\n        if (this.saveEditMode) {\n            var dataValue = this.dataValue || [];\n            if (editRow.state === FormState.New && !this.isSavingInProgress) {\n                var newIndex = dataValue.length;\n                dataValue.push(editRow.data);\n                if (this.changingRowIndex !== newIndex) {\n                    this.editRows.splice(this.changingRowIndex, 1);\n                    this.editRows.splice(this.changingRowIndex, 0, editRow);\n                }\n            }\n            else if (editRow.state === FormState.Editing || this.isSavingInProgress) {\n                dataValue[this.changingRowIndex] = editRow.data;\n            }\n        }\n    };\n    DynamicWizard.prototype.saveRow = function (isRowValid) {\n        var _this = this;\n        var editRow = this.editRows[this.changingRowIndex];\n        this.setValues(editRow);\n        if (this.isSavingInProgress) {\n            this.isSavingInProgress = false;\n        }\n        editRow.state = this.component.rowDrafts && !isRowValid ? FormState.Draft : FormState.Saved;\n        editRow.backup = null;\n        this.updateValue();\n        this.triggerChange();\n        if (this.component.rowDrafts) {\n            editRow.components.forEach(function (comp) { return comp.setPristine(_this.pristine); });\n        }\n        this.checkValidity(null, true);\n        this.redraw();\n        if (editRow.alerts) {\n            editRow.alerts = false;\n        }\n        this.isChangingMode = false;\n        this.changingRowIndex = null;\n        this.shouldUpdate = true;\n        this.toggleChangingMode();\n        return true;\n    };\n    DynamicWizard.prototype.saveCurrentPageData = function (editRow) {\n        if (editRow.state === FormState.New || editRow.state === FormState.Editing) {\n            this.setValues(editRow);\n            this.checkData(this.data);\n            if (!this.isSavingInProgress) {\n                this.isSavingInProgress = true;\n            }\n        }\n    };\n    DynamicWizard.prototype.beforeFocus = function (component) {\n        if ('beforeFocus' in this.parent) {\n            this.parent.beforeFocus(this);\n        }\n        var relativePath = this.getRelativePath(component.path);\n        var arrayPath = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.getArrayFromComponentPath(relativePath);\n        var step = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.findIndex(this.components, function (comp) { return comp.key === component.component.key; });\n        this.switchToStep(arrayPath[0], step);\n    };\n    DynamicWizard.prototype.isRowEditing = function (editRow) {\n        return editRow.state === FormState.Editing || editRow.state === FormState.New;\n    };\n    DynamicWizard.prototype.switchToStep = function (rowIndex, step) {\n        var editRow = this.editRows[rowIndex];\n        var isAlreadyEditing = this.isRowEditing(editRow);\n        if (!editRow)\n            return;\n        if (!isAlreadyEditing) {\n            this.editRow(rowIndex, step);\n        }\n        else {\n            this.step = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isFinite(step) ? step : 0;\n            this.redraw();\n            this.validateRow(editRow, false);\n        }\n    };\n    DynamicWizard.prototype.editRow = function (rowIndex, step) {\n        var editRow = this.editRows[rowIndex];\n        var isAlreadyEditing = this.isRowEditing(editRow);\n        if (!editRow || isAlreadyEditing) {\n            return;\n        }\n        editRow.prevState = editRow.state;\n        editRow.state = FormState.Editing;\n        var dataSnapshot = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.cloneDeep(editRow.data);\n        if (this.inlineEditMode) {\n            editRow.backup = dataSnapshot;\n        }\n        else {\n            editRow.backup = editRow.data;\n            editRow.data = dataSnapshot;\n            this.restoreRowContext(editRow);\n        }\n        if (this.component.modal) {\n            return this.addRowModal(rowIndex);\n        }\n        this.isChangingMode = true;\n        this.changingRowIndex = rowIndex;\n        this.step = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isFinite(step) ? step : 0;\n        this.toggleChangingMode();\n        this.validateRow(editRow, false);\n    };\n    DynamicWizard.prototype.removeRow = function (rowIndex) {\n        if (this.options.readOnly) {\n            return;\n        }\n        this.baseRemoveRow(rowIndex);\n        this.splice(rowIndex);\n        this.editRows.splice(rowIndex, 1);\n        this.updateRowsComponents(rowIndex);\n        this.updateValue();\n        this.triggerChange();\n        this.checkValidity(null, true);\n        this.checkData();\n        this.redraw();\n    };\n    DynamicWizard.prototype.renderRow = function (row, rowIndex) {\n        var _this = this;\n        var dataValue = this.dataValue || [];\n        var flattenedComponents = this.flattenComponents(rowIndex);\n        var rowTemplate = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.Evaluator.noeval ? _templates__WEBPACK_IMPORTED_MODULE_2__.default.row : formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.component, 'templates.row', DynamicWizard.defaultRowTemplate);\n        return this.renderString(rowTemplate, {\n            row: dataValue[rowIndex] || {},\n            data: this.data,\n            rowIndex: rowIndex,\n            components: this.component.components,\n            flattenedComponents: flattenedComponents,\n            isVisibleInRow: function (component) { return _this.isComponentVisibleInRow(component, flattenedComponents); },\n            getView: function (component, data) {\n                var instance = flattenedComponents[component.key];\n                var view = instance ? instance.getView(data || instance.dataValue) : '';\n                if (instance && instance.widget && (view !== '--- PROTECTED ---')) {\n                    if (formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.isArray(view)) {\n                        view = view.map(function (value) { return instance.widget.getValueAsString(value); });\n                    }\n                    else {\n                        view = instance.widget.getValueAsString(view);\n                    }\n                }\n                return view;\n            },\n            state: this.editRows[rowIndex].state,\n        });\n    };\n    DynamicWizard.prototype.hasButton = function (name, nextPage) {\n        if (nextPage === void 0) { nextPage = this.getNextPage(); }\n        // get page options with global options as default values\n        var _a = this.buttonSettings, _b = _a.previous, previous = _b === void 0 ? this.buttonSettings.showPrevious : _b, _c = _a.cancel, cancel = _c === void 0 ? this.buttonSettings.showCancel : _c, _d = _a.next, next = _d === void 0 ? this.buttonSettings.showNext : _d;\n        switch (name) {\n            case 'previous':\n                return previous && this.step !== 0;\n            case 'next':\n                return next && nextPage;\n            case 'cancel':\n                return cancel;\n            default:\n                return true;\n        }\n    };\n    DynamicWizard.prototype.getNextPage = function () {\n        var _a;\n        return this.step < ((_a = this.component) === null || _a === void 0 ? void 0 : _a.components.length);\n    };\n    DynamicWizard.prototype.prevPage = function () {\n        var editRow = this.editRows[this.changingRowIndex];\n        if (this.step === 0) {\n            this.rootWizard.prevPage();\n            return;\n        }\n        else {\n            var currStep = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.clone(this.step);\n            this.step = currStep - 1;\n            if (!editRow.components[this.step]._visible) {\n                this.prevPage();\n                return;\n            }\n            this.saveCurrentPageData(editRow);\n        }\n    };\n    DynamicWizard.prototype.findRoot = function (component) {\n        var _a;\n        return ((_a = component.parent) === null || _a === void 0 ? void 0 : _a.parent) ? this.findRoot(component.parent) : component.parent;\n    };\n    DynamicWizard.prototype.nextPage = function () {\n        var _a;\n        var editRow = this.editRows[this.changingRowIndex];\n        var isRowValid = this.validateRow(editRow, true);\n        if (!this.component.rowDrafts) {\n            if (!isRowValid) {\n                return true;\n            }\n        }\n        if (this.step === ((_a = this.component) === null || _a === void 0 ? void 0 : _a.components.length) - 1) {\n            this.saveRow(isRowValid);\n            this.step = -1;\n            if (this.rootWizard.currentNextPage === -1) {\n                this.rootWizard.redraw();\n            }\n            return false;\n        }\n        var prevStep = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.clone(this.step);\n        this.step = prevStep + 1;\n        if (!(editRow === null || editRow === void 0 ? void 0 : editRow.components[this.step]._visible)) {\n            this.nextPage();\n            return;\n        }\n        this.saveCurrentPageData(editRow);\n    };\n    DynamicWizard.prototype.validateStep = function (component, valid, dirty, rowData) {\n        var isValid = valid;\n        var hasServerError = !!(component.serverErrors && component.serverErrors.length);\n        if (!this.component.rowDrafts && !hasServerError) {\n            component.setPristine(!dirty);\n        }\n        isValid = isValid && component.checkValidity(null, dirty, rowData);\n        return isValid;\n    };\n    ;\n    DynamicWizard.prototype.validateRow = function (editRow, dirty) {\n        var _this = this;\n        var valid = true;\n        var errorsSnapshot = __spreadArrays(this.errors);\n        if (editRow.state === FormState.Editing || dirty || (editRow.state === FormState.Draft && !this.pristine && !this.root.pristine)) {\n            var component = editRow.components[this.step];\n            if (component) {\n                valid = this.validateStep(component, valid, dirty, editRow.data);\n            }\n            else if (this.step === -1) {\n                editRow.components.forEach(function (comp) {\n                    valid = _this.validateStep(comp, valid, dirty, editRow.data);\n                });\n            }\n        }\n        if (this.component.validate && this.component.validate.row) {\n            valid = this.evaluate(this.component.validate.row, {\n                valid: valid,\n                row: editRow.data\n            }, 'valid', true);\n            if (valid.toString() !== 'true') {\n                editRow.error = valid;\n                valid = false;\n            }\n            else {\n                editRow.error = null;\n            }\n            if (valid === null) {\n                valid = \"Invalid row validation for \" + this.key;\n            }\n        }\n        editRow.errors = !valid ? this.errors.filter(function (err) { return !errorsSnapshot.includes(err); }) : null;\n        this.showRowErrorAlerts(editRow, !!valid);\n        return !!valid;\n    };\n    DynamicWizard.prototype.toggleChangingMode = function (firstPage) {\n        var _a;\n        if (firstPage === void 0) { firstPage = false; }\n        if ((_a = this.rootWizard) === null || _a === void 0 ? void 0 : _a.element) {\n            if (firstPage) {\n                if (this.element && !this.element.classList.contains('dynamicWizard-changingMode')) {\n                    this.rootWizard.element.classList.add('dynamicWizard-changingMode');\n                    this.redraw();\n                }\n            }\n            else {\n                this.rootWizard.element.classList.toggle('dynamicWizard-changingMode');\n                this.redraw();\n                this.rootWizard.redraw();\n            }\n            this.triggerChange();\n        }\n    };\n    DynamicWizard.editForm = _DynamicWizard_form__WEBPACK_IMPORTED_MODULE_1__.default;\n    return DynamicWizard;\n}(EditGrid));\n/* harmony default export */ __webpack_exports__[\"default\"] = (DynamicWizard);\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/DynamicWizard.js?")},"./lib/components/DynamicWizard/editForm/DynamicWizard.edit.data.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'checkbox',\n        input: true,\n        weight: 105,\n        key: 'inlineEdit',\n        label: 'Inline Editing',\n        tooltip: 'Check this if you would like your changes within \\'edit\\' mode to be committed directly to the submission object as that row is being changed',\n    },\n    {\n        key: 'defaultValue',\n        ignore: true,\n    },\n    {\n        key: 'multiple',\n        ignore: true\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/editForm/DynamicWizard.edit.data.js?")},"./lib/components/DynamicWizard/editForm/DynamicWizard.edit.display.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        key: 'placeholder',\n        ignore: true,\n    },\n    {\n        key: 'modalEdit',\n        ignore: true,\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/editForm/DynamicWizard.edit.display.js?")},"./lib/components/DynamicWizard/editForm/DynamicWizard.edit.templates.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'textarea',\n        label: 'Header Template',\n        key: 'templates.header',\n        rows: 5,\n        editor: 'ace',\n        as: 'handlebars',\n        input: true,\n        placeholder: '/*** Lodash Template Code ***/',\n        tooltip: 'This is the <a href=\\'https://lodash.com/docs/4.17.5#template\\'>Lodash Template</a> used to render the header of the Dynamic Wizard.',\n        customConditional: function () {\n            return !formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.Evaluator.noeval;\n        }\n    },\n    {\n        type: 'textarea',\n        label: 'Row Template',\n        key: 'templates.row',\n        rows: 5,\n        editor: 'ace',\n        as: 'handlebars',\n        input: true,\n        placeholder: '/*** Lodash Template Code ***/',\n        description: 'Three available variables. \"row\" is an object of one row\\'s data, \"components\"' +\n            ' is the array of components in the grid and \"state\" is current row\\'s state (can be \"draft\" or \"saved\").',\n        tooltip: 'This is the <a href=\\'https://lodash.com/docs/4.17.5#template\\'>Lodash Template</a> used to render each row of the Dynamic Wizard.',\n        customConditional: function () {\n            return !formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.Evaluator.noeval;\n        }\n    },\n    {\n        type: 'textarea',\n        label: 'Footer Template',\n        key: 'templates.footer',\n        rows: 5,\n        editor: 'ace',\n        as: 'handlebars',\n        input: true,\n        placeholder: '/*** Lodash Template Code ***/',\n        description: 'Two available variables. \"value\" is the array of row data and \"components\" is the array of components in the grid.',\n        tooltip: 'This is the <a href=\\'https://lodash.com/docs/4.17.5#template\\'>Lodash Template</a> used to render the footer of the Dynamic Wizard.',\n        customConditional: function () {\n            return !formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils.Evaluator.noeval;\n        }\n    },\n    {\n        type: 'textfield',\n        input: true,\n        key: 'rowClass',\n        label: 'Row CSS Class',\n        placeholder: 'Row CSS Class',\n        tooltip: 'CSS class to add to the edit row wrapper.'\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/editForm/DynamicWizard.edit.templates.js?")},"./lib/components/DynamicWizard/editForm/DynamicWizard.edit.validation.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        weight: 110,\n        key: 'validate.minLength',\n        label: 'Minimum Length',\n        placeholder: 'Minimum Length',\n        type: 'number',\n        tooltip: 'The minimum length requirement this field must meet.',\n        input: true\n    },\n    {\n        weight: 120,\n        key: 'validate.maxLength',\n        label: 'Maximum Length',\n        placeholder: 'Maximum Length',\n        type: 'number',\n        tooltip: 'The maximum length requirement this field must meet.',\n        input: true\n    },\n    {\n        type: 'checkbox',\n        input: true,\n        weight: 105,\n        key: 'rowDrafts',\n        label: 'Enable Row Drafts',\n        tooltip: 'Allow save rows even if their data is invalid. Errors will occur when try to submit with invalid rows.',\n    }\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/editForm/DynamicWizard.edit.validation.js?")},"./lib/components/DynamicWizard/templates/header.ejs.js":function(__unused_webpack_module,exports){eval('Object.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = \'\';\n__p += \'<div class="row">\\n  <div class="col-sm-2">\\n    Users\\n  </div>\\n</div>\';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/templates/header.ejs.js?')},"./lib/components/DynamicWizard/templates/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _row_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./row.ejs */ "./lib/components/DynamicWizard/templates/row.ejs.js");\n/* harmony import */ var _header_ejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./header.ejs */ "./lib/components/DynamicWizard/templates/header.ejs.js");\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({ row: _row_ejs__WEBPACK_IMPORTED_MODULE_0__.default, header: _header_ejs__WEBPACK_IMPORTED_MODULE_1__.default });\n\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/templates/index.js?')},"./lib/components/DynamicWizard/templates/row.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<div class=\"list-group-item\">\\n  <div class=\"list-group-subheader\">\\n    <div class=\"row\">\\n      <div class=\"col-sm-2\">\\n        User ' +\n((__t = ( rowIndex + 1 )) == null ? '' : __t) +\n'\\n      </div>\\n      ';\n if (!ctx.self.options.readOnly) { ;\n__p += '\\n      <div class=\"col-sm-2\">\\n        <div class=\"btn-group pull-right\">\\n          <button class=\"btn btn-default btn-light btn-sm editCard\"><i class=\"' +\n((__t = ( ctx.iconClass('edit') )) == null ? '' : __t) +\n'\"></i></button>\\n          <button class=\"btn btn-danger btn-sm removeCard\"><i class=\"' +\n((__t = ( ctx.iconClass('trash') )) == null ? '' : __t) +\n'\"></i></button>\\n        </div>\\n      </div>\\n      ';\n } ;\n__p += '\\n    </div>\\n  </div>\\n  ';\n ctx.util.eachComponent(ctx.components, function(component) { ;\n__p += '\\n  ';\n if ((!component.hasOwnProperty('tableView') || component.tableView) && ctx.isVisibleInRow(component)) { ;\n__p += '\\n  <div class=\"row\">\\n    <div class=\"col-sm-2\">\\n      ' +\n((__t = ( component.key )) == null ? '' : __t) +\n'\\n    </div>\\n  </div>\\n  <div class=\"row\">\\n    <div class=\"col-sm-2\">\\n      ' +\n((__t = ( ctx.getView(component, ctx.row[component.key]) )) == null ? '' : __t) +\n'\\n    </div>\\n  </div>\\n  ';\n } ;\n__p += '\\n  ';\n }) ;\n__p += '\\n</div>';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/components/DynamicWizard/templates/row.ejs.js?")},"./lib/components/Sketchpad/Sketchpad.form.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ "formiojs");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _editForm_Sketchpad_edit_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editForm/Sketchpad.edit.display */ "./lib/components/Sketchpad/editForm/Sketchpad.edit.display.js");\n/* harmony import */ var _editForm_Sketchpad_edit_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editForm/Sketchpad.edit.validation */ "./lib/components/Sketchpad/editForm/Sketchpad.edit.validation.js");\n/* harmony import */ var _editForm_Sketchpad_edit_data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editForm/Sketchpad.edit.data */ "./lib/components/Sketchpad/editForm/Sketchpad.edit.data.js");\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nvar componentEditForm = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.component.editForm;\n\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n    var extend = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        extend[_i] = arguments[_i];\n    }\n    return componentEditForm.apply(void 0, __spreadArrays([[\n            {\n                key: \'display\',\n                components: _editForm_Sketchpad_edit_display__WEBPACK_IMPORTED_MODULE_1__.default,\n            },\n            {\n                key: \'validation\',\n                components: _editForm_Sketchpad_edit_validation__WEBPACK_IMPORTED_MODULE_2__.default,\n            },\n            {\n                key: \'data\',\n                components: _editForm_Sketchpad_edit_data__WEBPACK_IMPORTED_MODULE_3__.default,\n            },\n        ]], extend));\n}\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/Sketchpad.form.js?')},"./lib/components/Sketchpad/Sketchpad.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var two_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! two.js */ \"./node_modules/two.js/build/two.module.js\");\n/* harmony import */ var vanilla_picker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vanilla-picker */ \"./node_modules/vanilla-picker/dist/vanilla-picker.mjs\");\n/* harmony import */ var _Sketchpad_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sketchpad.form */ \"./lib/components/Sketchpad/Sketchpad.form.js\");\n/* harmony import */ var _Sketchpad_modes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sketchpad.modes */ \"./lib/components/Sketchpad/Sketchpad.modes.js\");\n/* harmony import */ var _Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Sketchpad.toolbar.buttons */ \"./lib/components/Sketchpad/Sketchpad.toolbar.buttons.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\n\n\n\n\n\nvar FieldComponent = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.field;\nvar Sketchpad = /** @class */ (function (_super) {\n    __extends(Sketchpad, _super);\n    function Sketchpad() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.apply(this, args) || this;\n        _this.dimensionsCorrection = 1;\n        _this.imageType = _this.component.imageType;\n        _this.modes = _Sketchpad_modes__WEBPACK_IMPORTED_MODULE_4__.default.call(_this, two_js__WEBPACK_IMPORTED_MODULE_1__.default);\n        _this.state = {\n            mode: Object.keys(_this.modes)[0],\n            stroke: _this.component.defaultStroke || Sketchpad.defaultStroke,\n            fill: _this.component.defaultFill || Sketchpad.defaultFill,\n            linewidth: _this.component.defaultLineWidth || Sketchpad.defaultLineWidth,\n            circleSize: _this.component.defaultCircleSize || Sketchpad.defaultCircleSize,\n        };\n        _this.dimensionsMultiplier = 1;\n        _this.zoomInfo = {\n            viewBox: {},\n            canvasViewBox: {},\n            multiplier: 1.5,\n            totalMultiplier: 1,\n        };\n        _this.deleted = [];\n        _this.layers = [];\n        return _this;\n    }\n    Object.defineProperty(Sketchpad, \"defaultFill\", {\n        get: function () {\n            return '#ccc';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad, \"defaultStroke\", {\n        get: function () {\n            return '#333';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad, \"defaultLineWidth\", {\n        get: function () {\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad, \"defaultCircleSize\", {\n        get: function () {\n            return 10;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Sketchpad.schema = function () {\n        var extend = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            extend[_i] = arguments[_i];\n        }\n        return FieldComponent.schema.apply(FieldComponent, __spreadArrays([{\n                type: 'sketchpad',\n                label: 'Sketchpad',\n                key: 'sketchpad',\n                input: true,\n                multiple: true,\n                modalEdit: true,\n                imageType: 'image',\n                autoSize: true,\n                defaultZoom: 100,\n                defaultStroke: Sketchpad.defaultStroke,\n                defaultFill: Sketchpad.defaultFill,\n                defaultLineWidth: Sketchpad.defaultLineWidth,\n                defaultCircleSize: Sketchpad.defaultCircleSize,\n            }], extend));\n    };\n    Object.defineProperty(Sketchpad, \"builderInfo\", {\n        get: function () {\n            return {\n                title: 'Sketchpad',\n                group: 'premium',\n                icon: 'image',\n                weight: 110,\n                documentation: 'http://help.form.io/userguide/',\n                schema: Sketchpad.schema(),\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Sketchpad.prototype.render = function () {\n        return _super.prototype.render.call(this, this.renderTemplate(this.templateName, __assign({}, this.renderContext)));\n    };\n    Sketchpad.prototype.loadComponentRefs = function (element) {\n        this.loadRefs(element, __assign({ canvas: 'single', drawingContainer: 'single', background: 'single', backgroundImage: 'single', totalMultiplier: 'single', previewContainer: 'single', previewDrawing: 'single' }, this.buttonsRefs));\n    };\n    Sketchpad.prototype.init = function () {\n        var _this = this;\n        var backgroundReadyPromise = new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve, reject) {\n            _this.backgroundReady = { resolve: resolve, reject: reject };\n        });\n        this.backgroundReady.promise = backgroundReadyPromise;\n        return _super.prototype.init.call(this);\n    };\n    Sketchpad.prototype.attach = function (element) {\n        var _this = this;\n        var backgroundReadyPromise = new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve, reject) {\n            _this.backgroundReady = { resolve: resolve, reject: reject };\n        });\n        this.backgroundReady.promise = backgroundReadyPromise;\n        var superAttach = _super.prototype.attach.call(this, element);\n        this.loadComponentRefs(element);\n        if (this.refs.canvas) {\n            this.createDrawingArea();\n            this.backgroundReady.promise.then(function () { return _this.onBackgroundReady(); });\n            if (!this.disabled && !this.shouldDisabled && !this.readOnly) {\n                this.attachDrawEvents();\n            }\n            if (this.imageType === 'image' && this.refs.backgroundImage) {\n                this.loadBackgroundImage(this.refs.backgroundImage);\n            }\n            else {\n                this.addBackground();\n            }\n            this.attachToolbar();\n        }\n        return superAttach;\n    };\n    Object.defineProperty(Sketchpad.prototype, \"buttonsRefs\", {\n        get: function () {\n            var refsConfig = {};\n            Object.values(_Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default).forEach(function (buttonsGroup) { return buttonsGroup.forEach(function (button) {\n                refsConfig[button.key] = 'single';\n                if (button.input) {\n                    refsConfig[button.key + \"-input\"] = 'single';\n                }\n            }); });\n            return refsConfig;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"renderContext\", {\n        get: function () {\n            return {\n                zoomInfo: {\n                    totalMultiplier: this.zoomInfo ? Math.round(this.zoomInfo.totalMultiplier * 100) / 100 : 1,\n                },\n                buttonGroups: this.buttonGroups,\n                disabled: _super.prototype.disabled,\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"defaultSchema\", {\n        get: function () {\n            return Sketchpad.schema();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"templateName\", {\n        get: function () {\n            return 'sketchpad';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"emptyValue\", {\n        get: function () {\n            return [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"dataReady\", {\n        get: function () {\n            return this.backgroundReady.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"attachFunctions\", {\n        get: function () {\n            var _this = this;\n            var setColor = function (element, color, onChange) {\n                var picker = new vanilla_picker__WEBPACK_IMPORTED_MODULE_2__.default(element);\n                element.style.color = color;\n                picker.setColor(color, true);\n                picker.onChange = function (newColor) {\n                    element.style.color = newColor.rgbaString;\n                    onChange(newColor.rgbaString);\n                };\n                return element;\n            };\n            var attachInput = function (key, value, onChange) {\n                var inputRef = _this.refs[key];\n                if (inputRef) {\n                    inputRef.addEventListener('change', function (e) { return onChange(e.target.value); });\n                    inputRef.value = value;\n                }\n            };\n            return {\n                stroke: function (element) { return setColor(element, _this.state.stroke, function (color) { return _this.state.stroke = color; }); },\n                fill: function (element) { return setColor(element, _this.state.fill, function (color) { return _this.state.fill = color; }); },\n                width: function () { return attachInput('width-input', _this.state.linewidth, function (lineWidth) { return _this.state.linewidth = lineWidth; }); },\n                circle: function () { return attachInput('circle-input', _this.state.circleSize, function (circleSize) { return _this.state.circleSize = circleSize; }); },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"buttonGroups\", {\n        get: function () {\n            return Object.entries(_Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default).map(function (_a) {\n                var buttons = _a[1];\n                return buttons;\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"componentLabel\", {\n        get: function () {\n            return \"\" + (this.component.hideLabel ? '' : \"<label class=\\\"control-label\\\">\" + this.component.label + \"</label><br>\");\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Sketchpad.prototype.loadBackgroundImage = function (backgrounImageElement) {\n        var _this = this;\n        backgrounImageElement.addEventListener('load', function () { return _this.addBackground(); });\n        backgrounImageElement.setAttribute('src', this.component.imageUrl);\n    };\n    Sketchpad.prototype.createDrawingArea = function () {\n        this.two = new two_js__WEBPACK_IMPORTED_MODULE_1__.default({ type: two_js__WEBPACK_IMPORTED_MODULE_1__.default.Types.svg }).appendTo(this.refs.canvas);\n        this.canvasSvg = this.two.renderer.domElement;\n        this.addClass(this.canvasSvg, 'formio-sketchpad-svg');\n        this.canvasSvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    };\n    Sketchpad.prototype.getActualCoordinate = function (coordinate) {\n        // recalculate coordinate taking into account changed size of drawing area\n        var x = coordinate.x, y = coordinate.y;\n        var minX = this.zoomInfo.canvasViewBox.current.minX;\n        var minY = this.zoomInfo.canvasViewBox.current.minY;\n        coordinate.x = Math.round(x / this.zoomInfo.totalMultiplier / this.dimensionsMultiplier + minX);\n        coordinate.y = Math.round(y / this.zoomInfo.totalMultiplier / this.dimensionsMultiplier + minY);\n        return coordinate;\n    };\n    Sketchpad.prototype.onBackgroundReady = function () {\n        var _this = this;\n        this.backgroundReady.isReady = true;\n        this.addEventListener(window, 'resize', formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.debounce(function () { return _this.stretchDrawingArea(); }, 100));\n        this.resetZoom(); // set zoom to default\n    };\n    Sketchpad.prototype.addBackground = function () {\n        var _this = this;\n        if (this.refs.backgroundImage && this.refs.backgroundImage.complete) {\n            this.setBackgroundImage();\n        }\n        else if (this.component.imageUrl && this.imageType === 'svg') {\n            formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.makeStaticRequest(this.component.imageUrl, 'GET', null, { noToken: true, headers: {} })\n                .then(function (image) {\n                _this.setBackgroundImage(image);\n            })\n                .catch(function (err) {\n                /* tslint:disable */\n                console.warn(err);\n                /* tslint:enable */\n                _this.refs.background.innerHTML = _this.t('Background image failed to load. Tagpad doesn\\'t work without background image');\n                _this.backgroundReady.reject();\n            });\n        }\n    };\n    Sketchpad.prototype.parseSvg = function (svgMarkup) {\n        var xmlDoc = new DOMParser().parseFromString(svgMarkup, 'image/svg+xml');\n        var backgroundSvg = xmlDoc.getElementsByTagName('svg');\n        if (!backgroundSvg || !backgroundSvg[0]) {\n            return null;\n        }\n        return backgroundSvg[0];\n    };\n    Sketchpad.prototype.prepareSvg = function (svg) {\n        // make background image to be stretched to available width and preserve aspect ratio\n        svg.removeAttribute('width');\n        svg.removeAttribute('height');\n        svg.setAttribute('ref', 'backgroundImage');\n    };\n    Sketchpad.prototype.setSvgImage = function (svgMarkup) {\n        var backgroundSvg = this.parseSvg(svgMarkup);\n        if (!backgroundSvg) {\n            /* tslint:disable */\n            console.warn(\"Sketchpad '\" + this.component.key + \"': Background SVG doesn't contain <svg> tag on it\");\n            /* tslint:enable */\n            return;\n        }\n        // read initial dimensions from viewBox\n        var initialViewBox = backgroundSvg.getAttribute('viewBox');\n        var dimensions = initialViewBox ? initialViewBox.split(' ').map(parseFloat)\n            : this.mapDimensionsFromAttributes(backgroundSvg);\n        this.setDimensions.apply(this, dimensions);\n        this.prepareSvg(backgroundSvg);\n        var viewBox = this.dimensions;\n        this.assignZoomInfo(viewBox);\n        this.setViewBoxAttribute(backgroundSvg, viewBox);\n        svgMarkup = new XMLSerializer().serializeToString(backgroundSvg);\n        // fix issue in Chrome when it returned '<svg:svg>...</svg:svg>' string after serialization\n        svgMarkup = svgMarkup.replace('<svg:svg', '<svg').replace('</svg:svg>', '</svg>');\n        this.loadComponentRefs(this.element);\n        this.refs.background.innerHTML = svgMarkup;\n    };\n    Sketchpad.prototype.assignZoomInfo = function (viewBox, type) {\n        if (type === void 0) { type = 'viewBox'; }\n        this.zoomInfo[type].default = {\n            width: viewBox.width,\n            height: viewBox.height,\n            minX: viewBox.minX,\n            minY: viewBox.minY,\n        };\n        this.zoomInfo[type].current = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.cloneDeep(this.zoomInfo[type].default);\n    };\n    Sketchpad.prototype.buttonAttributes = function (button) {\n        return (button && button.input && button.input.attributes) ?\n            Object.entries(button.input.attributes).map(function (_a) {\n                var attr = _a[0], value = _a[1];\n                return attr + \"='\" + value + \"'\";\n            }).join(' ') :\n            '';\n    };\n    Sketchpad.prototype.attachDrawEvents = function () {\n        var _this = this;\n        this.canvasSvg\n            .addEventListener('mousedown', function (e) {\n            e.preventDefault();\n            var offset = _this.canvasSvg.getBoundingClientRect();\n            // change cursor\n            var cursor = 'default';\n            if (_this.modes[_this.state.mode].cursor) {\n                cursor = _this.modes[_this.state.mode].cursor.clicked || _this.modes[_this.state.mode].cursor.hover;\n            }\n            _this.canvasSvg.style.cursor = cursor;\n            if (_this.modes[_this.state.mode].eventStart) {\n                _this.modes[_this.state.mode].eventStart(_this.getActualCoordinate({\n                    x: e.clientX - offset.left,\n                    y: e.clientY - offset.top,\n                }));\n            }\n            var mouseDrag = function (e) {\n                e.preventDefault();\n                var offset = _this.canvasSvg.getBoundingClientRect();\n                if (_this.modes[_this.state.mode].drag) {\n                    _this.modes[_this.state.mode].drag(_this.getActualCoordinate({\n                        x: e.clientX - offset.left,\n                        y: e.clientY - offset.top,\n                    }));\n                }\n            };\n            var mouseEnd = function (e) {\n                e.preventDefault();\n                _this.canvasSvg.removeEventListener('mousemove', mouseDrag);\n                _this.canvasSvg.removeEventListener('mouseup', mouseEnd);\n                document.removeEventListener('mouseup', mouseEnd);\n                // change cursor\n                var cursor = 'default';\n                if (_this.modes[_this.state.mode].cursor) {\n                    cursor = _this.modes[_this.state.mode].cursor.hover || cursor;\n                }\n                _this.canvasSvg.style.cursor = cursor;\n                var offset = _this.canvasSvg.getBoundingClientRect();\n                if (_this.modes[_this.state.mode].eventEnd) {\n                    _this.modes[_this.state.mode].eventEnd(_this.getActualCoordinate({\n                        x: e.clientX - offset.left,\n                        y: e.clientY - offset.top,\n                    }));\n                }\n            };\n            _this.canvasSvg.addEventListener('mousemove', mouseDrag);\n            _this.canvasSvg.addEventListener('mouseup', mouseEnd);\n            // this is necessary to stop drawing after mouse is up outside of canvas\n            document.addEventListener('mouseup', mouseEnd);\n            return false;\n        });\n        // Set up touch events.\n        this.canvasSvg\n            .addEventListener('touchstart', function (e) {\n            e.preventDefault();\n            var offset = _this.canvasSvg.getBoundingClientRect();\n            var touch = e.changedTouches[0];\n            // change cursor\n            var cursor = 'default';\n            if (_this.modes[_this.state.mode].cursor) {\n                cursor = _this.modes[_this.state.mode].cursor.clicked || _this.modes[_this.state.mode].cursor.hover;\n            }\n            _this.canvasSvg.style.cursor = cursor;\n            if (_this.modes[_this.state.mode].eventStart) {\n                _this.modes[_this.state.mode].eventStart(_this.getActualCoordinate({\n                    x: touch.clientX - offset.left,\n                    y: touch.clientY - offset.top,\n                }));\n            }\n            var touchDrag = function (e) {\n                e.preventDefault();\n                var offset = _this.canvasSvg.getBoundingClientRect();\n                var touch = e.changedTouches[0];\n                if (_this.modes[_this.state.mode].drag) {\n                    _this.modes[_this.state.mode].drag(_this.getActualCoordinate({\n                        x: touch.clientX - offset.left,\n                        y: touch.clientY - offset.top,\n                    }));\n                }\n            };\n            var touchEnd = function (e) {\n                e.preventDefault();\n                _this.canvasSvg\n                    .removeEventListener('touchmove', touchDrag);\n                _this.canvasSvg\n                    .removeEventListener('touchend', touchEnd);\n                var offset = _this.canvasSvg.getBoundingClientRect();\n                var touch = e.changedTouches[0];\n                // change cursor\n                var cursor = 'default';\n                if (_this.modes[_this.state.mode].cursor) {\n                    cursor = _this.modes[_this.state.mode].cursor.hover || cursor;\n                }\n                _this.canvasSvg.style.cursor = cursor;\n                if (_this.modes[_this.state.mode].eventEnd) {\n                    _this.modes[_this.state.mode].eventEnd(_this.getActualCoordinate({\n                        x: touch.clientX - offset.left,\n                        y: touch.clientY - offset.top,\n                    }));\n                }\n            };\n            _this.canvasSvg\n                .addEventListener('touchmove', touchDrag);\n            _this.canvasSvg\n                .addEventListener('touchend', touchEnd);\n            return false;\n        });\n        this.two.update();\n    };\n    Sketchpad.prototype.attachToolbar = function () {\n        this.attachModesButtons();\n        this.attachStylesButtons();\n        this.attachActionsButtons();\n        this.setActiveButton(this.state.mode);\n    };\n    Sketchpad.prototype.attachModesButtons = function () {\n        var _this = this;\n        _Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default.modes.forEach(function (mode) {\n            var buttonRef = _this.refs[mode.key];\n            if (buttonRef && _this.modes[mode.key]) {\n                var modeConfig_1 = _this.modes[mode.key];\n                buttonRef.addEventListener('click', function (e) { return _this.setState(modeConfig_1.state); });\n                _this.callAttachFunction(buttonRef, mode.key);\n            }\n        });\n    };\n    Sketchpad.prototype.attachStylesButtons = function () {\n        var _this = this;\n        _Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default.styles.forEach(function (style) {\n            var buttonRef = _this.refs[style.key];\n            if (buttonRef) {\n                _this.callAttachFunction(buttonRef, style.key);\n            }\n        });\n    };\n    Sketchpad.prototype.attachActionsButtons = function () {\n        var _this = this;\n        _Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default.actions.forEach(function (action) {\n            var buttonRef = _this.refs[action.key];\n            if (buttonRef) {\n                buttonRef.addEventListener('click', function () { return _this[action.key](); });\n            }\n        });\n    };\n    Sketchpad.prototype.callAttachFunction = function (element, key) {\n        if (this.attachFunctions[key]) {\n            this.attachFunctions[key](element);\n        }\n    };\n    Sketchpad.prototype.setState = function (state) {\n        Object.assign(this.state, state);\n        this.setActiveButton(this.state.mode);\n        this.canvasSvg.style.cursor = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.get(this.modes[this.state.mode], 'cursor.hover', 'default');\n    };\n    Sketchpad.prototype.setActiveButton = function (mode) {\n        var _this = this;\n        _Sketchpad_toolbar_buttons__WEBPACK_IMPORTED_MODULE_5__.default.modes.forEach(function (modeButton) {\n            if (_this.refs[modeButton.key]) {\n                _this.removeClass(_this.refs[modeButton.key], 'active');\n            }\n            if (_this.refs[mode]) {\n                _this.addClass(_this.refs[mode], 'active');\n            }\n        });\n    };\n    Sketchpad.prototype.setBackgroundImage = function (image) {\n        if (this.imageType === 'svg') {\n            if (image && image.startsWith('<?xml')) {\n                this.setSvgImage(image);\n            }\n            else { // Fallback to the 'image', after the image is loaded, this method will be called again\n                this.imageType = 'image';\n                var background = new Image();\n                background.setAttribute('ref', 'backgroundImage');\n                this.refs.background.appendChild(background);\n                this.loadBackgroundImage(background);\n            }\n        }\n        else {\n            this.setRasterImage();\n        }\n        this.onBackgroundImageWasSetted();\n    };\n    Sketchpad.prototype.setRasterImage = function () {\n        var viewBoxWidth = this.refs.backgroundImage.naturalWidth;\n        var viewBoxHeight = this.refs.backgroundImage.naturalHeight;\n        this.setDimensions(0, 0, viewBoxWidth, viewBoxHeight);\n        this.assignZoomInfo(this.dimensions);\n        this.assignZoomInfo(this.dimensions, 'canvasViewBox');\n    };\n    Sketchpad.prototype.onBackgroundImageWasSetted = function () {\n        this.loadRefs(this.element, {\n            backgroundImage: 'single',\n            component: 'single',\n        });\n        var width = this.component.width;\n        var height = this.component.height;\n        if (this.component.autoSize || this.componentModal) {\n            var calculatedSize = this.calculateAutoSize();\n            width = calculatedSize.width;\n            height = calculatedSize.height;\n        }\n        if (width && height && !this.component.autoSize) {\n            this.refs.drawingContainer.style.maxWidth = width + \"px\";\n            this.refs.drawingContainer.style.maxHeight = height + \"px\";\n        }\n        if (this.imageType === 'image') {\n            width = this.refs.backgroundImage.naturalWidth;\n            height = this.refs.backgroundImage.naturalHeight;\n        }\n        this.setDimensions(0, 0, width, height);\n        this.assignZoomInfo(this.dimensions, 'canvasViewBox');\n        this.dimensionsCorrection = this.dimensions.width / this.zoomInfo.viewBox.default.width;\n        // set canvas image viewBox (necessary for canvas SVG to stretch properly without losing correct aspect ration)\n        this.setViewBoxAttribute(this.canvasSvg, this.zoomInfo.canvasViewBox.default);\n        this.setEditorSize(this.dimensions.width, this.dimensions.height);\n        this.stretchDrawingArea();\n        this.draw(this.dataValue);\n        this.backgroundReady.resolve();\n    };\n    /**\n     * Calculates the width and height that image should have to make the component fit the window's size\n     */\n    Sketchpad.prototype.calculateAutoSize = function () {\n        var width = Math.round(this.refs.drawingContainer.offsetWidth);\n        var currentWidth = this.dimensions.width;\n        var currentHeight = this.dimensions.height;\n        // Calculate the ratio between image's width and height\n        var ratio = currentWidth / currentHeight;\n        // Calculate the image's height based on the available width\n        var height = Math.round(width / ratio);\n        // Calculate the maximal height of the image based on the window's height\n        var availableHeight = Math.round(window.innerHeight - window.innerHeight * 0.2);\n        // If the available height is geater than the height calculated based on the available width\n        if (availableHeight < height || width === 0) {\n            // Set it to the available and recalculate the width\n            height = availableHeight;\n            width = Math.round(height * ratio);\n        }\n        return { width: width, height: height };\n    };\n    Sketchpad.prototype.setOpenModalElement = function () {\n        var template = \"\\n      \" + this.componentLabel + \"\\n      <div class='formio-sketchpad-modal-preview-container' ref='previewContainer'>\\n        <div ref=\\\"openModal\\\">\\n          <img class='formio-sketchpad-modal-preview-background' src=\\\"\" + this.component.imageUrl + \"\\\" width=\\\"100%\\\"/>\\n          \" + this.getPreviewImage() + \"\\n        </div>\\n      </div>\\n    \";\n        this.componentModal.setOpenModalElement(template);\n    };\n    Sketchpad.prototype.getPreviewImage = function () {\n        if (!this.canvasSvg || !this.two || !this.zoomInfo.viewBox.default) {\n            return '';\n        }\n        else {\n            return \"<img class=\\\"formio-sketchpad-modal-preview-drawing\\\" src=\\\"data:image/svg+xml;base64,\" + this.getEncodedDrawing() + \"\\\"\\n                ref=\\\"previewDrawing\\\" width=\\\"100%\\\"/>\";\n        }\n    };\n    Sketchpad.prototype.getValueAsString = function (value, options) {\n        if (!value || !value.length) {\n            return '';\n        }\n        return '[Complex Data]';\n    };\n    Sketchpad.prototype.getEncodedDrawing = function () {\n        var svgElement = this.getSvg();\n        var svg = new XMLSerializer().serializeToString(svgElement);\n        var encoded = window.btoa(svg);\n        return encoded;\n    };\n    Sketchpad.prototype.getModalPreviewTemplate = function () {\n        var template = \"\\n      \" + this.componentLabel + \"\\n      <div class='formio-sketchpad-modal-preview-container' ref='previewContainer'>\\n        <div ref=\\\"openModal\\\">\\n          <img class='formio-sketchpad-modal-preview-background' src=\" + this.component.imageUrl + \" width=\\\"100%\\\"/>\\n          \" + this.getPreviewImage() + \"\\n        </div>\\n      </div>\";\n        return template;\n    };\n    Sketchpad.prototype.mapDimensionsFromAttributes = function (svg) {\n        return [\n            { attribute: 'x', defaultValue: 0 },\n            { attribute: 'y', defaultValue: 0 },\n            { attribute: 'width', defaultValue: 640 },\n            { attribute: 'height', defaultValue: 480 },\n        ].map(function (dimension) {\n            return parseFloat(svg.getAttribute(dimension.attribute)) || dimension.defaultValue;\n        });\n    };\n    Sketchpad.prototype.setDimensions = function (viewBoxMinX, viewBoxMinY, viewBoxWidth, viewBoxHeight) {\n        this.dimensions = {\n            width: viewBoxWidth,\n            height: viewBoxHeight,\n            minX: viewBoxMinX,\n            minY: viewBoxMinY,\n        };\n    };\n    Sketchpad.prototype.stretchDrawingArea = function () {\n        var _a = this.calculateAutoSize(), width = _a.width, height = _a.height;\n        // don't stretch if background dimensions are unknown yet\n        if (width && height) {\n            var _b = this.zoomInfo, canvasViewBox = _b.canvasViewBox, totalMultiplier = _b.totalMultiplier;\n            var defaultWidth = canvasViewBox.default.width;\n            var defaultHeight = canvasViewBox.default.height;\n            this.dimensionsMultiplier = width / defaultWidth;\n            this.dimensions.width = Math.round(defaultWidth * this.dimensionsMultiplier);\n            this.dimensions.height = Math.round(defaultHeight * this.dimensionsMultiplier);\n            if (width === this.editorSize.width && height === this.editorSize.height) {\n                return;\n            }\n            var editorWidth = totalMultiplier > 1 ? this.dimensions.width : this.dimensions.width * totalMultiplier;\n            var editorHeight = totalMultiplier > 1 ? this.dimensions.height : this.dimensions.height * totalMultiplier;\n            this.setEditorSize(editorWidth, editorHeight);\n        }\n    };\n    Sketchpad.prototype.setEditorSize = function (width, height) {\n        if (this.two) {\n            this.editorSize = ({ width: width, height: height });\n            this.two.width = width;\n            this.two.height = height;\n            this.two.update();\n        }\n        if (this.refs.backgroundImage) {\n            this.refs.backgroundImage.setAttribute('width', width);\n            this.refs.backgroundImage.setAttribute('height', height);\n        }\n        if (this.canvasSvg) {\n            this.canvasSvg.style.width = width;\n            this.canvasSvg.style.height = height;\n        }\n    };\n    Sketchpad.prototype.clear = function () {\n        if (this.two) {\n            this.two.clear();\n        }\n    };\n    Sketchpad.prototype.clearAll = function () {\n        this.layers = [];\n        this.dataValue = [];\n        if (this.two) {\n            this.clear();\n            this.two.update();\n        }\n    };\n    Sketchpad.prototype.draw = function (value) {\n        var _this = this;\n        if (!this.two) {\n            return;\n        }\n        this.clear();\n        if (!value || !value.length) {\n            this.two.update();\n            return;\n        }\n        this.layers = value.map(function (item) { return _this.modes[item.mode].draw(item); });\n        this.two.update();\n        this.appendDrawingToPreview();\n    };\n    Sketchpad.prototype.appendDrawingToPreview = function () {\n        var _a;\n        if ((_a = this.componentModal) === null || _a === void 0 ? void 0 : _a.element) {\n            this.loadComponentRefs(this.componentModal.element);\n            var drawingData = \"data:image/svg+xml;base64,\" + this.getEncodedDrawing();\n            if (this.refs.previewDrawing) {\n                this.refs.previewDrawing.setAttribute('src', drawingData);\n            }\n            else {\n                var drawing = new Image();\n                drawing.src = drawingData;\n                this.addClass(drawing, 'formio-sketchpad-modal-preview-drawing');\n                drawing.setAttribute('ref', 'previewDrawing');\n                if (this.refs.previewContainer) {\n                    this.refs.previewContainer.appendChild(drawing);\n                    this.addEventListener(drawing, 'click', this.componentModal.openModalListener);\n                }\n            }\n        }\n    };\n    Sketchpad.prototype.undo = function () {\n        var value = this.dataValue.slice();\n        if (!value.length) {\n            return;\n        }\n        this.deleted.push(value.pop());\n        this.dataValue = value;\n        this.triggerChange();\n        this.draw(value);\n    };\n    Sketchpad.prototype.redo = function () {\n        if (!this.deleted.length) {\n            return;\n        }\n        var value = this.dataValue.slice();\n        value.push(this.deleted.pop());\n        this.dataValue = value;\n        this.triggerChange();\n        this.draw(value);\n    };\n    Sketchpad.prototype.setValue = function (value, flags) {\n        _super.prototype.setValue.call(this, value, flags);\n        if (!this.backgroundReady.isReady || !this.two) {\n            return;\n        }\n        this.draw(value);\n    };\n    Sketchpad.prototype.getSvg = function () {\n        // clone view SVG element from editor\n        var svgElement = this.canvasSvg.cloneNode(true);\n        this.addClass(svgElement, 'formio-sketchpad-preview-svg');\n        svgElement.removeAttribute('style');\n        // set viewBox to default to reset zoom\n        var defaultViewBox = this.zoomInfo.canvasViewBox.default;\n        this.setViewBoxAttribute(svgElement, defaultViewBox);\n        return svgElement;\n    };\n    Sketchpad.prototype.normalizeSvgOffset = function (type) {\n        if (type === void 0) { type = 'viewBox'; }\n        var viewBox = this.zoomInfo[type];\n        // don't let offset go out of SVG on the left and on the top\n        this.zoomInfo[type].current.minX = viewBox.current.minX < viewBox.default.minX ? viewBox.default.minX\n            : viewBox.current.minX;\n        this.zoomInfo[type].current.minY = viewBox.current.minY < viewBox.default.minY ? viewBox.default.minY\n            : viewBox.current.minY;\n        // don't let offset go out of SVG on the right and on the bottom\n        var canvasMaxOffsetX = viewBox.default.width - viewBox.current.width + viewBox.default.minX;\n        var canvasMaxOffsetY = viewBox.default.height - viewBox.current.height + viewBox.default.minY;\n        this.zoomInfo[type].current.minX = viewBox.current.minX > (canvasMaxOffsetX) ? canvasMaxOffsetX\n            : viewBox.current.minX;\n        this.zoomInfo[type].current.minY = viewBox.current.minY > (canvasMaxOffsetY) ? canvasMaxOffsetY\n            : viewBox.current.minY;\n    };\n    Sketchpad.prototype.setViewBoxAttribute = function (element, viewBox) {\n        element.setAttribute('viewBox', viewBox.minX + \" \" + viewBox.minY + \" \" + viewBox.width + \" \" + viewBox.height);\n    };\n    Sketchpad.prototype.updateSvgViewBox = function (type) {\n        if (type === void 0) { type = 'viewBox'; }\n        // set viewBox so that SVG gets zoomed to the proper area according to zoomInfo\n        var viewBox = this.zoomInfo[type].current;\n        if (this.imageType !== 'svg') {\n            return;\n        }\n        if (type === 'viewBox') {\n            this.setViewBoxAttribute(this.refs.backgroundImage, viewBox);\n        }\n        else {\n            this.setViewBoxAttribute(this.canvasSvg, viewBox);\n        }\n    };\n    Sketchpad.prototype.drag = function (offset, type) {\n        if (type === void 0) { type = 'viewBox'; }\n        // calculate new offsets for SVG\n        this.zoomInfo[type].current.minX = this.zoomInfo[type].current.minX - offset.x;\n        this.zoomInfo[type].current.minY = this.zoomInfo[type].current.minY - offset.y;\n        this.normalizeSvgOffset(type);\n        this.updateSvgViewBox(type);\n    };\n    Sketchpad.prototype.dragImage = function (offset) {\n        var correctedOffset = this.dimensionsCorrection ? {\n            x: offset.x / this.dimensionsCorrection,\n            y: offset.y / this.dimensionsCorrection\n        } : offset;\n        this.drag(correctedOffset);\n        this.drag(offset, 'canvasViewBox');\n    };\n    Sketchpad.prototype.setTotalMultiplier = function (multiplier) {\n        this.zoomInfo.totalMultiplier = multiplier;\n        this.refs.totalMultiplier.innerHTML = this.t(Math.round(multiplier * 100) / 100);\n    };\n    Sketchpad.prototype.zoomImage = function (coordinate, type) {\n        if (type === void 0) { type = 'viewBox'; }\n        // calculate new viewBox width for canvas\n        this.zoomInfo[type].current.width =\n            Math.round(this.zoomInfo[type].default.width / this.zoomInfo.totalMultiplier);\n        this.zoomInfo[type].current.height =\n            Math.round(this.zoomInfo[type].default.height / this.zoomInfo.totalMultiplier);\n        var _a = this.zoomInfo[type].current, currentWidth = _a.width, currentHeight = _a.height;\n        var _b = this.zoomInfo[type].default, defaultWidth = _b.width, defaultHeight = _b.height;\n        if (currentWidth > defaultWidth && currentHeight > defaultHeight) {\n            this.zoomOut(type); // if should get less than initial size, change editor size instead of viewBox size\n        }\n        else {\n            this.zoomIn(coordinate, type); // if should get more than initial size, change viewBox size\n        }\n        this.updateSvgViewBox(type);\n    };\n    Sketchpad.prototype.zoom = function (coordinate, multiplier) {\n        this.setTotalMultiplier(this.zoomInfo.totalMultiplier * multiplier);\n        var correctedCoordinate = this.dimensionsCorrection ? {\n            x: coordinate.x / this.dimensionsCorrection,\n            y: coordinate.y / this.dimensionsCorrection\n        } : coordinate;\n        this.zoomImage(correctedCoordinate);\n        this.zoomImage(coordinate, 'canvasViewBox');\n    };\n    Sketchpad.prototype.zoomOut = function (type) {\n        if (type === void 0) { type = 'viewBox'; }\n        this.setEditorSize(this.dimensions.width * this.zoomInfo.totalMultiplier, this.dimensions.height * this.zoomInfo.totalMultiplier);\n        // restore default viewBox values for canvas and background\n        this.zoomInfo[type].current = formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.cloneDeep(this.zoomInfo[type].default);\n    };\n    Sketchpad.prototype.zoomIn = function (coordinate, type) {\n        if (type === void 0) { type = 'viewBox'; }\n        // restore editor size if needed\n        if (this.canvasSvg.width !== this.dimensions.width || this.canvasSvg.height !== this.dimensions.height) {\n            this.setEditorSize(this.dimensions.width, this.dimensions.height);\n        }\n        // if backgound is simple image change the editor's size\n        if (this.imageType !== 'svg') {\n            if (this.refs.backgroundImage) {\n                this.setEditorSize(this.dimensions.width * this.zoomInfo.totalMultiplier, this.dimensions.height * this.zoomInfo.totalMultiplier);\n            }\n        }\n        else {\n            this.zoomInfo[type].current.minX = coordinate.x - this.zoomInfo[type].current.width / 2;\n            this.zoomInfo[type].current.minY = coordinate.y - this.zoomInfo[type].current.height / 2;\n        }\n        this.normalizeSvgOffset(type);\n    };\n    Sketchpad.prototype.resetZoom = function () {\n        this.zoom({ x: 0, y: 0 }, (this.component.defaultZoom / 100) / this.zoomInfo.totalMultiplier);\n    };\n    Sketchpad.editForm = _Sketchpad_form__WEBPACK_IMPORTED_MODULE_3__.default;\n    return Sketchpad;\n}(FieldComponent));\n/* harmony default export */ __webpack_exports__[\"default\"] = (Sketchpad);\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/Sketchpad.js?")},"./lib/components/Sketchpad/Sketchpad.modes.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(Two) {\n    var _this = this;\n    return {\n        pencil: {\n            state: {\n                mode: 'pencil',\n            },\n            eventStart: function (coordinate) {\n                _this.points = [coordinate];\n                _this.prev = coordinate;\n                _this.curve = _this.two.makeCurve([\n                    new Two.Vector(_this.prev.x, _this.prev.y),\n                    new Two.Vector(coordinate.x, coordinate.y + 1),\n                ], true);\n                _this.curve.noFill().stroke = _this.state.stroke;\n                _this.curve.linewidth = _this.state.linewidth;\n                _this.curve.vertices.forEach(function (v) { return v.addSelf(_this.curve.translation); });\n                _this.curve.translation.clear();\n                _this.two.update();\n                _this.layers.push(_this.curve);\n            },\n            drag: function (coordinate) {\n                _this.points.push(coordinate);\n                _this.curve.vertices.push(new Two.Vector(coordinate.x, coordinate.y));\n                _this.two.update();\n                _this.prev = coordinate;\n            },\n            eventEnd: function () {\n                var value = _this.dataValue.slice();\n                value.push(Object.assign({}, _this.state, { points: _this.points }));\n                _this.dataValue = value;\n                _this.triggerChange();\n            },\n            draw: function (state) {\n                var layer = _this.two.makeCurve(state.points.map(function (point) { return new Two.Vector(point.x, point.y); }), true);\n                layer.noFill().stroke = state.stroke;\n                layer.linewidth = state.linewidth;\n                layer.vertices.forEach(function (v) { return v.addSelf(layer.translation); });\n                layer.translation.clear();\n                return layer;\n            },\n        },\n        line: {\n            state: {\n                mode: 'line',\n            },\n            eventStart: function (coordinate) {\n                _this.center = coordinate;\n                _this.line = _this.two.makeLine(coordinate.x, coordinate.y, coordinate.x, coordinate.y);\n                _this.line.fill = _this.state.fill;\n                _this.line.stroke = _this.state.stroke;\n                _this.line.linewidth = _this.state.linewidth;\n                _this.two.update();\n                _this.layers.push(_this.line);\n                var index = _this.layers.length - 1;\n            },\n            drag: function (coordinate) {\n                _this.line.vertices[1].x = coordinate.x;\n                _this.line.vertices[1].y = coordinate.y;\n                _this.two.update();\n            },\n            eventEnd: function () {\n                var value = _this.dataValue.slice();\n                var vertices = _this.line.vertices.map(function (vertice) {\n                    return {\n                        x: vertice.x,\n                        y: vertice.y,\n                    };\n                });\n                value.push(Object.assign({}, _this.state, { vertices: vertices }));\n                _this.dataValue = value;\n                _this.triggerChange();\n            },\n            draw: function (state) {\n                var layer = _this.two.makeLine(state.vertices[0].x, state.vertices[0].y, state.vertices[1].x, state.vertices[1].y);\n                layer.fill = state.fill;\n                layer.stroke = state.stroke;\n                layer.linewidth = state.linewidth;\n                return layer;\n            },\n        },\n        circle: {\n            state: {\n                mode: 'circle',\n            },\n            eventStart: function (coordinate) {\n                _this.center = coordinate;\n                var layer = _this.two.makeCircle(coordinate.x, coordinate.y, _this.state.circleSize);\n                layer.fill = _this.state.fill;\n                layer.stroke = _this.state.stroke;\n                layer.linewidth = _this.state.linewidth;\n                _this.two.update();\n                _this.layers.push(layer);\n            },\n            /* tslint:disable */\n            drag: function () { },\n            /* tslint:enable */\n            eventEnd: function () {\n                var value = _this.dataValue.slice();\n                value.push(Object.assign({}, _this.state, { center: _this.center }));\n                _this.dataValue = value;\n                _this.triggerChange();\n            },\n            draw: function (state) {\n                var layer = _this.two.makeCircle(state.center.x, state.center.y, state.circleSize);\n                layer.fill = state.fill;\n                layer.stroke = state.stroke;\n                layer.linewidth = state.linewidth;\n                return layer;\n            },\n        },\n        rectangle: {\n            cursor: {\n                hover: 'crosshair',\n            },\n            state: {\n                mode: 'rectangle',\n            },\n            eventStart: function (coordinate) {\n                _this.dragStartPoint = coordinate;\n            },\n            drag: function (coordinate) {\n                _this.dragEndPoint = coordinate;\n                if (_this.rectangle) {\n                    _this.rectangle.remove();\n                }\n                _this.width = Math.abs(_this.dragEndPoint.x - _this.dragStartPoint.x);\n                _this.height = Math.abs(_this.dragEndPoint.y - _this.dragStartPoint.y);\n                _this.center = {\n                    x: Math.min(_this.dragStartPoint.x, _this.dragEndPoint.x) + _this.width / 2,\n                    y: Math.min(_this.dragStartPoint.y, _this.dragEndPoint.y) + _this.height / 2,\n                };\n                _this.rectangle = _this.two.makeRectangle(_this.center.x, _this.center.y, _this.width, _this.height);\n                _this.rectangle.fill = _this.state.fill;\n                _this.rectangle.stroke = _this.state.stroke;\n                _this.rectangle.linewidth = _this.state.linewidth;\n                _this.two.update();\n                _this.layers.push(_this.rectangle);\n            },\n            eventEnd: function () {\n                var value = _this.dataValue.slice();\n                delete _this.rectangle;\n                var rectangleState = {\n                    center: _this.center,\n                    width: _this.width,\n                    height: _this.height,\n                };\n                value.push(Object.assign({}, _this.state, rectangleState));\n                _this.dataValue = value;\n                _this.triggerChange();\n            },\n            draw: function (state) {\n                var layer = _this.two.makeRectangle(state.center.x, state.center.y, state.width, state.height);\n                layer.fill = state.fill;\n                layer.stroke = state.stroke;\n                layer.linewidth = state.linewidth;\n                return layer;\n            },\n        },\n        zoomIn: {\n            cursor: {\n                hover: 'zoom-in',\n            },\n            state: {\n                mode: 'zoomIn',\n            },\n            eventStart: function (coordinate) { return _this.zoom(coordinate, _this.zoomInfo.multiplier); },\n        },\n        zoomOut: {\n            cursor: {\n                hover: 'zoom-out',\n            },\n            state: {\n                mode: 'zoomOut',\n            },\n            eventStart: function (coordinate) { return _this.zoom(coordinate, 1 / _this.zoomInfo.multiplier); },\n        },\n        dragImage: {\n            cursor: {\n                hover: 'grab',\n                clicked: 'grabbing',\n            },\n            state: {\n                mode: 'dragImage',\n            },\n            eventStart: function (coordinate) { return _this.dragStartPoint = coordinate; },\n            drag: function (coordinate) {\n                if (!_this.dragLastPoint) {\n                    _this.dragLastPoint = _this.dragStartPoint;\n                }\n                var offset = {\n                    x: Math.round(coordinate.x - _this.dragStartPoint.x),\n                    y: Math.round(coordinate.y - _this.dragStartPoint.y),\n                };\n                if (offset.x !== 0 || offset.y !== 0) {\n                    _this.dragImage(offset);\n                    _this.dragLastPoint = coordinate;\n                }\n            },\n        },\n    };\n}\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/Sketchpad.modes.js?")},"./lib/components/Sketchpad/Sketchpad.toolbar.buttons.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    modes: [\n        {\n            title: 'Pencil',\n            key: 'pencil',\n            icon: 'fa fa-pencil',\n        },\n        {\n            title: 'Line',\n            key: 'line',\n            icon: 'fa fa-minus',\n        },\n        {\n            title: 'Circle',\n            key: 'circle',\n            icon: 'fa fa-circle',\n            input: {\n                type: 'number',\n                class: 'formio-sketchpad-radius-input',\n                attributes: {\n                    min: 0,\n                },\n            },\n        },\n        {\n            title: 'Rectangle',\n            key: 'rectangle',\n            icon: 'fa fa-square-o',\n        },\n        {\n            title: 'Zoom In',\n            key: 'zoomIn',\n            icon: 'fa fa-search-plus',\n        },\n        {\n            title: 'Zoom Out',\n            key: 'zoomOut',\n            icon: 'fa fa-search-minus',\n        },\n        {\n            title: 'Drag Zoomed Image',\n            key: 'dragImage',\n            icon: 'fa fa-hand-paper-o',\n        },\n    ],\n    styles: [\n        {\n            title: 'Stroke Color',\n            key: 'stroke',\n            icon: 'fa fa-square-o',\n        },\n        {\n            title: 'Fill Color',\n            key: 'fill',\n            icon: 'fa fa-square',\n        },\n        {\n            title: 'Line Width',\n            key: 'width',\n            icon: 'fa fa-minus',\n            input: {\n                type: 'number',\n                class: 'formio-sketchpad-linewidth-input',\n                attributes: {\n                    min: 0,\n                    max: 250,\n                },\n            },\n        },\n    ],\n    actions: [\n        {\n            title: 'Undo',\n            key: 'undo',\n            icon: 'fa fa-undo',\n        },\n        {\n            title: 'Redo',\n            key: 'redo',\n            icon: 'fa fa-repeat',\n        },\n        {\n            title: 'Reset Zoom',\n            key: 'resetZoom',\n            icon: 'fa fa-search',\n        },\n        {\n            title: 'Clear All',\n            key: 'clearAll',\n            icon: 'fa fa-ban',\n        },\n    ],\n});\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/Sketchpad.toolbar.buttons.js?")},"./lib/components/Sketchpad/editForm/Sketchpad.edit.data.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        key: 'multiple',\n        ignore: true\n    }\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/editForm/Sketchpad.edit.data.js?")},"./lib/components/Sketchpad/editForm/Sketchpad.edit.display.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'textfield',\n        label: 'Image Url',\n        input: true,\n        key: 'imageUrl',\n        weight: 20,\n    },\n    {\n        type: 'select',\n        input: true,\n        key: 'imageType',\n        label: 'Image Type',\n        tooltip: 'Element used to display background image',\n        weight: 20,\n        defaultValue: 'image',\n        dataSrc: 'values',\n        data: {\n            values: [\n                { label: 'Image', value: 'image' },\n                { label: 'SVG', value: 'svg' },\n            ],\n        },\n    },\n    {\n        type: 'textfield',\n        label: 'Width',\n        input: true,\n        key: 'width',\n        customConditional: function (_a) {\n            var data = _a.data;\n            return !data.autoSize;\n        },\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Height',\n        input: true,\n        key: 'height',\n        customConditional: function (_a) {\n            var data = _a.data;\n            return !data.autoSize;\n        },\n        weight: 20,\n    },\n    {\n        type: 'checkbox',\n        label: 'Set Size Automatically',\n        input: true,\n        key: 'autoSize',\n        tooltip: 'Background image will fill the available width. Uncheck this if you want to specify width/height manually.',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Default Zoom',\n        input: true,\n        key: 'defaultZoom',\n        placeholder: '100',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Default Stroke Color',\n        description: 'Start with # sign',\n        input: true,\n        key: 'defaultStroke',\n        placeholder: '#333',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Default Fill Color',\n        description: 'Start with # sign',\n        input: true,\n        key: 'defaultFill',\n        placeholder: '#ccc',\n        weight: 20,\n    },\n    {\n        type: 'number',\n        label: 'Default Line Width',\n        input: true,\n        key: 'defaultLineWidth',\n        placeholder: '1',\n        weight: 20,\n    },\n    {\n        type: 'number',\n        label: 'Default Circle Size',\n        input: true,\n        key: 'defaultCircleSize',\n        placeholder: '10',\n        weight: 20,\n    },\n    {\n        key: 'placeholder',\n        ignore: true\n    }\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/editForm/Sketchpad.edit.display.js?")},"./lib/components/Sketchpad/editForm/Sketchpad.edit.validation.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        key: 'unique',\n        ignore: true,\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Sketchpad/editForm/Sketchpad.edit.validation.js?")},"./lib/components/Tagpad/Tagpad.form.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ "formiojs");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _editForm_Tagpad_edit_display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editForm/Tagpad.edit.display */ "./lib/components/Tagpad/editForm/Tagpad.edit.display.js");\n/* harmony import */ var _editForm_Tagpad_edit_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editForm/Tagpad.edit.data */ "./lib/components/Tagpad/editForm/Tagpad.edit.data.js");\n/* harmony import */ var _editForm_Tagpad_edit_templates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editForm/Tagpad.edit.templates */ "./lib/components/Tagpad/editForm/Tagpad.edit.templates.js");\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\nvar componentEditForm = formiojs__WEBPACK_IMPORTED_MODULE_0__.Components.components.component.editForm;\n\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n    var extend = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        extend[_i] = arguments[_i];\n    }\n    return componentEditForm.apply(void 0, __spreadArrays([[\n            {\n                key: \'display\',\n                components: _editForm_Tagpad_edit_display__WEBPACK_IMPORTED_MODULE_1__.default,\n            },\n            {\n                key: \'data\',\n                components: _editForm_Tagpad_edit_data__WEBPACK_IMPORTED_MODULE_2__.default,\n            },\n            {\n                key: \'templates\',\n                label: \'Templates\',\n                weight: 5,\n                components: _editForm_Tagpad_edit_templates__WEBPACK_IMPORTED_MODULE_3__.default,\n            },\n        ]], extend));\n}\n\n\n//# sourceURL=webpack://premium/./lib/components/Tagpad/Tagpad.form.js?')},"./lib/components/Tagpad/Tagpad.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! resize-observer-polyfill */ \"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var two_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! two.js */ \"./node_modules/two.js/build/two.module.js\");\n/* harmony import */ var _Tagpad_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Tagpad.form */ \"./lib/components/Tagpad/Tagpad.form.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (undefined && undefined.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n\n\n\n\nvar Component = formiojs__WEBPACK_IMPORTED_MODULE_1__.Components.components.component;\nvar NestedArrayComponent = formiojs__WEBPACK_IMPORTED_MODULE_1__.Components.components.nestedarray;\nvar TagpadComponent = /** @class */ (function (_super) {\n    __extends(TagpadComponent, _super);\n    function TagpadComponent() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _this = _super.apply(this, args) || this;\n        _this.type = 'tagpad';\n        _this.dots = [];\n        var backgroundReadyPromise = new formiojs__WEBPACK_IMPORTED_MODULE_1__.Formio.Promise(function (resolve, reject) {\n            _this.backgroundReady = { resolve: resolve, reject: reject };\n        });\n        _this.backgroundReady.promise = backgroundReadyPromise;\n        _this.dimensionsMultiplier = 1;\n        _this.sizeFromSubmission = false;\n        return _this;\n    }\n    TagpadComponent.schema = function () {\n        var extend = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            extend[_i] = arguments[_i];\n        }\n        return NestedArrayComponent.schema.apply(NestedArrayComponent, __spreadArrays([{\n                type: 'tagpad',\n                label: 'Tagpad',\n                key: 'tagpad',\n                input: true,\n                dotSize: 10,\n                dotStrokeSize: 2,\n                dotStrokeColor: '#333',\n                dotFillColor: '#ccc',\n                dotCustomLabel: '',\n                components: [],\n                tree: true,\n                template: TagpadComponent.defaultDotPreviewTemplate,\n            }], extend));\n    };\n    Object.defineProperty(TagpadComponent, \"builderInfo\", {\n        get: function () {\n            return {\n                title: 'Tagpad',\n                group: 'premium',\n                icon: 'tag',\n                weight: 115,\n                documentation: '',\n                schema: TagpadComponent.schema(),\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"defaultSchema\", {\n        get: function () {\n            return TagpadComponent.schema();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"emptyValue\", {\n        get: function () {\n            return [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"defaultValue\", {\n        get: function () {\n            return [];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"iterableRows\", {\n        get: function () {\n            return this.editForms;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"buttons\", {\n        get: function () {\n            var _this = this;\n            var buttons = {};\n            [{ name: 'removeDot', method: 'removeSelectedDot' }].forEach(function (button) {\n                if (_this.hasButton(button.name)) {\n                    buttons[button.name] = button;\n                }\n            });\n            return buttons;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"dataReady\", {\n        get: function () {\n            return this.backgroundReady.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"renderContext\", {\n        get: function () {\n            return {\n                selectedDot: this.selectedDot,\n                hasDots: this.dots && this.dots.length || this.dataValue.length,\n                buttons: this.buttons,\n                canvasMaxHeight: this.userDefiniedCanvasSize.height ? this.userDefiniedCanvasSize.height + 'px' : '50%',\n                canvasMaxWidth: this.userDefiniedCanvasSize.width ? this.userDefiniedCanvasSize.width + 'px' : '50%',\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent.prototype, \"userDefiniedCanvasSize\", {\n        get: function () {\n            var width = parseInt(this.component.canvasWidth, 10);\n            var height = parseInt(this.component.canvasHeight, 10);\n            return !isNaN(width) && !isNaN(height) ? { width: width, height: height } : { width: undefined, height: undefined };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TagpadComponent, \"defaultDotPreviewTemplate\", {\n        get: function () {\n            return \"<div class=\\\"dot-preview-label\\\"> Dot {{index + 1}}: </div>\\n    {% Object.keys(dot).forEach(function(key) { %}\\n      <div style=\\\"margin-left: 15px;\\\"><span class=\\\"dot-preview-field-label\\\">{{key}}</span>:\\n        <p class=\\\"dot-preview-value\\\">\\n          {{\\n            instance.getComponent([index, key]) && 'getValueAsString' in instance.getComponent([index, key])\\n              ? instance.getComponent([index, key]).getValueAsString(dot[key])\\n              : dot[key]\\n          }}\\n        </p>\\n    </div>\\n    {% }) %}\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TagpadComponent.prototype.init = function () {\n        var _this = this;\n        if (this.builderMode) {\n            this.editForms = [];\n            return _super.prototype.init.call(this);\n        }\n        this.components = this.components || [];\n        var dataValue = this.dataValue || this.emptyValue;\n        this.editForms = dataValue.map(function (dotValue, index) { return ({\n            isOpen: false,\n            data: dotValue.dot ? dotValue.dot.data : dotValue.data,\n            components: _this.createFormComponents(dotValue, index),\n        }); });\n    };\n    TagpadComponent.prototype.render = function (children) {\n        if (this.builderMode) {\n            return _super.prototype.render.call(this);\n        }\n        var ctx = this.renderContext;\n        return _super.prototype.render.call(this, children || this.renderTemplate('tagpad', __assign(__assign({}, ctx), { components: this.renderComponents(this.formComponents) })));\n    };\n    TagpadComponent.prototype.attach = function (element) {\n        var _this = this;\n        var backgroundReadyPromise = new formiojs__WEBPACK_IMPORTED_MODULE_1__.Formio.Promise(function (resolve, reject) {\n            _this.backgroundReady = { resolve: resolve, reject: reject };\n        });\n        this.backgroundReady.promise = backgroundReadyPromise;\n        if (this.builderMode) {\n            return _super.prototype.attach.call(this, element);\n        }\n        this.loadRefs(element, {\n            canvas: 'single',\n            background: 'single',\n            form: 'single',\n            canvasImage: 'single',\n            image: 'single',\n            removeDot: 'single',\n        });\n        if (this.formComponents) {\n            this.attachComponents(this.refs.form, this.formComponents);\n        }\n        if (this.refs.background && this.hasBackgroundImage) {\n            this.createDrawingArea();\n            this.backgroundReady.promise.then(function () {\n                _this.resizeObserver = new resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__.default(function () {\n                    if (_this.originalImageSize && (!_this.originalImageSize.width || !_this.originalImageSize.height)) {\n                        _this.setOriginalImageSize();\n                        var _a = _this.originalImageSize, width = _a.width, height = _a.height;\n                        _this.setDimensions(0, 0, width, height);\n                        _this.setViewBoxAttribute(_this.canvasSvg, _this.dimensions);\n                    }\n                    _this.stretchDrawingArea();\n                });\n                _this.resizeObserver.observe(_this.refs.background);\n            });\n            if (!this.disabled && !this.shouldDisabled && !this.readOnly) {\n                this.attachDrawEvents();\n            }\n            if (this.refs.image && !this.imageWasLoaded) {\n                this.refs.image.addEventListener('load', function (e) {\n                    _this.setOriginalImageSize();\n                    _this.imageWasLoaded = true;\n                    _this.addBackground();\n                });\n            }\n            else {\n                this.addBackground();\n            }\n        }\n        this.attachButtons();\n        if (this.dataValue.length > 0 && this.dots.length === 0) {\n            this.createDots();\n        }\n        else if (this.dots.length > 0) {\n            this.dots.forEach(function (dot) { return _this.drawDot(dot.dot, dot.index); });\n        }\n        return _super.prototype.attach.call(this, element);\n    };\n    TagpadComponent.prototype.beforeFocus = function (childComponent) {\n        if ('beforeFocus' in this.parent) {\n            this.parent.beforeFocus(this);\n        }\n        var relativePath = this.getRelativePath(childComponent.path);\n        var arrayPath = formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils.getArrayFromComponentPath(relativePath);\n        if (formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.isNumber(arrayPath[0])) {\n            this.selectDot(arrayPath[0]);\n        }\n    };\n    TagpadComponent.prototype.getRelativePath = function (path) {\n        var keyPart = \".\" + this.key;\n        var thisPath = this.isInputComponent ? this.path\n            : this.path.slice(0).replace(keyPart, '');\n        return path.replace(thisPath, '');\n    };\n    TagpadComponent.prototype.setOriginalImageSize = function () {\n        this.loadRefs(this.element, { background: 'single', canvasContainer: 'single' });\n        var computedStyle = window.getComputedStyle(this.refs.background);\n        var width = parseInt(computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.width, 10);\n        var height = parseInt(computedStyle === null || computedStyle === void 0 ? void 0 : computedStyle.height, 10);\n        width = isNaN(width) ? 0 : width;\n        height = isNaN(height) ? 0 : height;\n        this.originalImageSize = { width: width, height: height };\n    };\n    TagpadComponent.prototype.attachDrawEvents = function () {\n        var _this = this;\n        if (this.options.readOnly || !this.canvasSvg) {\n            return;\n        }\n        // Set up mouse event.\n        var mouseEnd = function (e) {\n            e.preventDefault();\n            var offset = _this.canvasSvg.getBoundingClientRect();\n            var coordinate = _this.getActualCoordinate({\n                x: e.clientX - offset.left,\n                y: e.clientY - offset.top,\n            });\n            _this.addDot({ coordinate: coordinate, data: {} });\n            _this.selectDot(_this.dots.length - 1);\n        };\n        this.canvasSvg.addEventListener('mouseup', mouseEnd);\n        // Set up touch event.\n        var touchEnd = function (e) {\n            e.preventDefault();\n            var offset = _this.canvasSvg.getBoundingClientRect();\n            var touch = e.changedTouches[0];\n            var coordinate = _this.getActualCoordinate({\n                x: touch.pageX - offset.left,\n                y: touch.pageY - offset.top,\n            });\n            _this.addDot({ coordinate: coordinate, data: {} });\n            _this.selectDot(_this.dots.length - 1);\n        };\n        this.canvasSvg.addEventListener('touchend', touchEnd);\n        this.on('destroy', function () {\n            _this.canvasSvg.removeEventListener('touchend', touchEnd);\n            _this.canvasSvg.removeEventListener('mouseup', mouseEnd);\n        });\n        this.two.update();\n    };\n    TagpadComponent.prototype.attachButtons = function () {\n        var _this = this;\n        formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.each(this.buttons, function (button) {\n            var buttonElement = _this.refs[\"\" + button.name];\n            if (buttonElement) {\n                _this.addEventListener(buttonElement, 'click', function (event) {\n                    event.preventDefault();\n                    buttonElement.setAttribute('disabled', 'disabled');\n                    _this.setLoading(buttonElement, true);\n                    if (typeof _this[button.method] === 'function') {\n                        _this[button.method]();\n                    }\n                    buttonElement.removeAttribute('disabled');\n                    _this.setLoading(buttonElement, false);\n                });\n            }\n        });\n    };\n    TagpadComponent.prototype.redraw = function () {\n        _super.prototype.redraw.call(this);\n        var shapes = [];\n        this.dots.forEach(function (dot) { return shapes.push(dot.shape.circle, dot.shape.text); });\n        if (this.two) {\n            this.two.add(shapes);\n        }\n    };\n    TagpadComponent.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.emit('destroy');\n        this.off('destroy');\n    };\n    TagpadComponent.prototype.destroyDot = function (index) {\n        if (!this.dots[index]) {\n            return;\n        }\n        var dot = this.dots[index];\n        dot.shape.circle._renderer.elem.removeEventListener('mouseup', this.dotClicked);\n        dot.shape.text._renderer.elem.removeEventListener('mouseup', this.dotClicked);\n    };\n    TagpadComponent.prototype.destroyComponents = function () {\n        if (this.builderMode || !this.formComponents) {\n            return _super.prototype.destroyComponents.call(this);\n        }\n        var components = this.formComponents.slice();\n        components.forEach(function (comp) { return comp.destroy(); });\n    };\n    TagpadComponent.prototype.addBackground = function () {\n        if (this.refs.image && this.refs.image.complete && !this.imageWasLoaded) {\n            this.imageWasLoaded = true;\n            return;\n        }\n        else if (this.refs.image && this.refs.image.complete && this.imageWasLoaded) {\n            this.setBackgroundImage();\n        }\n    };\n    TagpadComponent.prototype.setBackgroundImage = function (image) {\n        if (!this.sizeFromSubmission) {\n            var _a = this.originalImageSize, width = _a.width, height = _a.height;\n            this.setDimensions(0, 0, width, height);\n            this.setViewBoxAttribute(this.canvasSvg, this.dimensions);\n        }\n        else {\n            this.setViewBoxAttribute(this.canvasSvg, this.dimensions);\n        }\n        this.loadRefs(this.refs.background, {\n            backgroundImage: 'single',\n        });\n        this.stretchDrawingArea();\n        this.backgroundReady.resolve();\n    };\n    TagpadComponent.prototype.mapDimensionsFromAttributes = function (svg) {\n        return [\n            { attribute: 'x', defaultValue: 0 },\n            { attribute: 'y', defaultValue: 0 },\n            { attribute: 'width', defaultValue: 640 },\n            { attribute: 'height', defaultValue: 480 },\n        ].map(function (dimension) {\n            return parseFloat(svg.getAttribute(dimension.attribute)) || dimension.defaultValue;\n        });\n    };\n    TagpadComponent.prototype.setDimensions = function (viewBoxMinX, viewBoxMinY, viewBoxWidth, viewBoxHeight) {\n        this.dimensions = {\n            width: viewBoxWidth,\n            height: viewBoxHeight,\n            minX: viewBoxMinX,\n            minY: viewBoxMinY,\n        };\n    };\n    TagpadComponent.prototype.setViewBoxAttribute = function (element, viewBox) {\n        element.setAttribute('viewBox', viewBox.minX + \" \" + viewBox.minY + \" \" + viewBox.width + \" \" + viewBox.height);\n    };\n    TagpadComponent.prototype.hasButton = function (buttonName) {\n        switch (buttonName) {\n            case 'removeDot':\n                return !this.options.readOnly;\n            default:\n                return false;\n        }\n    };\n    Object.defineProperty(TagpadComponent.prototype, \"iteratableRows\", {\n        get: function () {\n            return this.editForms;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TagpadComponent.prototype.componentContext = function (component) {\n        return this.iteratableRows[component.row] ? this.iteratableRows[component.row].data : {};\n    };\n    TagpadComponent.prototype.createFormComponents = function (dotValue, index) {\n        var _this = this;\n        var formComponents = [];\n        this.component.components.forEach(function (component) {\n            var options = formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.clone(_this.options);\n            options.row = \"\" + index;\n            options.name += \"[\" + index + \"]\";\n            var dotData = dotValue.dot ? dotValue.dot.data : dotValue.data;\n            var componentInstance = _this.createComponent(component, options, dotData);\n            formComponents.push(componentInstance);\n        });\n        return formComponents;\n    };\n    TagpadComponent.prototype.redrawDots = function () {\n        this.dots = [];\n        this.two.clear();\n        this.two.render();\n        this.createDots();\n    };\n    TagpadComponent.prototype.createDots = function () {\n        var _this = this;\n        var dotsValues = this.dataValue;\n        if (!dotsValues || !dotsValues.length || !this.two) {\n            return;\n        }\n        dotsValues.forEach(function (dot, index) {\n            if (!_this.dots[index]) {\n                _this.addDot(dot);\n            }\n        });\n        this.dots.splice(dotsValues.length);\n        this.editForms.splice(dotsValues.length);\n    };\n    TagpadComponent.prototype.getComponent = function (path, fn) {\n        path = Array.isArray(path) ? path : [path];\n        var comp = null;\n        var editFormIndex = path[0], key = path[1], remainingPath = path.slice(2);\n        if (!formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.isNumber(editFormIndex) || !key) {\n            return comp;\n        }\n        comp = this.editForms[editFormIndex].components.find(function (comp) { return comp.key === key; });\n        if (comp) {\n            if (formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.isFunction(fn)) {\n                fn(comp, this.getComponents);\n            }\n            if (remainingPath.length && 'getComponent' in comp) {\n                return comp.getComponent(remainingPath, fn);\n            }\n        }\n        return comp;\n    };\n    TagpadComponent.prototype.rescaleImage = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (!options.fromSubmission || !this.dataValue.length) {\n            return;\n        }\n        if (formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.get(this.dataValue, '[0].coordinate.width', false)) {\n            this.setDimensions(0, 0, this.dataValue[0].coordinate.width, this.dataValue[0].coordinate.height);\n            this.sizeFromSubmission = true;\n            return;\n        }\n        // Resaving the submission will apply changes.\n        if (this.hasBackgroundImage) {\n            this.backgroundReady.promise.then(function () {\n                _this.dataValue = _this.dataValue.map(function (dot) {\n                    dot.coordinate.width = _this.dimensions.width;\n                    dot.coordinate.height = _this.dimensions.height;\n                    return dot;\n                });\n            });\n        }\n    };\n    TagpadComponent.prototype.setValue = function (value, options) {\n        this.dataValue = value;\n        this.rescaleImage(options);\n        this.createDots();\n        this.rebuild();\n    };\n    TagpadComponent.prototype.getActualCoordinate = function (coordinate) {\n        // recalculate coordinate taking into account changed size of drawing area\n        coordinate.x = Math.round(coordinate.x / this.dimensionsMultiplier) + this.dimensions.minX;\n        coordinate.y = Math.round(coordinate.y / this.dimensionsMultiplier) + this.dimensions.minY;\n        coordinate.width = this.dimensions.width;\n        coordinate.height = this.dimensions.height;\n        return coordinate;\n    };\n    TagpadComponent.prototype.selectDot = function (index) {\n        if (this.selectedDot && this.dots[this.selectedDot.index]) {\n            this.dots[this.selectedDot.index].shape.circle.dashes = [0];\n        }\n        if (!formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils._.isNumber(index) || !this.dots[index]) {\n            this.selectedDot = null;\n            this.redraw();\n            return;\n        }\n        var dot = this.dots[index];\n        this.selectedDot = dot;\n        this.dots[this.selectedDot.index].shape.circle.dashes = [1];\n        this.formComponents = this.editForms[index].components;\n        this.redraw();\n        this.triggerChange();\n    };\n    TagpadComponent.prototype.dotClicked = function (e, index) {\n        // prevent drawing another dot near clicked dot\n        e.stopPropagation();\n        this.selectDot(index);\n    };\n    TagpadComponent.prototype.addDot = function (dot) {\n        var newDotIndex = this.dots.length;\n        var shape = this.drawDot(dot, newDotIndex);\n        this.dots.push({\n            index: newDotIndex,\n            dot: dot,\n            shape: shape,\n        });\n        if (!this.dataValue[newDotIndex]) {\n            this.dataValue.push(dot);\n        }\n        this.editForms.push({\n            components: this.createFormComponents(this.dots[newDotIndex], newDotIndex),\n            data: dot,\n        });\n    };\n    TagpadComponent.prototype.drawDot = function (dot, index) {\n        var _this = this;\n        var _a = dot.coordinate, x = _a.x, y = _a.y;\n        var circle = this.drawDotCircle(x, y, this.component.dotSize, index);\n        var text = this.drawDotLabel(x, y, this.component.dotCustomLabel || index + 1);\n        this.two.add(circle, text);\n        this.two.update();\n        circle._renderer.elem.addEventListener('mouseup', function (e) { return _this.dotClicked(e, index); });\n        text._renderer.elem.addEventListener('mouseup', function (e) { return _this.dotClicked(e, index); });\n        return { circle: circle, text: text };\n    };\n    TagpadComponent.prototype.drawDotCircle = function (x, y, size, index) {\n        var circle = this.two.makeCircle(x, y, size);\n        circle.fill = this.component.dotFillColor;\n        circle.stroke = this.component.dotStrokeColor;\n        circle.linewidth = this.component.dotStrokeSize;\n        circle.className += ' formio-tagpad-dot';\n        if (this.selectedDot && this.selectedDot.index === index) {\n            circle.dashes = [1];\n        }\n        return circle;\n    };\n    TagpadComponent.prototype.drawDotLabel = function (x, y, label) {\n        var text = new two_js__WEBPACK_IMPORTED_MODULE_2__.default.Text(label, x, y);\n        text.className += ' formio-tagpad-dot-index';\n        text.styles = { color: this.component.dotStrokeColor };\n        return text;\n    };\n    TagpadComponent.prototype.createDrawingArea = function () {\n        this.two = new two_js__WEBPACK_IMPORTED_MODULE_2__.default({\n            type: two_js__WEBPACK_IMPORTED_MODULE_2__.default.Types.svg,\n            width: '100%',\n            height: '100%',\n        }).appendTo(this.refs.canvas);\n        this.canvasSvg = this.two.renderer.domElement;\n        this.canvasSvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    };\n    TagpadComponent.prototype.stretchDrawingArea = function () {\n        var _a, _b;\n        this.loadRefs(this.element, { background: 'single' });\n        var width = (_a = this.refs.background) === null || _a === void 0 ? void 0 : _a.offsetWidth;\n        var height = (_b = this.refs.background) === null || _b === void 0 ? void 0 : _b.offsetHeight;\n        // don't stretch if background dimensions are unknown yet\n        if (width && height) {\n            // will need dimensions multiplier for coordinates calculation\n            var dimensionsMultiplier = width / this.dimensions.width;\n            // Update the editor's size only if the dimensionsMultiplier is changed\n            if (this.dimensionsMultiplier !== dimensionsMultiplier) {\n                this.dimensionsMultiplier = width / this.dimensions.width;\n                this.setEditorSize(width, height);\n            }\n        }\n    };\n    TagpadComponent.prototype.setEditorSize = function (width, height) {\n        this.two.width = width;\n        this.two.height = height;\n        this.two.update();\n        if (this.refs.image) {\n            this.refs.image.setAttribute('width', width);\n            this.refs.image.setAttribute('height', height);\n        }\n    };\n    Object.defineProperty(TagpadComponent.prototype, \"hasBackgroundImage\", {\n        get: function () {\n            return this.component.image || this.component.imageUrl;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TagpadComponent.prototype.removeSelectedDot = function () {\n        if (!this.selectedDot || !this.dataValue[this.selectedDot.index]) {\n            return;\n        }\n        this.destroyDot(this.selectedDot.index);\n        this.destroyComponents();\n        this.dataValue.splice(this.selectedDot.index, 1);\n        this.dots = [];\n        this.editForms = [];\n        this.components = [];\n        this.createDots();\n        this.selectDot(0);\n    };\n    TagpadComponent.prototype.focus = function () {\n        return this.refs.canvas && this.refs.canvas.focus();\n    };\n    TagpadComponent.prototype.checkData = function (data, flags, row) {\n        var _this = this;\n        data = data || this.rootValue;\n        flags = flags || {};\n        row = row || this.data;\n        Component.prototype.checkData.call(this, data, flags, row);\n        return this.editForms.reduce(function (valid, editForm, index) { return _this.checkDot(data, flags, editForm.data, index) && valid; }, true);\n    };\n    TagpadComponent.prototype.checkValidity = function (data, dirty, row) {\n        data = data || this.rootValue;\n        row = row || this.data;\n        if (!this.checkCondition(row, data)) {\n            this.setCustomValidity('');\n            return true;\n        }\n        return this.checkComponentValidity(data, dirty, row);\n    };\n    TagpadComponent.prototype.checkComponentValidity = function (data, dirty, row) {\n        var _this = this;\n        if (!_super.prototype.checkComponentValidity.call(this, data, dirty, row)) {\n            return false;\n        }\n        var dotsValid = true;\n        this.editForms.forEach(function (editForm, index) {\n            var dotFormValid = _this.checkDotValidity(editForm, dirty, _this.dots[index]);\n            dotsValid = dotsValid && dotFormValid;\n        });\n        if (!dotsValid) {\n            return false;\n        }\n        var message = this.invalid || this.invalidMessage(data, dirty);\n        this.setCustomValidity(message, dirty);\n        return true;\n    };\n    TagpadComponent.prototype.checkDot = function (data, flags, row, dotIndex) {\n        var isValid = _super.prototype.checkData.call(this, data, flags, row, this.editForms[dotIndex].components);\n        this.setDotValidity(this.dots[dotIndex], isValid);\n        return isValid;\n    };\n    TagpadComponent.prototype.checkDotValidity = function (editForm, dirty, dot) {\n        var isValid = true;\n        if (!editForm) {\n            return true;\n        }\n        var isDirty = dirty || editForm.dirty;\n        editForm.components.forEach(function (comp) {\n            isDirty = isDirty || !comp.pristine;\n            if (isDirty) {\n                comp.setPristine(!isDirty);\n                editForm.dirty = !!isDirty;\n                isValid = isValid && comp.checkValidity(null, isDirty, editForm.data);\n            }\n        });\n        this.setDotValidity(dot, isValid);\n        return !!isValid;\n    };\n    TagpadComponent.prototype.addDotNumberToErrorMessages = function (dot) {\n        this.editForms[dot.index].components.forEach(function (comp) {\n            comp.errors.forEach(function (err) {\n                var dotInfo = \" (see dot \" + (dot.index + 1) + \")\";\n                if (!err.message.includes(dotInfo)) {\n                    err.message += dotInfo;\n                    err.messages.forEach(function (m) { return m.message += dotInfo; });\n                }\n            });\n        });\n    };\n    TagpadComponent.prototype.setDotValidity = function (dot, isValid) {\n        if (dot) {\n            var color = isValid ? this.component.dotStrokeColor : '#ff0000';\n            // change style of dot based on its validity\n            dot.shape.circle.stroke = color;\n            dot.shape.text.styles.color = color;\n            this.two.update();\n            this.addDotNumberToErrorMessages(dot);\n        }\n    };\n    TagpadComponent.prototype.getDataAsString = function () {\n        var _this = this;\n        var stringData = '';\n        {\n            var template_1 = this.component.template || TagpadComponent.defaultDotPreviewTemplate;\n            this.iterableRows.forEach(function (_a, index) {\n                var data = _a.data, components = _a.components;\n                var dotValue = _this.interpolate(template_1, { dot: data, index: index, components: components, instance: _this });\n                stringData += dotValue;\n            });\n            return stringData;\n        }\n    };\n    TagpadComponent.prototype.getValueAsString = function (value, options) {\n        var _this = this;\n        if (!value || !value.length) {\n            return '';\n        }\n        if (options && options.email) {\n            var componentsHeaders_1 = '';\n            formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils.eachComponent(this.components, function (component) {\n                componentsHeaders_1 += \"<th>\" + component.label + \"</th>\";\n            });\n            var result_1 = (\"\\n        <table border=\\\"1\\\" style=\\\"width:100%\\\">\\n          <thead>\\n            <tr><th>Dots</th>\" + componentsHeaders_1 + \"</tr>\\n          </thead>\\n          <tbody>\\n      \");\n            value.map(function (dot, index) {\n                var components = _this.editForms[index].components;\n                var componentsValues = '';\n                formiojs__WEBPACK_IMPORTED_MODULE_1__.Utils.eachComponent(components, function (component) {\n                    componentsValues += '<td style=\"text-align: center\">';\n                    if (component.isInputComponent && component.visible && !component.skipInEmail) {\n                        componentsValues += component.getView(component.dataValue, options);\n                    }\n                    componentsValues += '</td>';\n                });\n                result_1 += (\"\\n          <tr>\\n            <td style=\\\"text-align: center\\\">\" + (index + 1) + \"</td>\\n            \" + componentsValues + \"\\n          </tr>\\n        \");\n            });\n            result_1 += '</tbody></table>';\n            return result_1;\n        }\n        return _super.prototype.getValueAsString.call(this, value, options);\n    };\n    TagpadComponent.editForm = _Tagpad_form__WEBPACK_IMPORTED_MODULE_3__.default;\n    return TagpadComponent;\n}(NestedArrayComponent));\n/* harmony default export */ __webpack_exports__[\"default\"] = (TagpadComponent);\n\n\n//# sourceURL=webpack://premium/./lib/components/Tagpad/Tagpad.js?")},"./lib/components/Tagpad/editForm/Tagpad.edit.data.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        key: 'multiple',\n        ignore: true\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Tagpad/editForm/Tagpad.edit.data.js?")},"./lib/components/Tagpad/editForm/Tagpad.edit.display.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'textfield',\n        label: 'Image Url',\n        input: true,\n        key: 'imageUrl',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Width',\n        input: true,\n        key: 'canvasWidth',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Height',\n        input: true,\n        key: 'canvasHeight',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Dot Size',\n        input: true,\n        key: 'dotSize',\n        placeholder: '10',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Dot Stroke Size',\n        input: true,\n        key: 'dotStrokeSize',\n        placeholder: '2',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Dot Stroke Color',\n        input: true,\n        key: 'dotStrokeColor',\n        placeholder: '#333',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Dot Fill Color',\n        input: true,\n        key: 'dotFillColor',\n        placeholder: '#ccc',\n        weight: 20,\n    },\n    {\n        type: 'textfield',\n        label: 'Dot Custom Label',\n        input: true,\n        key: 'dotCustomLabel',\n        placeholder: 'x',\n        tooltip: 'Custom static label for dot.',\n        weight: 20,\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Tagpad/editForm/Tagpad.edit.display.js?")},"./lib/components/Tagpad/editForm/Tagpad.edit.templates.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ([\n    {\n        type: 'textarea',\n        input: true,\n        key: 'template',\n        label: 'Dot Value Template',\n        editor: 'ace',\n        as: 'html',\n        rows: 10,\n        weight: 18,\n        tooltip: 'The HTML template for displaying dots\\' values in preview mode (View Tab, generated PDF)',\n        description: 'Four available variables. \"dot\" is the data of the dot, \"index\" is the index of the dot (indexes start from \\'0\\'), \"components\" is an array of components of the form associated with the dot and \"instance\" is an instance of the Tagpad.',\n    },\n]);\n\n\n//# sourceURL=webpack://premium/./lib/components/Tagpad/editForm/Tagpad.edit.templates.js?")},"./lib/components/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DataSource_DataSource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataSource/DataSource */ "./lib/components/DataSource/DataSource.js");\n/* harmony import */ var _Sketchpad_Sketchpad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sketchpad/Sketchpad */ "./lib/components/Sketchpad/Sketchpad.js");\n/* harmony import */ var _Tagpad_Tagpad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Tagpad/Tagpad */ "./lib/components/Tagpad/Tagpad.js");\n/* harmony import */ var _DynamicWizard_DynamicWizard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DynamicWizard/DynamicWizard */ "./lib/components/DynamicWizard/DynamicWizard.js");\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    datasource: _DataSource_DataSource__WEBPACK_IMPORTED_MODULE_0__.default,\n    sketchpad: _Sketchpad_Sketchpad__WEBPACK_IMPORTED_MODULE_1__.default,\n    tagpad: _Tagpad_Tagpad__WEBPACK_IMPORTED_MODULE_2__.default,\n    dynamicWizard: _DynamicWizard_DynamicWizard__WEBPACK_IMPORTED_MODULE_3__.default\n});\n\n\n//# sourceURL=webpack://premium/./lib/components/index.js?')},"./lib/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ "./lib/components/index.js");\n/* harmony import */ var _providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./providers */ "./lib/providers/index.js");\n/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./templates */ "./lib/templates/index.js");\n/* harmony import */ var _Wizard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Wizard */ "./lib/Wizard.js");\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    components: _components__WEBPACK_IMPORTED_MODULE_0__.default,\n    providers: _providers__WEBPACK_IMPORTED_MODULE_1__.default,\n    templates: _templates__WEBPACK_IMPORTED_MODULE_2__.default,\n    displays: {\n        wizard: _Wizard__WEBPACK_IMPORTED_MODULE_3__.default\n    },\n});\n\n\n//# sourceURL=webpack://premium/./lib/index.js?')},"./lib/providers/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ "./lib/providers/storage/index.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    storage: _storage__WEBPACK_IMPORTED_MODULE_0__.default,\n});\n\n\n//# sourceURL=webpack://premium/./lib/providers/index.js?')},"./lib/providers/storage/azure.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _xhr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xhr */ \"./lib/providers/storage/xhr.js\");\n\nvar Azure = /** @class */ (function () {\n    function Azure(formio) {\n        this.formio = formio;\n    }\n    Azure.prototype.uploadFile = function (file, fileName, dir, progressCallback, url, options, fileKey, groupPermissions, groupId) {\n        return _xhr__WEBPACK_IMPORTED_MODULE_0__.default.upload(this.formio, 'azure', function (xhr, response) {\n            xhr.open('PUT', response.url);\n            xhr.setRequestHeader('Content-Type', file.type);\n            xhr.setRequestHeader('x-ms-blob-type', 'BlockBlob');\n            return file;\n        }, file, fileName, dir, progressCallback, groupPermissions, groupId).then(function () {\n            return {\n                storage: 'azure',\n                name: _xhr__WEBPACK_IMPORTED_MODULE_0__.default.path([dir, fileName]),\n                size: file.size,\n                type: file.type,\n                groupPermissions: groupPermissions,\n                groupId: groupId\n            };\n        });\n    };\n    Azure.prototype.downloadFile = function (file) {\n        return this.formio.makeRequest('file', this.formio.formUrl + \"/storage/azure?name=\" + _xhr__WEBPACK_IMPORTED_MODULE_0__.default.trim(file.name), 'GET');\n    };\n    Azure.title = 'Azure File Services';\n    return Azure;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (Azure);\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/azure.js?")},"./lib/providers/storage/dropbox.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n\nvar Dropbox = /** @class */ (function () {\n    function Dropbox(formio) {\n        this.formio = formio;\n    }\n    Dropbox.prototype.uploadFile = function (file, fileName, dir, progressCallback, url, options, fileKey, groupPermissions, groupId) {\n        var _this = this;\n        return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise((function (resolve, reject) {\n            // Send the file with data.\n            var xhr = new XMLHttpRequest();\n            if (typeof progressCallback === 'function') {\n                xhr.upload.onprogress = progressCallback;\n            }\n            var fd = new FormData();\n            fd.append('name', fileName);\n            fd.append('dir', dir);\n            fd.append('file', file);\n            // Fire on network error.\n            xhr.onerror = function (err) {\n                err.networkError = true;\n                reject(err);\n            };\n            xhr.onload = function () {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    var response = JSON.parse(xhr.response);\n                    response.storage = 'dropbox';\n                    response.size = file.size;\n                    response.type = file.type;\n                    response.groupId = groupId;\n                    response.groupPermissions = groupPermissions;\n                    response.url = response.path_lower;\n                    resolve(response);\n                }\n                else {\n                    reject(xhr.response || 'Unable to upload file');\n                }\n            };\n            xhr.onabort = reject;\n            xhr.open('POST', _this.formio.formUrl + \"/storage/dropbox\");\n            var token = _this.formio.getToken();\n            if (token) {\n                xhr.setRequestHeader('x-jwt-token', token);\n            }\n            xhr.send(fd);\n        }));\n    };\n    Dropbox.prototype.downloadFile = function (file) {\n        var token = this.formio.getToken();\n        file.url =\n            this.formio.formUrl + \"/storage/dropbox?path_lower=\" + file.path_lower + (token ? \"&x-jwt-token=\" + token : '');\n        return formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise.resolve(file);\n    };\n    Dropbox.title = 'Dropbox';\n    return Dropbox;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dropbox);\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/dropbox.js?")},"./lib/providers/storage/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _azure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./azure */ "./lib/providers/storage/azure.js");\n/* harmony import */ var _dropbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropbox */ "./lib/providers/storage/dropbox.js");\n/* harmony import */ var _indexeddb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./indexeddb */ "./lib/providers/storage/indexeddb.js");\n/* harmony import */ var _s3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./s3 */ "./lib/providers/storage/s3.js");\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    azure: _azure__WEBPACK_IMPORTED_MODULE_0__.default,\n    dropbox: _dropbox__WEBPACK_IMPORTED_MODULE_1__.default,\n    indexeddb: _indexeddb__WEBPACK_IMPORTED_MODULE_2__.default,\n    s3: _s3__WEBPACK_IMPORTED_MODULE_3__.default,\n});\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/index.js?')},"./lib/providers/storage/indexeddb.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/v4.js\");\n\n\nvar IndexedDB = /** @class */ (function () {\n    function IndexedDB(formio) {\n        this.formio = formio;\n    }\n    IndexedDB.prototype.uploadFile = function (file, fileName, dir, progressCallback, url, options) {\n        var _this = this;\n        if (!('indexedDB' in window)) {\n            /* tslint:disable */\n            console.log('This browser doesn\\'t support IndexedDB');\n            /* tslint:enable */\n            return;\n        }\n        return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve) {\n            var request = indexedDB.open(options.indexeddb, 3);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(db);\n            };\n            request.onupgradeneeded = function (e) {\n                var db = e.target.result;\n                db.createObjectStore(options.indexeddbTable);\n            };\n        }).then(function (db) {\n            var reader = new FileReader();\n            return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve, reject) {\n                reader.onload = function () {\n                    var blobObject = new Blob([file], { type: file.type });\n                    var id = (0,uuid__WEBPACK_IMPORTED_MODULE_1__.default)(blobObject);\n                    var data = {\n                        id: id,\n                        data: blobObject,\n                        name: file.name,\n                        size: file.size,\n                        type: file.type,\n                        url: url,\n                    };\n                    var trans = db.transaction([options.indexeddbTable], 'readwrite');\n                    var addReq = trans.objectStore(options.indexeddbTable).put(data, id);\n                    addReq.onerror = function (e) {\n                        /* tslint:disable */\n                        console.log('error storing data');\n                        console.error(e);\n                        /* tslint:enable */\n                    };\n                    trans.oncomplete = function () {\n                        resolve({\n                            storage: 'indexeddb',\n                            name: file.name,\n                            size: file.size,\n                            type: file.type,\n                            url: url,\n                            id: id,\n                        });\n                    };\n                };\n                reader.onerror = function () {\n                    return reject(_this);\n                };\n                reader.readAsDataURL(file);\n            });\n        });\n    };\n    IndexedDB.prototype.downloadFile = function (file, options) {\n        var _this = this;\n        return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve) {\n            var request = indexedDB.open(options.indexeddb, 3);\n            request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(db);\n            };\n        }).then(function (db) {\n            return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise(function (resolve, reject) {\n                var trans = db.transaction([options.indexeddbTable], 'readonly');\n                var store = trans.objectStore(options.indexeddbTable).get(file.id);\n                store.onsuccess = function () {\n                    trans.oncomplete = function () {\n                        var result = store.result;\n                        var dbFile = new File([store.result.data], file.name, {\n                            type: store.result.type,\n                        });\n                        var reader = new FileReader();\n                        reader.onload = function (event) {\n                            result.url = event.target.result;\n                            resolve(result);\n                        };\n                        reader.onerror = function () {\n                            return reject(_this);\n                        };\n                        reader.readAsDataURL(dbFile);\n                    };\n                };\n                store.onerror = function () {\n                    return reject(_this);\n                };\n            });\n        });\n    };\n    IndexedDB.title = 'IndexedDB';\n    return IndexedDB;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (IndexedDB);\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/indexeddb.js?")},"./lib/providers/storage/s3.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _xhr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xhr */ \"./lib/providers/storage/xhr.js\");\n\n\nvar S3 = /** @class */ (function () {\n    function S3(formio) {\n        this.formio = formio;\n    }\n    S3.prototype.uploadFile = function (file, fileName, dir, progressCallback, url, options, fileKey, groupPermissions, groupId) {\n        return _xhr__WEBPACK_IMPORTED_MODULE_1__.default.upload(this.formio, 's3', function (xhr, response) {\n            response.data.fileName = fileName;\n            response.data.key = _xhr__WEBPACK_IMPORTED_MODULE_1__.default.path([response.data.key, dir, fileName]);\n            if (response.signed) {\n                xhr.open('PUT', response.signed);\n                xhr.setRequestHeader('Content-Type', file.type);\n                return file;\n            }\n            else {\n                var fd = new FormData();\n                for (var _i = 0, _a = Object.keys(response.data); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    fd.append(key, response.data[key]);\n                }\n                fd.append('file', file);\n                xhr.open('POST', response.url);\n                return fd;\n            }\n        }, file, fileName, dir, progressCallback, groupPermissions, groupId).then(function (response) {\n            return {\n                storage: 's3',\n                name: fileName,\n                bucket: response.bucket,\n                key: response.data.key,\n                url: _xhr__WEBPACK_IMPORTED_MODULE_1__.default.path([response.url, response.data.key]),\n                acl: response.data.acl,\n                size: file.size,\n                type: file.type,\n            };\n        });\n    };\n    S3.prototype.downloadFile = function (file) {\n        if (file.acl !== 'public-read') {\n            return this.formio.makeRequest('file', this.formio.formUrl + \"/storage/s3?bucket=\" + _xhr__WEBPACK_IMPORTED_MODULE_1__.default.trim(file.bucket) + \"&key=\" + _xhr__WEBPACK_IMPORTED_MODULE_1__.default.trim(file.key), 'GET');\n        }\n        else {\n            return formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise.resolve(file);\n        }\n    };\n    S3.title = 'AWS S3';\n    return S3;\n}());\n/* harmony default export */ __webpack_exports__[\"default\"] = (S3);\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/s3.js?")},"./lib/providers/storage/xhr.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formiojs */ \"formiojs\");\n/* harmony import */ var formiojs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(formiojs__WEBPACK_IMPORTED_MODULE_0__);\n\nvar XHR = {\n    trim: function (text) {\n        return formiojs__WEBPACK_IMPORTED_MODULE_0__.Utils._.trim(text, '/');\n    },\n    path: function (items) {\n        return items.filter(function (item) { return !!item; }).map(this.trim).join('/');\n    },\n    upload: function (formio, type, xhrCb, file, fileName, dir, progressCallback, groupPermissions, groupId) {\n        return new formiojs__WEBPACK_IMPORTED_MODULE_0__.Formio.Promise((function (resolve, reject) {\n            // Send the pre response to sign the upload.\n            var pre = new XMLHttpRequest();\n            // This only fires on a network error.\n            pre.onerror = function (err) {\n                err.networkError = true;\n                reject(err);\n            };\n            pre.onabort = reject;\n            pre.onload = function () {\n                if (pre.status >= 200 && pre.status < 300) {\n                    var response_1 = JSON.parse(pre.response);\n                    // Send the file with data.\n                    var xhr_1 = new XMLHttpRequest();\n                    if (typeof progressCallback === 'function') {\n                        xhr_1.upload.onprogress = progressCallback;\n                    }\n                    // Fire on network error.\n                    xhr_1.onerror = function (err) {\n                        err.networkError = true;\n                        reject(err);\n                    };\n                    // Fire on network abort.\n                    xhr_1.onabort = function (err) {\n                        err.networkError = true;\n                        reject(err);\n                    };\n                    // Fired when the response has made it back from the server.\n                    xhr_1.onload = function () {\n                        if (xhr_1.status >= 200 && xhr_1.status < 300) {\n                            resolve(response_1);\n                        }\n                        else {\n                            reject(xhr_1.response || 'Unable to upload file');\n                        }\n                    };\n                    // Set the onabort error callback.\n                    xhr_1.onabort = reject;\n                    // Get the request and send it to the server.\n                    xhr_1.send(xhrCb(xhr_1, response_1));\n                }\n                else {\n                    reject(pre.response || 'Unable to sign file');\n                }\n            };\n            pre.open('POST', formio.formUrl + \"/storage/\" + type);\n            pre.setRequestHeader('Accept', 'application/json');\n            pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n            var token = formio.getToken();\n            if (token) {\n                pre.setRequestHeader('x-jwt-token', token);\n            }\n            pre.send(JSON.stringify({\n                name: XHR.path([dir, fileName]),\n                size: file.size,\n                type: file.type,\n                groupPermissions: groupPermissions,\n                groupId: groupId\n            }));\n        }));\n    },\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (XHR);\n\n\n//# sourceURL=webpack://premium/./lib/providers/storage/xhr.js?")},"./lib/templates/bootstrap/codereader/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '';\n__p += '<div class=\"d-flex\">\\n  <button class=\"btn btn-secondary\" ref=\"' +\n((__t = (ctx.ref)) == null ? '' : __t) +\n'\">\\n    <i class=\"fa fa-barcode component-icon\"></i> ' +\n((__t = (ctx.label)) == null ? '' : __t) +\n'\\n  </button>\\n  <div class=\"info-text\">\\n    ' +\n((__t = (ctx.dataValue ? ctx.dataValue : 'No code')) == null ? '' : __t) +\n'\\n  </div>\\n</div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/codereader/form.ejs.js?")},"./lib/templates/bootstrap/codereader/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap/codereader/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/codereader/index.js?')},"./lib/templates/bootstrap/dynamicWizard/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<ul class=\"dynamicWizard-listgroup list-group\\n    ' +\n((__t = ( ctx.component.striped ? 'table-striped' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.bordered ? 'table-bordered' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.hover ? 'table-hover' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.condensed ? 'table-sm' : '')) == null ? '' : __t) +\n'\\n    \">\\n  ';\n if (ctx.readOnly || !ctx.isChangingMode || ctx.isDisabled) { ;\n__p += '\\n  ';\n if (ctx.header) { ;\n__p += '\\n  <li class=\"list-group-item list-group-header\">\\n    ' +\n((__t = (ctx.header)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n ctx.rows.forEach(function(row, rowIndex) { ;\n__p += '\\n  <li class=\"list-group-card\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = (row)) == null ? '' : __t) +\n'\\n    <div class=\"has-error\">\\n      <div class=\"dynamicWizard-row-error help-block\">\\n        ' +\n((__t = (ctx.errors[rowIndex])) == null ? '' : __t) +\n'\\n      </div>\\n    </div>\\n  </li>\\n  ';\n }) ;\n__p += '\\n  ';\n if (ctx.footer) { ;\n__p += '\\n  <li class=\"list-group-item list-group-footer\">\\n    ' +\n((__t = (ctx.footer)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n } else { ;\n__p += '\\n  <li class=\"list-group-field\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = ( ctx.currentComponent )) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n if (!ctx.readOnly && !ctx.isBlocking) { ;\n__p += '\\n';\n if (!ctx.isChangingMode) { ;\n__p += '\\n<p>Would you like to add another?</p>\\n<button class=\"btn btn-primary\" ref=\"' +\n((__t = (ctx.ref.agreeButton)) == null ? '' : __t) +\n'\">\\n  ' +\n((__t = (ctx.t('Yes'))) == null ? '' : __t) +\n'\\n</button>\\n';\n } else { ;\n__p += '\\n<ul class=\"list-inline\" id=\"' +\n((__t = ( ctx.dynamicWizardKey )) == null ? '' : __t) +\n'-nav\">\\n  ';\n if (ctx.buttons.cancel) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-secondary btn-wizard-nav-cancel\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-cancel\">' +\n((__t = (ctx.t('cancel'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.previous) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-previous\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-previous\">' +\n((__t = (ctx.t('previous'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.next) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-next\" ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-next\">' +\n((__t = (ctx.t('next'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n } ;\n__p += '\\n';\n } ;\n\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/dynamicWizard/form.ejs.js?")},"./lib/templates/bootstrap/dynamicWizard/html.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<ul class=\"dynamicWizard-listgroup list-group\\n    ' +\n((__t = ( ctx.component.striped ? 'table-striped' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.bordered ? 'table-bordered' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.hover ? 'table-hover' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.condensed ? 'table-sm' : '')) == null ? '' : __t) +\n'\\n    \">\\n  ';\n if (ctx.readOnly || !ctx.isChangingMode || ctx.isDisabled) { ;\n__p += '\\n  ';\n if (ctx.header) { ;\n__p += '\\n  <li class=\"list-group-item list-group-header\">\\n    ' +\n((__t = (ctx.header)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n ctx.rows.forEach(function(row, rowIndex) { ;\n__p += '\\n  <li class=\"list-group-card\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = (row)) == null ? '' : __t) +\n'\\n    <div class=\"has-error\">\\n      <div class=\"dynamicWizard-row-error help-block\">\\n        ' +\n((__t = (ctx.errors[rowIndex])) == null ? '' : __t) +\n'\\n      </div>\\n    </div>\\n  </li>\\n  ';\n }) ;\n__p += '\\n  ';\n if (ctx.footer) { ;\n__p += '\\n  <li class=\"list-group-item list-group-footer\">\\n    ' +\n((__t = (ctx.footer)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n } else { ;\n__p += '\\n  <li class=\"list-group-field\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = ( ctx.currentComponent )) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n if (!ctx.readOnly && !ctx.isBlocking) { ;\n__p += '\\n';\n if (!ctx.isChangingMode) { ;\n__p += '\\n<p>Would you like to add another?</p>\\n<button class=\"btn btn-primary\" ref=\"' +\n((__t = (ctx.ref.agreeButton)) == null ? '' : __t) +\n'\">\\n  ' +\n((__t = (ctx.t('Yes'))) == null ? '' : __t) +\n'\\n</button>\\n';\n } else { ;\n__p += '\\n<ul class=\"list-inline\" id=\"' +\n((__t = ( ctx.dynamicWizardKey )) == null ? '' : __t) +\n'-nav\">\\n  ';\n if (ctx.buttons.cancel) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-secondary btn-wizard-nav-cancel\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-cancel\">' +\n((__t = (ctx.t('cancel'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.previous) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-previous\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-previous\">' +\n((__t = (ctx.t('previous'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.next) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-next\" ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-next\">' +\n((__t = (ctx.t('next'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n } ;\n__p += '\\n';\n } ;\n\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/dynamicWizard/html.ejs.js?")},"./lib/templates/bootstrap/dynamicWizard/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap/dynamicWizard/form.ejs.js");\n/* harmony import */ var _html_ejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html.ejs */ "./lib/templates/bootstrap/dynamicWizard/html.ejs.js");\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default, html: _html_ejs__WEBPACK_IMPORTED_MODULE_1__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/dynamicWizard/index.js?')},"./lib/templates/bootstrap/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sketchpad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sketchpad */ "./lib/templates/bootstrap/sketchpad/index.js");\n/* harmony import */ var _tagpad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tagpad */ "./lib/templates/bootstrap/tagpad/index.js");\n/* harmony import */ var _codereader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codereader */ "./lib/templates/bootstrap/codereader/index.js");\n/* harmony import */ var _dynamicWizard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dynamicWizard */ "./lib/templates/bootstrap/dynamicWizard/index.js");\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    sketchpad: _sketchpad__WEBPACK_IMPORTED_MODULE_0__.default,\n    tagpad: _tagpad__WEBPACK_IMPORTED_MODULE_1__.default,\n    codereader: _codereader__WEBPACK_IMPORTED_MODULE_2__.default,\n    dynamicWizard: _dynamicWizard__WEBPACK_IMPORTED_MODULE_3__.default\n});\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/index.js?')},"./lib/templates/bootstrap/sketchpad/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<div class=\"formio-sketchpad-body\">\\n  <div class=\"formio-sketchpad-header\" ref=\"header\">\\n    <div class=\"btn-toolbar formio-sketchpad-toolbar\" role=\"toolbar\">\\n      ';\n !ctx.disabled && ctx.buttonGroups.forEach(function(group) { ;\n__p += '\\n        <div class=\"btn-group formio-sketchpad-toolbar-group\" role=\"group\">\\n          ';\n group.forEach(function(button) { ;\n__p += '\\n            <div class=\"btn formio-sketchpad-toolbar-button formio-sketchpad-toolbar-button-' +\n((__t = (button.key)) == null ? '' : __t) +\n'\" ref=\"' +\n((__t = (button.key)) == null ? '' : __t) +\n'\" title=\"' +\n((__t = (button.title)) == null ? '' : __t) +\n'\">\\n              <i class=\"' +\n((__t = (button.icon)) == null ? '' : __t) +\n'\"></i>\\n              ';\n if (button.input) { ;\n__p += '\\n                <input type=\"' +\n((__t = (button.input.type)) == null ? '' : __t) +\n'\" class=\"formio-sketchpad-toolbar-input ' +\n((__t = (button.input.class)) == null ? '' : __t) +\n'\" ref=\"' +\n((__t = (button.key)) == null ? '' : __t) +\n'-input\"\\n                ' +\n((__t = ( ctx.self.buttonAttributes(button) )) == null ? '' : __t) +\n'/>\\n              ';\n } ;\n__p += '\\n            </div>\\n          ';\n }) ;\n__p += '\\n        </div>\\n      ';\n }) ;\n__p += '\\n    </div>\\n  </div>\\n  <div class=\"formio-sketchpad-container\" ref=\"drawingContainer\">\\n    <div class=\"formio-sketchpad-background\" ref=\"background\">\\n      ';\n if (!ctx.component.image && !ctx.component.imageUrl) { ;\n__p += '\\n          Background image is not specified. Sketchpad doesn\\\\\\'t work without background image\\n      ';\n } ;\n__p += '\\n      ';\n if (ctx.component.imageUrl && !(ctx.component.imageType === 'svg')) { ;\n__p += '\\n        <img ref=\"backgroundImage\" alt=\"\"/>\\n      ';\n } ;\n__p += '\\n    </div>\\n    <div class=\"formio-sketchpad-canvas\" ref=\"canvas\"></div>\\n  </div>\\n  <div class=\"formio-sketchpad-footer\" ref=\"footer\">\\n    <div class=\"formio-sketchpad-meta-info\"><div><span ref=\"totalMultiplier\">' +\n((__t = (ctx.zoomInfo.totalMultiplier)) == null ? '' : __t) +\n'</span>x</div>\\n  </div>\\n</div></div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/sketchpad/form.ejs.js?")},"./lib/templates/bootstrap/sketchpad/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap/sketchpad/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/sketchpad/index.js?')},"./lib/templates/bootstrap/tagpad/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<div class=\"formio-tagpad-container clearfix\">\\n  <div ref=\"canvasContainer\" class=\"formio-tagpad-image-container\" style=\"max-width: ' +\n((__t = (ctx.canvasMaxWidth)) == null ? '' : __t) +\n'; max-height: ' +\n((__t = (ctx.canvasMaxHeight)) == null ? '' : __t) +\n';\">\\n      <div ref=\"background\" class=\"formio-tagpad-background\">\\n        ';\n if (!ctx.component.image && !ctx.component.imageUrl) { ;\n__p += '\\n            Background image is not specified. Tagpad doesn\\\\\\'t work without background image\\n        ';\n } ;\n__p += '\\n        ';\n if (ctx.component.imageUrl) { ;\n__p += '\\n            <img src=' +\n((__t = (ctx.component.imageUrl)) == null ? '' : __t) +\n' ref=\"image\" alt=\"\" width=\"100%\"/>\\n        ';\n } ;\n__p += '\\n      </div>\\n      <div ref=\"canvas\" class=\"formio-tagpad-canvas\"></div>\\n  </div>\\n  <div ref=\"formContainer\" class=\"formio-tagpad-form-container\">\\n      <div class=\"formio-tagpad-form\">\\n        ';\n if (ctx.selectedDot) { ;\n__p += '\\n          <p class=\"formio-tagpad-form-title\">Dot: ' +\n((__t = (ctx.selectedDot.index + 1)) == null ? '' : __t) +\n'</p>\\n          <div  ref=\"form\">' +\n((__t = (ctx.components)) == null ? '' : __t) +\n'</div>\\n          ';\n if (ctx.buttons.removeDot) { ;\n__p += '\\n            <button class=\"btn btn-sm btn-danger formio-tagpad-remove-button\" ref=\"removeDot\">\\n              <i class=\"fa fa-trash\"></i>\\n            </button>\\n          ';\n } ;\n__p += '\\n        ';\n } else if (ctx.hasDots && !ctx.disabled && !ctx.component.disabled && !ctx.self.shouldDisabled) { ;\n__p += '\\n          <p class=\"formio-tagpad-form-title\">No dot selected</p>\\n        ';\n } else if (ctx.component.disabled || ctx.disabled || ctx.self.shouldDisabled) { ;\n__p += '\\n          <div class=\"formio-tagpad-all-data\">' +\n((__t = (ctx.self.getDataAsString())) == null ? '' : __t) +\n'</div>\\n        ';\n } ;\n__p += '\\n      </div>\\n  </div>\\n</div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/tagpad/form.ejs.js?")},"./lib/templates/bootstrap/tagpad/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap/tagpad/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap/tagpad/index.js?')},"./lib/templates/bootstrap3/codereader/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '';\n__p += '<div class=\"d-flex\">\\n  <button class=\"btn btn-secondary\" ref=\"' +\n((__t = (ctx.ref)) == null ? '' : __t) +\n'\">\\n    <i class=\"fa fa-barcode component-icon\"></i> ' +\n((__t = (ctx.label)) == null ? '' : __t) +\n'\\n  </button>\\n  <div class=\"info-text\">\\n    ' +\n((__t = (ctx.dataValue ? ctx.dataValue : 'No code')) == null ? '' : __t) +\n'\\n  </div>\\n</div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/codereader/form.ejs.js?")},"./lib/templates/bootstrap3/codereader/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap3/codereader/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/codereader/index.js?')},"./lib/templates/bootstrap3/dynamicWizard/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<ul class=\"dynamicWizard-listgroup list-group\\n    ' +\n((__t = ( ctx.component.striped ? 'table-striped' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.bordered ? 'table-bordered' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.hover ? 'table-hover' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.condensed ? 'table-sm' : '')) == null ? '' : __t) +\n'\\n    \">\\n  ';\n if (ctx.readOnly || !ctx.isChangingMode || ctx.isDisabled) { ;\n__p += '\\n  ';\n if (ctx.header) { ;\n__p += '\\n  <li class=\"list-group-item list-group-header\">\\n    ' +\n((__t = (ctx.header)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n ctx.rows.forEach(function(row, rowIndex) { ;\n__p += '\\n  <li class=\"list-group-card\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = (row)) == null ? '' : __t) +\n'\\n    <div class=\"has-error\">\\n      <div class=\"dynamicWizard-row-error help-block\">\\n        ' +\n((__t = (ctx.errors[rowIndex])) == null ? '' : __t) +\n'\\n      </div>\\n    </div>\\n  </li>\\n  ';\n }) ;\n__p += '\\n  ';\n if (ctx.footer) { ;\n__p += '\\n  <li class=\"list-group-item list-group-footer\">\\n    ' +\n((__t = (ctx.footer)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n } else { ;\n__p += '\\n  <li class=\"list-group-field\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = ( ctx.currentComponent )) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n if (!ctx.readOnly && !ctx.isBlocking) { ;\n__p += '\\n';\n if (!ctx.isChangingMode) { ;\n__p += '\\n<p>Would you like to add another?</p>\\n<button class=\"btn btn-primary\" ref=\"' +\n((__t = (ctx.ref.agreeButton)) == null ? '' : __t) +\n'\">\\n  ' +\n((__t = (ctx.t('Yes'))) == null ? '' : __t) +\n'\\n</button>\\n';\n } else { ;\n__p += '\\n<ul class=\"list-inline\" id=\"' +\n((__t = ( ctx.dynamicWizardKey )) == null ? '' : __t) +\n'-nav\">\\n  ';\n if (ctx.buttons.cancel) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-secondary btn-wizard-nav-cancel\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-cancel\">' +\n((__t = (ctx.t('cancel'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.previous) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-previous\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-previous\">' +\n((__t = (ctx.t('previous'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.next) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-next\" ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-next\">' +\n((__t = (ctx.t('next'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n } ;\n__p += '\\n';\n } ;\n\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/dynamicWizard/form.ejs.js?")},"./lib/templates/bootstrap3/dynamicWizard/html.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<ul class=\"dynamicWizard-listgroup list-group\\n    ' +\n((__t = ( ctx.component.striped ? 'table-striped' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.bordered ? 'table-bordered' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.hover ? 'table-hover' : '')) == null ? '' : __t) +\n'\\n    ' +\n((__t = ( ctx.component.condensed ? 'table-sm' : '')) == null ? '' : __t) +\n'\\n    \">\\n  ';\n if (ctx.readOnly || !ctx.isChangingMode || ctx.isDisabled) { ;\n__p += '\\n  ';\n if (ctx.header) { ;\n__p += '\\n  <li class=\"list-group-item list-group-header\">\\n    ' +\n((__t = (ctx.header)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n ctx.rows.forEach(function(row, rowIndex) { ;\n__p += '\\n  <li class=\"list-group-card\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = (row)) == null ? '' : __t) +\n'\\n    <div class=\"has-error\">\\n      <div class=\"dynamicWizard-row-error help-block\">\\n        ' +\n((__t = (ctx.errors[rowIndex])) == null ? '' : __t) +\n'\\n      </div>\\n    </div>\\n  </li>\\n  ';\n }) ;\n__p += '\\n  ';\n if (ctx.footer) { ;\n__p += '\\n  <li class=\"list-group-item list-group-footer\">\\n    ' +\n((__t = (ctx.footer)) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n } else { ;\n__p += '\\n  <li class=\"list-group-field\" ref=\"' +\n((__t = (ctx.ref.row)) == null ? '' : __t) +\n'\">\\n    ' +\n((__t = ( ctx.currentComponent )) == null ? '' : __t) +\n'\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n if (!ctx.readOnly && !ctx.isBlocking) { ;\n__p += '\\n';\n if (!ctx.isChangingMode) { ;\n__p += '\\n<p>Would you like to add another?</p>\\n<button class=\"btn btn-primary\" ref=\"' +\n((__t = (ctx.ref.agreeButton)) == null ? '' : __t) +\n'\">\\n  ' +\n((__t = (ctx.t('Yes'))) == null ? '' : __t) +\n'\\n</button>\\n';\n } else { ;\n__p += '\\n<ul class=\"list-inline\" id=\"' +\n((__t = ( ctx.dynamicWizardKey )) == null ? '' : __t) +\n'-nav\">\\n  ';\n if (ctx.buttons.cancel) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-secondary btn-wizard-nav-cancel\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-cancel\">' +\n((__t = (ctx.t('cancel'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.previous) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-previous\"\\n      ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-previous\">' +\n((__t = (ctx.t('previous'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n  ';\n if (ctx.buttons.next) { ;\n__p += '\\n  <li class=\"list-inline-item\">\\n    <button class=\"btn btn-primary btn-wizard-nav-next\" ref=\"' +\n((__t = (ctx.dynamicWizardKey)) == null ? '' : __t) +\n'-next\">' +\n((__t = (ctx.t('next'))) == null ? '' : __t) +\n'</button>\\n  </li>\\n  ';\n } ;\n__p += '\\n</ul>\\n';\n } ;\n__p += '\\n';\n } ;\n\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/dynamicWizard/html.ejs.js?")},"./lib/templates/bootstrap3/dynamicWizard/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap3/dynamicWizard/form.ejs.js");\n/* harmony import */ var _html_ejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html.ejs */ "./lib/templates/bootstrap3/dynamicWizard/html.ejs.js");\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default, html: _html_ejs__WEBPACK_IMPORTED_MODULE_1__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/dynamicWizard/index.js?')},"./lib/templates/bootstrap3/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tagpad__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tagpad */ "./lib/templates/bootstrap3/tagpad/index.js");\n/* harmony import */ var _sketchpad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sketchpad */ "./lib/templates/bootstrap3/sketchpad/index.js");\n/* harmony import */ var _codereader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codereader */ "./lib/templates/bootstrap3/codereader/index.js");\n/* harmony import */ var _dynamicWizard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dynamicWizard */ "./lib/templates/bootstrap3/dynamicWizard/index.js");\n\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    tagpad: _tagpad__WEBPACK_IMPORTED_MODULE_0__.default,\n    sketchpad: _sketchpad__WEBPACK_IMPORTED_MODULE_1__.default,\n    codereader: _codereader__WEBPACK_IMPORTED_MODULE_2__.default,\n    dynamicWizard: _dynamicWizard__WEBPACK_IMPORTED_MODULE_3__.default\n});\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/index.js?')},"./lib/templates/bootstrap3/sketchpad/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<div class=\"formio-sketchpad-body\">\\n  <div class=\"formio-sketchpad-header\" ref=\"header\">\\n    <div class=\"btn-toolbar formio-sketchpad-toolbar\" role=\"toolbar\">\\n      ';\n !ctx.disabled && ctx.buttonGroups.forEach(function(group) { ;\n__p += '\\n        <div class=\"btn-group formio-sketchpad-toolbar-group\" role=\"group\">\\n          ';\n group.forEach(function(button) { ;\n__p += '\\n            <div class=\"btn formio-sketchpad-toolbar-button formio-sketchpad-toolbar-button-' +\n((__t = (button.key)) == null ? '' : __t) +\n'\" ref=\"' +\n((__t = (button.key)) == null ? '' : __t) +\n'\" title=\"' +\n((__t = (button.title)) == null ? '' : __t) +\n'\">\\n              <i class=\"' +\n((__t = (button.icon)) == null ? '' : __t) +\n'\"></i>\\n              ';\n if (button.input) { ;\n__p += '\\n                <input type=\"' +\n((__t = (button.input.type)) == null ? '' : __t) +\n'\" class=\"formio-sketchpad-toolbar-input ' +\n((__t = (button.input.class)) == null ? '' : __t) +\n'\" ref=\"' +\n((__t = (button.key)) == null ? '' : __t) +\n'-input\"\\n                ' +\n((__t = ( ctx.self.buttonAttributes(button) )) == null ? '' : __t) +\n'/>\\n              ';\n } ;\n__p += '\\n            </div>\\n          ';\n }) ;\n__p += '\\n        </div>\\n      ';\n }) ;\n__p += '\\n    </div>\\n  </div>\\n  <div class=\"formio-sketchpad-container\" ref=\"drawingContainer\">\\n    <div class=\"formio-sketchpad-background\" ref=\"background\">\\n      ';\n if (!ctx.component.image && !ctx.component.imageUrl) { ;\n__p += '\\n          Background image is not specified. Sketchpad doesn\\\\\\'t work without background image\\n      ';\n } ;\n__p += '\\n      ';\n if (ctx.component.imageUrl && !(ctx.component.imageType === 'svg')) { ;\n__p += '\\n        <img ref=\"backgroundImage\" alt=\"\"/>\\n      ';\n } ;\n__p += '\\n    </div>\\n    <div class=\"formio-sketchpad-canvas\" ref=\"canvas\"></div>\\n  </div>\\n  <div class=\"formio-sketchpad-footer\" ref=\"footer\">\\n    <div class=\"formio-sketchpad-meta-info\"><div><span ref=\"totalMultiplier\">' +\n((__t = (ctx.zoomInfo.totalMultiplier)) == null ? '' : __t) +\n'</span>x</div>\\n  </div>\\n</div></div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/sketchpad/form.ejs.js?")},"./lib/templates/bootstrap3/sketchpad/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap3/sketchpad/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/sketchpad/index.js?')},"./lib/templates/bootstrap3/tagpad/form.ejs.js":function(__unused_webpack_module,exports){eval("Object.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default=function(ctx) {\nvar __t, __p = '', __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n__p += '<div class=\"formio-tagpad-container clearfix\">\\n  <div ref=\"canvasContainer\" class=\"formio-tagpad-image-container\" style=\"max-width: ' +\n((__t = (ctx.canvasMaxWidth)) == null ? '' : __t) +\n'; max-height: ' +\n((__t = (ctx.canvasMaxHeight)) == null ? '' : __t) +\n';\">\\n      <div ref=\"background\" class=\"formio-tagpad-background\">\\n        ';\n if (!ctx.component.image && !ctx.component.imageUrl) { ;\n__p += '\\n            Background image is not specified. Tagpad doesn\\\\\\'t work without background image\\n        ';\n } ;\n__p += '\\n        ';\n if (ctx.component.imageUrl) { ;\n__p += '\\n            <img src=' +\n((__t = (ctx.component.imageUrl)) == null ? '' : __t) +\n' ref=\"image\" alt=\"\" width=\"100%\"/>\\n        ';\n } ;\n__p += '\\n      </div>\\n      <div ref=\"canvas\" class=\"formio-tagpad-canvas\"></div>\\n  </div>\\n  <div ref=\"formContainer\" class=\"formio-tagpad-form-container\">\\n      <div class=\"formio-tagpad-form\">\\n        ';\n if (ctx.selectedDot) { ;\n__p += '\\n          <p class=\"formio-tagpad-form-title\">Dot: ' +\n((__t = (ctx.selectedDot.index + 1)) == null ? '' : __t) +\n'</p>\\n          <div  ref=\"form\">' +\n((__t = (ctx.components)) == null ? '' : __t) +\n'</div>\\n          ';\n if (ctx.buttons.removeDot) { ;\n__p += '\\n            <button class=\"btn btn-sm btn-danger formio-tagpad-remove-button\" ref=\"removeDot\">\\n              <i class=\"fa fa-trash\"></i>\\n            </button>\\n          ';\n } ;\n__p += '\\n        ';\n } else if (ctx.hasDots && !ctx.disabled && !ctx.component.disabled && !ctx.self.shouldDisabled) { ;\n__p += '\\n          <p class=\"formio-tagpad-form-title\">No dot selected</p>\\n        ';\n } else if (ctx.component.disabled || ctx.disabled || ctx.self.shouldDisabled) { ;\n__p += '\\n          <div class=\"formio-tagpad-all-data\">' +\n((__t = (ctx.self.getDataAsString())) == null ? '' : __t) +\n'</div>\\n        ';\n } ;\n__p += '\\n      </div>\\n  </div>\\n</div>\\n';\nreturn __p\n}\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/tagpad/form.ejs.js?")},"./lib/templates/bootstrap3/tagpad/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _form_ejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form.ejs */ "./lib/templates/bootstrap3/tagpad/form.ejs.js");\n\n/* harmony default export */ __webpack_exports__["default"] = ({ form: _form_ejs__WEBPACK_IMPORTED_MODULE_0__.default });\n\n\n//# sourceURL=webpack://premium/./lib/templates/bootstrap3/tagpad/index.js?')},"./lib/templates/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bootstrap */ "./lib/templates/bootstrap/index.js");\n/* harmony import */ var _bootstrap3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bootstrap3 */ "./lib/templates/bootstrap3/index.js");\n/* harmony import */ var _semantic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./semantic */ "./lib/templates/semantic/index.js");\n\n\n\n/* harmony default export */ __webpack_exports__["default"] = ({\n    bootstrap: _bootstrap__WEBPACK_IMPORTED_MODULE_0__.default,\n    bootstrap3: _bootstrap3__WEBPACK_IMPORTED_MODULE_1__.default,\n    semantic: _semantic__WEBPACK_IMPORTED_MODULE_2__.default,\n});\n\n\n//# sourceURL=webpack://premium/./lib/templates/index.js?')},"./lib/templates/semantic/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = ({});\n\n\n//# sourceURL=webpack://premium/./lib/templates/semantic/index.js?')},"./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.Math === Math) {\r\n        return __webpack_require__.g;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n\n//# sourceURL=webpack://premium/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js?")},"./node_modules/two.js/build/two.module.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/*\nMIT License\n\nCopyright (c) 2012 - 2020 jonobr1 / http://jonobr1.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n/**\n * @name Two.Commands\n * @property {Object} - Map of possible path commands. Taken from the SVG specification.\n */\nvar Commands = {\n  move: 'M',\n  line: 'L',\n  curve: 'C',\n  arc: 'A',\n  close: 'Z'\n};\n\nvar root;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof __webpack_require__.g !== 'undefined') {\n  root = __webpack_require__.g;\n} else if (typeof self !== 'undefined') {\n  root = self;\n}\n\nvar root$1 = root;\n\nvar Matrix;\n\n/**\n * @name Utils.decomposeMatrix\n * @function\n * @param {Two.Matrix} matrix - The matrix to decompose.\n * @returns {Object} An object containing relevant skew values.\n * @description Decompose a 2D 3x3 Matrix to find the skew.\n */\nvar decomposeMatrix = function(matrix) {\n\n  // TODO: Include skewX, skewY\n  // https://math.stackexchange.com/questions/237369/given-this-transformation-matrix-how-do-i-decompose-it-into-translation-rotati/417813\n  // https://stackoverflow.com/questions/45159314/decompose-2d-transformation-matrix\n\n  return {\n      translateX: matrix.e,\n      translateY: matrix.f,\n      scaleX: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\n      scaleY: Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d),\n      rotation: 180 * Math.atan2(matrix.b, matrix.a) / Math.PI\n  };\n\n};\n\nvar setMatrix = function(M) {\n  Matrix = M;\n};\n\n/**\n * @name Utils.getComputedMatrix\n * @function\n * @param {Two.Shape} object - The Two.js object that has a matrix property to calculate from.\n * @param {Two.Matrix} [matrix] - The matrix to apply calculated transformations to if available.\n * @returns {Two.Matrix} The computed matrix of a nested object. If no `matrix` was passed in arguments then a `new Two.Matrix` is returned.\n * @description Method to get the world space transformation of a given object in a Two.js scene.\n */\nvar getComputedMatrix = function(object, matrix) {\n\n  matrix = (matrix && matrix.identity()) || new Matrix();\n  var parent = object, matrices = [];\n\n  while (parent && parent._matrix) {\n    matrices.push(parent._matrix);\n    parent = parent.parent;\n  }\n\n  matrices.reverse();\n\n  for (var i = 0; i < matrices.length; i++) {\n\n    var m = matrices[i];\n    var e = m.elements;\n    matrix.multiply(\n      e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9]);\n\n  }\n\n  return matrix;\n\n};\n\n/**\n * @name Utils.lerp\n * @function\n * @param {Number} a - Start value.\n * @param {Number} b - End value.\n * @param {Number} t - Zero-to-one value describing percentage between a and b.\n * @returns {Number}\n * @description Linear interpolation between two values `a` and `b` by an amount `t`.\n */\nvar lerp = function(a, b, t) {\n  return t * (b - a) + a;\n};\n\n/**\n * @name Utils.mod\n * @param {Number} v - The value to modulo\n * @param {Number} l - The value to modulo by\n * @returns {Number}\n * @description Modulo with added functionality to handle negative values in a positive manner.\n */\nvar mod = function(v, l) {\n\n  while (v < 0) {\n    v += l;\n  }\n\n  return v % l;\n\n};\n\nvar NumArray = root$1.Float32Array || Array;\n\n/**\n* @name Utils.toFixed\n* @function\n* @param {Number} v - Any float\n* @returns {Number} That float trimmed to the third decimal place.\n* @description A pretty fast toFixed(3) alternative.\n* @see {@link http://jsperf.com/parsefloat-tofixed-vs-math-round/18}\n*/\nvar toFixed = function(v) {\n  return Math.floor(v * 1000000) / 1000000;\n};\n\nvar math = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  decomposeMatrix: decomposeMatrix,\n  getComputedMatrix: getComputedMatrix,\n  setMatrix: setMatrix,\n  lerp: lerp,\n  mod: mod,\n  NumArray: NumArray,\n  toFixed: toFixed\n});\n\nvar slice = Array.prototype.slice;\n\nvar isArrayLike = function(collection) {\n  if (collection === null || collection === undefined) return false;\n  var length = collection.length;\n  // Arrays cannot hold more than 2^32 - 1 items\n  return (typeof length == 'number' && length >= 0 && length < 4294967296);\n};\n\nvar _ = {\n  isNaN: function(obj) {\n    return typeof obj === 'number' && obj !== +obj;\n  },\n  isElement: function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  },\n  isObject: function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  },\n  extend: function(base) {\n    var sources = slice.call(arguments, 1);\n    for (var i = 0; i < sources.length; i++) {\n      var obj = sources[i];\n      for (var k in obj) {\n        base[k] = obj[k];\n      }\n    }\n    return base;\n  },\n  defaults: function(base) {\n    var sources = slice.call(arguments, 1);\n    for (var i = 0; i < sources.length; i++) {\n      var obj = sources[i];\n      for (var k in obj) {\n        if (base[k] === void 0) {\n        base[k] = obj[k];\n        }\n      }\n    }\n    return base;\n  },\n  each: function(obj, iteratee, context) {\n    var ctx = context || this;\n    var keys = !isArrayLike(obj) && Object.keys(obj);\n    var length = (keys || obj).length;\n    for (var i = 0; i < length; i++) {\n      var k = keys ? keys[i] : i;\n      iteratee.call(ctx, obj[k], k, obj);\n    }\n    return obj;\n  },\n  /**\n   * @name Utils.performance\n   * @property {Date} - A special `Date` like object to get the current millis of the session. Used internally to calculate time between frames.\n   * e.g: `Utils.performance.now() // milliseconds since epoch`\n   */\n  performance: ((root$1.performance && root$1.performance.now) ? root$1.performance : Date),\n};\n\nvar trigger = function(obj, events, args) {\n  var method;\n  switch (args.length) {\n  case 0:\n    method = function(i) {\n      events[i].call(obj, args[0]);\n    };\n    break;\n  case 1:\n    method = function(i) {\n      events[i].call(obj, args[0], args[1]);\n    };\n    break;\n  case 2:\n    method = function(i) {\n      events[i].call(obj, args[0], args[1], args[2]);\n    };\n    break;\n  case 3:\n    method = function(i) {\n      events[i].call(obj, args[0], args[1], args[2], args[3]);\n    };\n    break;\n  default:\n    method = function(i) {\n      events[i].apply(obj, args);\n    };\n  }\n  for (var i = 0; i < events.length; i++) {\n    method(i);\n  }\n};\n\n/**\n * @name Utils.Events\n * @interface\n * @description Object inherited by many Two.js objects in order to facilitate custom events.\n */\nvar Events = {\n\n  /**\n   * @name Utils.Events.on\n   * @function\n   * @param {String} name - The name of the event to bind a function to.\n   * @param {Function} handler - The function to be invoked when the event is dispatched.\n   * @description Call to add a listener to a specific event name.\n   */\n  on: function(name, handler) {\n\n    this._events || (this._events = {});\n    var list = this._events[name] || (this._events[name] = []);\n\n    list.push(handler);\n\n    return this;\n\n  },\n\n  /**\n   * @name Utils.Events.off\n   * @function\n   * @param {String} [name] - The name of the event intended to be removed.\n   * @param {Function} [handler] - The handler intended to be reomved.\n   * @description Call to remove listeners from a specific event. If only `name` is passed then all the handlers attached to that `name` will be removed. If no arguments are passed then all handlers for every event on the obejct are removed.\n   */\n  off: function(name, handler) {\n\n    if (!this._events) {\n      return this;\n    }\n    if (!name && !handler) {\n      this._events = {};\n      return this;\n    }\n\n    var names = name ? [name] : Object.keys(this._events);\n    for (var i = 0, l = names.length; i < l; i++) {\n\n      name = names[i];\n      var list = this._events[name];\n\n      if (list) {\n        var events = [];\n        if (handler) {\n          for (var j = 0, k = list.length; j < k; j++) {\n            var ev = list[j];\n            ev = ev.handler ? ev.handler : ev;\n            if (handler && handler !== ev) {\n              events.push(ev);\n            }\n          }\n        }\n        this._events[name] = events;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n   * @name Utils.Events.trigger\n   * @function\n   * @param {String} name - The name of the event to dispatch.\n   * @param arguments - Anything can be passed after the name and those will be passed on to handlers attached to the event in the order they are passed.\n   * @description Call to trigger a custom event. Any additional arguments passed after the name will be passed along to the attached handlers.\n   */\n  trigger: function(name) {\n    if (!this._events) return this;\n    var args = Array.prototype.slice.call(arguments, 1);\n    var events = this._events[name];\n    if (events) trigger(this, events, args);\n    return this;\n  },\n\n  listen: function(obj, name, handler) {\n\n    var bound = this;\n\n    if (obj) {\n\n      var event = function () {\n        handler.apply(bound, arguments);\n      };\n\n      // Add references about the object that assigned this listener\n      event.obj = obj;\n      event.name = name;\n      event.handler = handler;\n\n      obj.on(name, event);\n\n    }\n\n    return this;\n\n  },\n\n  ignore: function(obj, name, handler) {\n\n    obj.off(name, handler);\n    return this;\n\n  },\n\n  Types: {\n    play: 'play',\n    pause: 'pause',\n    update: 'update',\n    render: 'render',\n    resize: 'resize',\n    change: 'change',\n    remove: 'remove',\n    insert: 'insert',\n    order: 'order',\n    load: 'load'\n  }\n\n};\n\n\n/**\n * @name Two.Events.bind\n * @function\n * @description Alias for {@link Two.Events.on}.\n */\nEvents.bind = Events.on;\n\n/**\n * @name Two.Events.unbind\n * @function\n * @description Alias for {@link Two.Events.off}.\n */\nEvents.unbind = Events.off;\n\n/**\n * @name Two.Vector\n * @class\n * @param {Number} [x=0] - Any number to represent the horizontal x-component of the vector.\n * @param {Number} [y=0] - Any number to represent the vertical y-component of the vector.\n * @description A class to store x / y component vector data. In addition to storing data `Two.Vector` has suped up methods for commonplace mathematical operations.\n */\nvar Vector = function(x, y) {\n\n  /**\n   * @name Two.Vector#x\n   * @property {Number} - The horizontal x-component of the vector.\n   */\n  this.x = x || 0;\n\n  /**\n   * @name Two.Vector#y\n   * @property {Number} - The vertical y-component of the vector.\n   */\n  this.y = y || 0;\n\n};\n\n_.extend(Vector, {\n\n  /**\n   * @name Two.Vector.zero\n   * @readonly\n   * @property {Two.Vector} - Handy reference to a vector with component values 0, 0 at all times.\n   */\n  zero: new Vector(),\n\n  /**\n   * @name Two.Vector.add\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Two.Vector}\n   * @description Add two vectors together.\n   */\n  add: function(v1, v2) {\n    return new Vector(v1.x + v2.x, v1.y + v2.y);\n  },\n\n  /**\n   * @name Two.Vector.sub\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Two.Vector}\n   * @description Subtract two vectors: `v2` from `v1`.\n   */\n  sub: function(v1, v2) {\n    return new Vector(v1.x - v2.x, v1.y - v2.y);\n  },\n\n  /**\n   * @name Two.Vector.subtract\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subtract: function(v1, v2) {\n    return Vector.sub(v1, v2);\n  },\n\n  /**\n   * @name Two.Vector.ratioBetween\n   * @function\n   * @param {Two.Vector} A\n   * @param {Two.Vector} B\n   * @returns {Number} The ratio betwen two points `v1` and `v2`.\n   */\n  ratioBetween: function(v1, v2) {\n\n    return (v1.x * v2.x + v1.y * v2.y) / (v1.length() * v2.length());\n\n  },\n\n  /**\n   * @name Two.Vector.angleBetween\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Radians} The angle between points `v1` and `v2`.\n   */\n  angleBetween: function(v1, v2) {\n\n    var dx, dy;\n\n    if (arguments.length >= 4) {\n\n      dx = arguments[0] - arguments[2];\n      dy = arguments[1] - arguments[3];\n\n      return Math.atan2(dy, dx);\n\n    }\n\n    dx = v1.x - v2.x;\n    dy = v1.y - v2.y;\n\n    return Math.atan2(dy, dx);\n\n  },\n\n  /**\n   * @name Two.Vector.distanceBetween\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The distance between points `v1` and `v2`. Distance is always positive.\n   */\n  distanceBetween: function(v1, v2) {\n\n    return Math.sqrt(Vector.distanceBetweenSquared(v1, v2));\n\n  },\n\n  /**\n   * @name Two.Vector.distanceBetweenSquared\n   * @function\n   * @param {Two.Vector} v1\n   * @param {Two.Vector} v2\n   * @returns {Number} The squared distance between points `v1` and `v2`.\n   */\n  distanceBetweenSquared: function(v1, v2) {\n\n    var dx = v1.x - v2.x;\n    var dy = v1.y - v2.y;\n\n    return dx * dx + dy * dy;\n\n  },\n\n  /**\n   * @name Two.Vector.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Vector} to any object. Handy if you'd like to extend the {@link Two.Vector} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    // /**\n    //  * Override Backbone bind / on in order to add properly broadcasting.\n    //  * This allows Two.Vector to not broadcast events unless event listeners\n    //  * are explicity bound to it.\n    //  */\n\n    object.bind = object.on = function() {\n\n      if (!this._bound) {\n        this._x = this.x;\n        this._y = this.y;\n        Object.defineProperty(this, 'x', xgs);\n        Object.defineProperty(this, 'y', ygs);\n        _.extend(this, BoundProto);\n        this._bound = true; // Reserved for event initialization check\n      }\n\n      Events.bind.apply(this, arguments);\n\n      return this;\n\n    };\n\n  }\n\n});\n\n_.extend(Vector.prototype, Events, {\n\n  constructor: Vector,\n\n  /**\n   * @name Two.Vector#set\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Set the x / y components of a vector to specific number values.\n   */\n  set: function(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#copy\n   * @function\n   * @param {Two.Vector} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Copy the x / y components of another object `v`.\n   */\n  copy: function(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#clear\n   * @function\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Set the x / y component values of the vector to zero.\n   */\n  clear: function() {\n    this.x = 0;\n    this.y = 0;\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#clone\n   * @function\n   * @returns {Two.Vector} - A new instance of {@link Two.Vector}.\n   * @description Create a new vector and copy the existing values onto the newly created instance.\n   */\n  clone: function() {\n    return new Vector(this.x, this.y);\n  },\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Two.Vector} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Add an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Number} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Add the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#add\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Add `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  add: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x += x;\n        this.y += x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x += x.x;\n        this.y += x.y;\n      }\n    } else {\n      this.x += x;\n      this.y += y;\n    }\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#addSelf\n   * @function\n   * @description Alias for {@link Two.Vector.add}.\n   */\n  addSelf: function(v) {\n    return this.add.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Two.Vector} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Subtract an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Number} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Subtract the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#sub\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Subtract `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  sub: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x -= x;\n        this.y -= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x -= x.x;\n        this.y -= x.y;\n      }\n    } else {\n      this.x -= x;\n      this.y -= y;\n    }\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#subtract\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subtract: function() {\n    return this.sub.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#subSelf\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subSelf: function(v) {\n    return this.sub.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#subtractSelf\n   * @function\n   * @description Alias for {@link Two.Vector.sub}.\n   */\n  subtractSelf: function(v) {\n    return this.sub.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Two.Vector} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Multiply an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Number} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Multiply the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#multiply\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Multiply `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  multiply: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x *= x;\n        this.y *= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x *= x.x;\n        this.y *= x.y;\n      }\n    } else {\n      this.x *= x;\n      this.y *= y;\n    }\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#multiplySelf\n   * @function\n   * @description Alias for {@link Two.Vector.multiply}.\n   */\n  multiplySelf: function(v) {\n    return this.multiply.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#multiplyScalar\n   * @function\n   * @param {Number} s - The scalar to multiply by.\n   * @description Mulitiply the vector by a single number. Shorthand to call {@link Two.Vector#multiply} directly.\n   */\n  multiplyScalar: function(s) {\n    return this.multiply(s);\n  },\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Two.Vector} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Divide an object with x / y component values to the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Number} v\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Divide the **same** number to both x / y component values of the instance.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Vector#divide\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @returns {Two.Vector} - An instance of itself for the purpose of chaining.\n   * @description Divide `x` / `y` values to their respective component value on the instance.\n   * @overloaded\n   */\n  divide: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this.x /= x;\n        this.y /= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this.x /= x.x;\n        this.y /= x.y;\n      }\n    } else {\n      this.x /= x;\n      this.y /= y;\n    }\n    if (_.isNaN(this.x)) {\n      this.x = 0;\n    }\n    if (_.isNaN(this.y)) {\n      this.y = 0;\n    }\n    return this;\n  },\n\n  /**\n   * @name Two.Vector#divideSelf\n   * @function\n   * @description Alias for {@link Two.Vector.divide}.\n   */\n  divideSelf: function(v) {\n    return this.divide.apply(this, arguments);\n  },\n\n  /**\n   * @name Two.Vector#divideScalar\n   * @function\n   * @param {Number} s - The scalar to divide by.\n   * @description Divide the vector by a single number. Shorthand to call {@link Two.Vector#divide} directly.\n   */\n  divideScalar: function(s) {\n    return this.divide(s);\n  },\n\n  /**\n   * @name Two.Vector#negate\n   * @function\n   * @description Invert each component's sign value.\n   */\n  negate: function() {\n    return this.multiply(-1);\n  },\n\n  /**\n   * @name Two.Vector#negate\n   * @function\n   * @returns {Number}\n   * @description Get the [dot product](https://en.wikipedia.org/wiki/Dot_product) of the vector.\n   */\n  dot: function(v) {\n    return this.x * v.x + this.y * v.y;\n  },\n\n  /**\n   * @name Two.Vector#length\n   * @function\n   * @returns {Number}\n   * @description Get the length of a vector.\n   */\n  length: function() {\n    return Math.sqrt(this.lengthSquared());\n  },\n\n  /**\n   * @name Two.Vector#lengthSquared\n   * @function\n   * @returns {Number}\n   * @description Get the length of the vector to the power of two. Widely used as less expensive than {@link Two.Vector#length}, because it isn't square-rooting any numbers.\n   */\n  lengthSquared: function() {\n    return this.x * this.x + this.y * this.y;\n  },\n\n  /**\n   * @name Two.Vector#normalize\n   * @function\n   * @description Normalize the vector from negative one to one.\n   */\n  normalize: function() {\n    return this.divideScalar(this.length());\n  },\n\n  /**\n   * @name Two.Vector#distanceTo\n   * @function\n   * @returns {Number}\n   * @description Get the distance between two vectors.\n   */\n  distanceTo: function(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  },\n\n  /**\n   * @name Two.Vector#distanceToSquared\n   * @function\n   * @returns {Number}\n   * @description Get the distance between two vectors to the power of two. Widely used as less expensive than {@link Two.Vector#distanceTo}, because it isn't square-rooting any numbers.\n   */\n  distanceToSquared: function(v) {\n    var dx = this.x - v.x,\n        dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  },\n\n  /**\n   * @name Two.Vector#setLength\n   * @function\n   * @param {Number} l - length to set vector to.\n   * @description Set the length of a vector.\n   */\n  setLength: function(l) {\n    return this.normalize().multiplyScalar(l);\n  },\n\n  /**\n   * @name Two.Vector#equals\n   * @function\n   * @param {Two.Vector} v - The vector to compare against.\n   * @param {Number} [eps=0.0001] - An options epsilon for precision.\n   * @returns {Boolean}\n   * @description Qualify if one vector roughly equal another. With a margin of error defined by epsilon.\n   */\n  equals: function(v, eps) {\n    eps = (typeof eps === 'undefined') ?  0.0001 : eps;\n    return (this.distanceTo(v) < eps);\n  },\n\n  /**\n   * @name Two.Vector#lerp\n   * @function\n   * @param {Two.Vector} v - The destination vector to step towards.\n   * @param {Number} t - The zero to one value of how close the current vector gets to the destination vector.\n   * @description Linear interpolate one vector to another by an amount `t` defined as a zero to one number.\n   * @see [Matt DesLauriers](https://twitter.com/mattdesl/status/1031305279227478016) has a good thread about this.\n   */\n  lerp: function(v, t) {\n    var x = (v.x - this.x) * t + this.x;\n    var y = (v.y - this.y) * t + this.y;\n    return this.set(x, y);\n  },\n\n  /**\n   * @name Two.Vector#isZero\n   * @function\n   * @param {Number} [eps=0.0001] - Optional precision amount to check against.\n   * @returns {Boolean}\n   * @description Check to see if vector is roughly zero, based on the `epsilon` precision value.\n   */\n  isZero: function(eps) {\n    eps = (typeof eps === 'undefined') ?  0.0001 : eps;\n    return (this.length() < eps);\n  },\n\n  /**\n   * @name Two.Vector#toString\n   * @function\n   * @returns {String}\n   * @description Return a comma-separated string of x, y value. Great for storing in a database.\n   */\n  toString: function() {\n    return this.x + ', ' + this.y;\n  },\n\n  /**\n   * @name Two.Vector#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the vector.\n   */\n  toObject: function() {\n    return { x: this.x, y: this.y };\n  },\n\n  /**\n   * @name Two.Vector#rotate\n   * @function\n   * @param {Radians} radians - The amoun to rotate the vector by.\n   * @description Rotate a vector.\n   */\n  rotate: function(radians) {\n    var cos = Math.cos(radians);\n    var sin = Math.sin(radians);\n    this.x = this.x * cos - this.y * sin;\n    this.y = this.x * sin + this.y * cos;\n    return this;\n  }\n\n});\n\n// The same set of prototypical functions, but using the underlying\n// getter or setter for `x` and `y` values. This set of functions\n// is used instead of the previously documented ones above when\n// Two.Vector#bind is invoked and there is event dispatching processed\n// on x / y property changes.\nvar BoundProto = {\n\n  constructor: Vector,\n\n  set: function(x, y) {\n    this._x = x;\n    this._y = y;\n    return this.trigger(Events.Types.change);\n  },\n\n  copy: function(v) {\n    this._x = v.x;\n    this._y = v.y;\n    return this.trigger(Events.Types.change);\n  },\n\n  clear: function() {\n    this._x = 0;\n    this._y = 0;\n    return this.trigger(Events.Types.change);\n  },\n\n  clone: function() {\n    return new Vector(this._x, this._y);\n  },\n\n  add: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this._x += x;\n        this._y += x;\n      }  else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this._x += x.x;\n        this._y += x.y;\n      }\n    } else {\n      this._x += x;\n      this._y += y;\n    }\n    return this.trigger(Events.Types.change);\n  },\n\n  sub: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this._x -= x;\n        this._y -= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this._x -= x.x;\n        this._y -= x.y;\n      }\n    } else {\n      this._x -= x;\n      this._y -= y;\n    }\n    return this.trigger(Events.Types.change);\n  },\n\n  multiply: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this._x *= x;\n        this._y *= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this._x *= x.x;\n        this._y *= x.y;\n      }\n    } else {\n      this._x *= x;\n      this._y *= y;\n    }\n    return this.trigger(Events.Types.change);\n  },\n\n  divide: function(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === 'number') {\n        this._x /= x;\n        this._y /= x;\n      } else if (x && typeof x.x === 'number' && typeof x.y === 'number') {\n        this._x /= x.x;\n        this._y /= x.y;\n      }\n    } else {\n      this._x /= x;\n      this._y /= y;\n    }\n    if (_.isNaN(this._x)) {\n      this._x = 0;\n    }\n    if (_.isNaN(this._y)) {\n      this._y = 0;\n    }\n    return this.trigger(Events.Types.change);\n  },\n\n  dot: function(v) {\n    return this._x * v.x + this._y * v.y;\n  },\n\n  lengthSquared: function() {\n    return this._x * this._x + this._y * this._y;\n  },\n\n  distanceToSquared: function(v) {\n    var dx = this._x - v.x,\n        dy = this._y - v.y;\n    return dx * dx + dy * dy;\n  },\n\n  lerp: function(v, t) {\n    var x = (v.x - this._x) * t + this._x;\n    var y = (v.y - this._y) * t + this._y;\n    return this.set(x, y);\n  },\n\n  toString: function() {\n    return this._x + ', ' + this._y;\n  },\n\n  toObject: function() {\n    return { x: this._x, y: this._y };\n  },\n\n  rotate: function (radians) {\n    var cos = Math.cos(radians);\n    var sin = Math.sin(radians);\n    this._x = this._x * cos - this._y * sin;\n    this._y = this._x * sin + this._y * cos;\n    return this;\n  }\n\n};\n\nvar xgs = {\n  enumerable: true,\n  get: function() {\n    return this._x;\n  },\n  set: function(v) {\n    this._x = v;\n    this.trigger(Events.Types.change, 'x');\n  }\n};\n\nvar ygs = {\n  enumerable: true,\n  get: function() {\n    return this._y;\n  },\n  set: function(v) {\n    this._y = v;\n    this.trigger(Events.Types.change, 'y');\n  }\n};\n\nVector.MakeObservable(Vector.prototype);\n\n/**\n * @class\n * @name Two.Anchor\n * @param {Number} [x=0] - The x position of the root anchor point.\n * @param {Number} [y=0] - The y position of the root anchor point.\n * @param {Number} [lx=0] - The x position of the left handle point.\n * @param {Number} [ly=0] - The y position of the left handle point.\n * @param {Number} [rx=0] - The x position of the right handle point.\n * @param {Number} [ry=0] - The y position of the right handle point.\n * @param {String} [command=Two.Commands.move] - The command to describe how to render. Applicable commands are {@link Two.Commands}\n * @extends Two.Vector\n * @description An object that holds 3 {@link Two.Vector}s, the anchor point and its corresponding handles: `left` and `right`. In order to properly describe the bezier curve about the point there is also a command property to describe what type of drawing should occur when Two.js renders the anchors.\n */\nvar Anchor = function(x, y, lx, ly, rx, ry, command) {\n\n  Vector.call(this, x, y);\n\n  this._broadcast = (function() {\n    this.trigger(Events.Types.change);\n  }).bind(this);\n\n  this._command = command || Commands.move;\n  this._relative = true;\n\n  var ilx = typeof lx === 'number';\n  var ily = typeof ly === 'number';\n  var irx = typeof rx === 'number';\n  var iry = typeof ry === 'number';\n\n  // Append the `controls` object only if control points are specified,\n  // keeping the Two.Anchor inline with a Two.Vector until it needs to\n  // evolve beyond those functions - e.g: a simple 2 component vector.\n  if (ilx || ily || irx || iry) {\n    Anchor.AppendCurveProperties(this);\n  }\n\n  if (ilx) {\n    this.controls.left.x = lx;\n  }\n  if (ily) {\n    this.controls.left.y = ly;\n  }\n  if (irx) {\n    this.controls.right.x = rx;\n  }\n  if (iry) {\n    this.controls.right.y = ry;\n  }\n\n};\n\n_.extend(Anchor, {\n\n  /**\n   * @name Two.Anchor.AppendCurveProperties\n   * @function\n   * @param {Two.Anchor} anchor - The instance to append the `control`object to.\n   * @description Adds the `controls` property as an object with `left` and `right` properties to access the bezier control handles that define how the curve is drawn. It also sets the `relative` property to `true` making vectors in the `controls` object relative to their corresponding root anchor point.\n   */\n  AppendCurveProperties: function(anchor) {\n\n    anchor.relative = true;\n\n    /**\n     * @name Two.Anchor#controls\n     * @property {Object} controls\n     * @description An plain object that holds the controls handles for a {@link Two.Anchor}.\n     */\n    anchor.controls = {};\n\n    /**\n     * @name Two.Anchor#controls#left\n     * @property {Two.Vector} left\n     * @description The \"left\" control point to define handles on a bezier curve.\n     */\n    anchor.controls.left = new Vector(0, 0);\n\n    /**\n     * @name Two.Anchor#controls#right\n     * @property {Two.Vector} right\n     * @description The \"left\" control point to define handles on a bezier curve.\n     */\n    anchor.controls.right = new Vector(0, 0);\n\n  },\n\n  /**\n   * @name Two.Anchor.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Anchor} to any object. Handy if you'd like to extend the {@link Two.Anchor} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    /**\n     * @name Two.Anchor#command\n     * @property {Two.Commands}\n     * @description A draw command associated with the anchor point.\n     */\n    Object.defineProperty(object, 'command', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._command;\n      },\n\n      set: function(c) {\n        this._command = c;\n        if (this._command === Commands.curve && !_.isObject(this.controls)) {\n          Anchor.AppendCurveProperties(this);\n        }\n        this.trigger(Events.Types.change);\n      }\n\n    });\n\n    /**\n     * @name Two.Anchor#relative\n     * @property {Boolean}\n     * @description A boolean to render control points relative to the root anchor point or in global coordinate-space to the rest of the scene.\n     */\n    Object.defineProperty(object, 'relative', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._relative;\n      },\n\n      set: function(b) {\n        if (this._relative != b) {\n          this._relative = !!b;\n          this.trigger(Events.Types.change);\n        }\n      }\n\n    });\n\n    _.extend(object, Vector.prototype, AnchorProto);\n\n    // Make it possible to bind and still have the Anchor specific\n    // inheritance from Two.Vector. In this case relying on `Two.Vector`\n    // to do much of the heavy event-listener binding / unbinding.\n    object.bind = object.on = function() {\n      var bound = this._bound;\n      Vector.prototype.bind.apply(this, arguments);\n      if (!bound) {\n        _.extend(this, AnchorProto);\n      }\n    };\n\n  }\n\n});\n\nvar AnchorProto = {\n\n  constructor: Anchor,\n\n  /**\n   * @name Two.Anchor#listen\n   * @function\n   * @description Convenience method used mainly by {@link Two.Path#vertices} to listen and propagate changes from control points up to their respective anchors and further if necessary.\n   */\n  listen: function() {\n\n    if (!_.isObject(this.controls)) {\n      Anchor.AppendCurveProperties(this);\n    }\n\n    this.controls.left.bind(Events.Types.change, this._broadcast);\n    this.controls.right.bind(Events.Types.change, this._broadcast);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Anchor#ignore\n   * @function\n   * @description Convenience method used mainly by {@link Two.Path#vertices} to ignore changes from a specific anchor's control points.\n   */\n  ignore: function() {\n\n    this.controls.left.unbind(Events.Types.change, this._broadcast);\n    this.controls.right.unbind(Events.Types.change, this._broadcast);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Anchor#copy\n   * @function\n   * @param {Two.Anchor} v - The anchor to apply values to.\n   * @description Copy the properties of one {@link Two.Anchor} onto another.\n   */\n  copy: function(v) {\n\n    this.x = v.x;\n    this.y = v.y;\n\n    if (typeof v.command === 'string') {\n      this.command = v.command;\n    }\n    if (_.isObject(v.controls)) {\n      if (!_.isObject(this.controls)) {\n        Anchor.AppendCurveProperties(this);\n      }\n      // TODO: Do we need to listen here?\n      this.controls.left.copy(v.controls.left);\n      this.controls.right.copy(v.controls.right);\n    }\n    if (typeof v.relative === 'boolean') {\n      this.relative = v.relative;\n    }\n\n    // TODO: Hack for `Two.Commands.arc`\n    if (this.command === Commands.arc) {\n      this.rx = v.rx;\n      this.ry = v.ry;\n      this.xAxisRotation = v.xAxisRotation;\n      this.largeArcFlag = v.largeArcFlag;\n      this.sweepFlag = v.sweepFlag;\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Anchor#clone\n   * @function\n   * @returns {Two.Anchor}\n   * @description Create a new {@link Two.Anchor}, set all its values to the current instance and return it for use.\n   */\n  clone: function() {\n\n    var controls = this.controls;\n\n    var clone = new Anchor(\n      this.x,\n      this.y,\n      controls && controls.left.x,\n      controls && controls.left.y,\n      controls && controls.right.x,\n      controls && controls.right.y,\n      this.command\n    );\n    clone.relative = this._relative;\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Anchor#toObject\n   * @function\n   * @returns {Object} - An object with properties filled out to mirror {@link Two.Anchor}.\n   * @description Create a JSON compatible plain object of the current instance. Intended for use with storing values in a database.\n   */\n  toObject: function() {\n    var o = {\n      x: this.x,\n      y: this.y\n    };\n    if (this._command) {\n      o.command = this._command;\n    }\n    if (this._relative) {\n      o.relative = this._relative;\n    }\n    if (this.controls) {\n      o.controls = {\n        left: this.controls.left.toObject(),\n        right: this.controls.right.toObject()\n      };\n    }\n    return o;\n  },\n\n  /**\n   * @name Two.Anchor#toString\n   * @function\n   * @returns {String} - A String with comma-separated values reflecting the various values on the current instance.\n   * @description Create a string form of the current instance. Intended for use with storing values in a database. This is lighter to store than the JSON compatible {@link Two.Anchor#toObject}.\n   */\n  toString: function() {\n    if (!this.controls) {\n      return [this._x, this._y].join(', ');\n    }\n    return [this._x, this._y, this.controls.left.x, this.controls.left.y,\n      this.controls.right.x, this.controls.right.y, this._command,\n      this._relative ? 1 : 0].join(', ');\n  }\n\n};\n\nAnchor.MakeObservable(Anchor.prototype);\n\n// Constants\n\nvar cos = Math.cos, sin = Math.sin, tan = Math.tan;\nvar array = [];\n\n/**\n * @name Two.Matrix\n * @class\n * @param {Number} [a=1] - The value for element at the first column and first row.\n * @param {Number} [b=0] - The value for element at the second column and first row.\n * @param {Number} [c=0] - The value for element at the third column and first row.\n * @param {Number} [d=0] - The value for element at the first column and second row.\n * @param {Number} [e=1] - The value for element at the second column and second row.\n * @param {Number} [f=0] - The value for element at the third column and second row.\n * @param {Number} [g=0] - The value for element at the first column and third row.\n * @param {Number} [h=0] - The value for element at the second column and third row.\n * @param {Number} [i=1] - The value for element at the third column and third row.\n * @description A class to store 3 x 3 transformation matrix information. In addition to storing data `Two.Matrix` has suped up methods for commonplace mathematical operations.\n * @nota-bene Order is based on how to construct transformation strings for the browser.\n */\nvar Matrix$1 = function(a, b, c, d, e, f) {\n\n  /**\n   * @name Two.Matrix#elements\n   * @property {Number[]} - The underlying data stored as an array.\n   */\n  this.elements = new NumArray(9);\n\n  var elements = a;\n  if (!Array.isArray(elements)) {\n    elements = Array.prototype.slice.call(arguments);\n  }\n\n  // initialize the elements with default values.\n  this.identity();\n\n  if (elements.length > 0) {\n    this.set(elements);\n  }\n\n};\n\nsetMatrix(Matrix$1);\n\n_.extend(Matrix$1, {\n\n  /**\n   * @name Two.Matrix.Identity\n   * @property {Number[]} - A stored reference to the default value of a 3 x 3 matrix.\n   */\n  Identity: [\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n  ],\n\n  /**\n   * @name Two.Matrix.Multiply\n   * @function\n   * @param {Two.Matrix} A\n   * @param {Two.Matrix} B\n   * @param {Two.Matrix} [C] - An optional matrix to apply the multiplication to.\n   * @returns {Two.Matrix} - If an optional `C` matrix isn't passed then a new one is created and returned.\n   * @description Multiply two matrices together and return the result.\n   */\n  Multiply: function(A, B, C) {\n\n    if (B.length <= 3) { // Multiply Vector\n\n      var x, y, z, e = A;\n\n      var a = B[0] || 0,\n          b = B[1] || 0,\n          c = B[2] || 0;\n\n      // Go down rows first\n      // a, d, g, b, e, h, c, f, i\n\n      x = e[0] * a + e[1] * b + e[2] * c;\n      y = e[3] * a + e[4] * b + e[5] * c;\n      z = e[6] * a + e[7] * b + e[8] * c;\n\n      return { x: x, y: y, z: z };\n\n    }\n\n    var A0 = A[0], A1 = A[1], A2 = A[2];\n    var A3 = A[3], A4 = A[4], A5 = A[5];\n    var A6 = A[6], A7 = A[7], A8 = A[8];\n\n    var B0 = B[0], B1 = B[1], B2 = B[2];\n    var B3 = B[3], B4 = B[4], B5 = B[5];\n    var B6 = B[6], B7 = B[7], B8 = B[8];\n\n    C = C || new NumArray(9);\n\n    C[0] = A0 * B0 + A1 * B3 + A2 * B6;\n    C[1] = A0 * B1 + A1 * B4 + A2 * B7;\n    C[2] = A0 * B2 + A1 * B5 + A2 * B8;\n    C[3] = A3 * B0 + A4 * B3 + A5 * B6;\n    C[4] = A3 * B1 + A4 * B4 + A5 * B7;\n    C[5] = A3 * B2 + A4 * B5 + A5 * B8;\n    C[6] = A6 * B0 + A7 * B3 + A8 * B6;\n    C[7] = A6 * B1 + A7 * B4 + A8 * B7;\n    C[8] = A6 * B2 + A7 * B5 + A8 * B8;\n\n    return C;\n\n  }\n\n});\n\n_.extend(Matrix$1.prototype, Events, {\n\n  constructor: Matrix$1,\n\n  /**\n   * @name Two.Matrix#manual\n   * @property {Boolean} - Determines whether Two.js automatically calculates the values for the matrix or if the developer intends to manage the matrix.\n   * @nota-bene - Setting to `true` nullifies {@link Two.Shape#translation}, {@link Two.Shape#rotation}, and {@link Two.Shape#scale}.\n   */\n  manual: false,\n\n  /**\n   * @name Two.Matrix#set\n   * @function\n   * @param {Number} a - The value for element at the first column and first row.\n   * @param {Number} b - The value for element at the second column and first row.\n   * @param {Number} c - The value for element at the third column and first row.\n   * @param {Number} d - The value for element at the first column and second row.\n   * @param {Number} e - The value for element at the second column and second row.\n   * @param {Number} f - The value for element at the third column and second row.\n   * @param {Number} g - The value for element at the first column and third row.\n   * @param {Number} h - The value for element at the second column and third row.\n   * @param {Number} i - The value for element at the third column and third row.\n   * @description Set an array of values onto the matrix. Order described in {@link Two.Matrix}.\n   */\n\n    /**\n    * @name Two.Matrix#set\n    * @function\n    * @param {Number[]} a - The array of elements to apply.\n    * @description Set an array of values onto the matrix. Order described in {@link Two.Matrix}.\n    */\n  set: function(a, b, c, d, e, f, g, h, i) {\n\n    var elements;\n\n    if (typeof b === 'undefined') {\n      elements = a;\n      a = elements[0];\n      b = elements[1];\n      c = elements[2];\n      d = elements[3];\n      e = elements[4];\n      f = elements[5];\n      g = elements[6];\n      h = elements[7];\n      i = elements[8];\n    }\n\n    this.elements[0] = a;\n    this.elements[1] = b;\n    this.elements[2] = c;\n    this.elements[3] = d;\n    this.elements[4] = e;\n    this.elements[5] = f;\n    this.elements[6] = g;\n    this.elements[7] = h;\n    this.elements[8] = i;\n\n    return this.trigger(Events.Types.change);\n\n  },\n\n  /**\n   * @name Two.Matrix#copy\n   * @function\n   * @description Copy the matrix of one to the current instance.\n   */\n  copy: function(m) {\n\n    this.elements[0] = m.elements[0];\n    this.elements[1] = m.elements[1];\n    this.elements[2] = m.elements[2];\n    this.elements[3] = m.elements[3];\n    this.elements[4] = m.elements[4];\n    this.elements[5] = m.elements[5];\n    this.elements[6] = m.elements[6];\n    this.elements[7] = m.elements[7];\n    this.elements[8] = m.elements[8];\n\n    this.manual = m.manual;\n\n    return this.trigger(Events.Types.change);\n\n  },\n\n  /**\n   * @name Two.Matrix#identity\n   * @function\n   * @description Turn matrix to the identity, like resetting.\n   */\n  identity: function() {\n\n    this.elements[0] = Matrix$1.Identity[0];\n    this.elements[1] = Matrix$1.Identity[1];\n    this.elements[2] = Matrix$1.Identity[2];\n    this.elements[3] = Matrix$1.Identity[3];\n    this.elements[4] = Matrix$1.Identity[4];\n    this.elements[5] = Matrix$1.Identity[5];\n    this.elements[6] = Matrix$1.Identity[6];\n    this.elements[7] = Matrix$1.Identity[7];\n    this.elements[8] = Matrix$1.Identity[8];\n\n    return this.trigger(Events.Types.change);\n\n  },\n\n  /**\n   * @name Two.Matrix#multiply\n   * @function\n   * @param {Number} a - The scalar to be multiplied.\n   * @description Multiply all components of the matrix against a single scalar value.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Matrix#multiply\n   * @function\n   * @param {Number} a - The x component to be multiplied.\n   * @param {Number} b - The y component to be multiplied.\n   * @param {Number} c - The z component to be multiplied.\n   * @description Multiply all components of a matrix against a 3 component vector.\n   * @overloaded\n   */\n\n  /**\n   * @name Two.Matrix#multiply\n   * @function\n   * @param {Number} a - The value at the first column and first row of the matrix to be multiplied.\n   * @param {Number} b - The value at the second column and first row of the matrix to be multiplied.\n   * @param {Number} c - The value at the third column and first row of the matrix to be multiplied.\n   * @param {Number} d - The value at the first column and second row of the matrix to be multiplied.\n   * @param {Number} e - The value at the second column and second row of the matrix to be multiplied.\n   * @param {Number} f - The value at the third column and second row of the matrix to be multiplied.\n   * @param {Number} g - The value at the first column and third row of the matrix to be multiplied.\n   * @param {Number} h - The value at the second column and third row of the matrix to be multiplied.\n   * @param {Number} i - The value at the third column and third row of the matrix to be multiplied.\n   * @description Multiply all components of a matrix against another matrix.\n   * @overloaded\n   */\n  multiply: function(a, b, c, d, e, f, g, h, i) {\n\n    // Multiply scalar\n\n    if (typeof b === 'undefined') {\n\n      this.elements[0] *= a;\n      this.elements[1] *= a;\n      this.elements[2] *= a;\n      this.elements[3] *= a;\n      this.elements[4] *= a;\n      this.elements[5] *= a;\n      this.elements[6] *= a;\n      this.elements[7] *= a;\n      this.elements[8] *= a;\n\n      return this.trigger(Events.Types.change);\n\n    }\n\n    if (typeof d === 'undefined') { // Multiply Vector\n\n      var x, y, z;\n      a = a || 0;\n      b = b || 0;\n      c = c || 0;\n      e = this.elements;\n\n      // Go down rows first\n      // a, d, g, b, e, h, c, f, i\n\n      x = e[0] * a + e[1] * b + e[2] * c;\n      y = e[3] * a + e[4] * b + e[5] * c;\n      z = e[6] * a + e[7] * b + e[8] * c;\n\n      return { x: x, y: y, z: z };\n\n    }\n\n    // Multiple matrix\n\n    var A = this.elements;\n    var B = [a, b, c, d, e, f, g, h, i];\n\n    var A0 = A[0], A1 = A[1], A2 = A[2];\n    var A3 = A[3], A4 = A[4], A5 = A[5];\n    var A6 = A[6], A7 = A[7], A8 = A[8];\n\n    var B0 = B[0], B1 = B[1], B2 = B[2];\n    var B3 = B[3], B4 = B[4], B5 = B[5];\n    var B6 = B[6], B7 = B[7], B8 = B[8];\n\n    this.elements[0] = A0 * B0 + A1 * B3 + A2 * B6;\n    this.elements[1] = A0 * B1 + A1 * B4 + A2 * B7;\n    this.elements[2] = A0 * B2 + A1 * B5 + A2 * B8;\n\n    this.elements[3] = A3 * B0 + A4 * B3 + A5 * B6;\n    this.elements[4] = A3 * B1 + A4 * B4 + A5 * B7;\n    this.elements[5] = A3 * B2 + A4 * B5 + A5 * B8;\n\n    this.elements[6] = A6 * B0 + A7 * B3 + A8 * B6;\n    this.elements[7] = A6 * B1 + A7 * B4 + A8 * B7;\n    this.elements[8] = A6 * B2 + A7 * B5 + A8 * B8;\n\n    return this.trigger(Events.Types.change);\n\n  },\n\n  /**\n   * @name Two.Matrix#inverse\n   * @function\n   * @param {Two.Matrix} [out] - The optional matrix to apply the inversion to.\n   * @description Return an inverted version of the matrix. If no optional one is passed a new matrix is created and returned.\n   */\n  inverse: function(out) {\n\n    var a = this.elements;\n    out = out || new Matrix$1();\n\n    var a00 = a[0], a01 = a[1], a02 = a[2];\n    var a10 = a[3], a11 = a[4], a12 = a[5];\n    var a20 = a[6], a21 = a[7], a22 = a[8];\n\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1.0 / det;\n\n    out.elements[0] = b01 * det;\n    out.elements[1] = (-a22 * a01 + a02 * a21) * det;\n    out.elements[2] = (a12 * a01 - a02 * a11) * det;\n    out.elements[3] = b11 * det;\n    out.elements[4] = (a22 * a00 - a02 * a20) * det;\n    out.elements[5] = (-a12 * a00 + a02 * a10) * det;\n    out.elements[6] = b21 * det;\n    out.elements[7] = (-a21 * a00 + a01 * a20) * det;\n    out.elements[8] = (a11 * a00 - a01 * a10) * det;\n\n    return out;\n\n  },\n\n  /**\n   * @name Two.Matrix#scale\n   * @function\n   * @param {Number} scale - The one dimensional scale to apply to the matrix.\n   * @description Uniformly scale the transformation matrix.\n   */\n\n  /**\n   * @name Two.Matrix#scale\n   * @function\n   * @param {Number} sx - The horizontal scale factor.\n   * @param {Number} sy - The vertical scale factor\n   * @description Scale the transformation matrix in two dimensions.\n   */\n  scale: function(sx, sy) {\n\n    var l = arguments.length;\n    if (l <= 1) {\n      sy = sx;\n    }\n\n    return this.multiply(sx, 0, 0, 0, sy, 0, 0, 0, 1);\n\n  },\n\n  /**\n   * @name Two.Matrix#rotate\n   * @function\n   * @param {Radians} radians - The amount to rotate in radians.\n   * @description Rotate the matrix.\n   */\n  rotate: function(radians) {\n\n    var c = cos(radians);\n    var s = sin(radians);\n\n    return this.multiply(c, -s, 0, s, c, 0, 0, 0, 1);\n\n  },\n\n  /**\n   * @name Two.Matrix#translate\n   * @function\n   * @param {Number} x - The horizontal translation value to apply.\n   * @param {Number} y - The vertical translation value to apply.\n   * @description Translate the matrix.\n   */\n  translate: function(x, y) {\n\n    return this.multiply(1, 0, x, 0, 1, y, 0, 0, 1);\n\n  },\n\n  /**\n   * @name Two.Matrix#skewX\n   * @function\n   * @param {Radians} radians - The amount to skew in radians.\n   * @description Skew the matrix by an angle in the x axis direction.\n   */\n  skewX: function(radians) {\n\n    var a = tan(radians);\n\n    return this.multiply(1, a, 0, 0, 1, 0, 0, 0, 1);\n\n  },\n\n  /**\n   * @name Two.Matrix#skewY\n   * @function\n   * @param {Radians} radians - The amount to skew in radians.\n   * @description Skew the matrix by an angle in the y axis direction.\n   */\n  skewY: function(radians) {\n\n    var a = tan(radians);\n\n    return this.multiply(1, 0, 0, a, 1, 0, 0, 0, 1);\n\n  },\n\n  /**\n   * @name Two.Matrix#toString\n   * @function\n   * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 for 2D transformations.\n   * @returns {String} - The transformation matrix as a 6 component string separated by spaces.\n   * @description Create a transform string. Used for the Two.js rendering APIs.\n   */\n  toString: function(fullMatrix) {\n\n    array.length = 0;\n    this.toTransformArray(fullMatrix, array);\n\n    return array.map(toFixed).join(' ');\n\n  },\n\n  /**\n   * @name Two.Matrix#toTransformArray\n   * @function\n   * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 in the format for 2D transformations.\n   * @param {Number[]} [output] - An array empty or otherwise to apply the values to.\n   * @description Create a transform array. Used for the Two.js rendering APIs.\n   */\n  toTransformArray: function(fullMatrix, output) {\n\n    var elements = this.elements;\n    var hasOutput = !!output;\n\n    var a = elements[0];\n    var b = elements[1];\n    var c = elements[2];\n    var d = elements[3];\n    var e = elements[4];\n    var f = elements[5];\n\n    if (fullMatrix) {\n\n      var g = elements[6];\n      var h = elements[7];\n      var i = elements[8];\n\n      if (hasOutput) {\n        output[0] = a;\n        output[1] = d;\n        output[2] = g;\n        output[3] = b;\n        output[4] = e;\n        output[5] = h;\n        output[6] = c;\n        output[7] = f;\n        output[8] = i;\n        return;\n      }\n\n      return [\n        a, d, g, b, e, h, c, f, i\n      ];\n    }\n\n    if (hasOutput) {\n      output[0] = a;\n      output[1] = d;\n      output[2] = b;\n      output[3] = e;\n      output[4] = c;\n      output[5] = f;\n      return;\n    }\n\n    return [\n      a, d, b, e, c, f  // Specific format see LN:19\n    ];\n\n  },\n\n  /**\n   * @name Two.Matrix#toArray\n   * @function\n   * @param {Boolean} [fullMatrix=false] - Return the full 9 elements of the matrix or just 6 for 2D transformations.\n   * @param {Number[]} [output] - An array empty or otherwise to apply the values to.\n   * @description Create a transform array. Used for the Two.js rendering APIs.\n   */\n  toArray: function(fullMatrix, output) {\n\n    var elements = this.elements;\n    var hasOutput = !!output;\n\n    var a = elements[0];\n    var b = elements[1];\n    var c = elements[2];\n    var d = elements[3];\n    var e = elements[4];\n    var f = elements[5];\n\n    if (fullMatrix) {\n\n      var g = elements[6];\n      var h = elements[7];\n      var i = elements[8];\n\n      if (hasOutput) {\n        output[0] = a;\n        output[1] = b;\n        output[2] = c;\n        output[3] = d;\n        output[4] = e;\n        output[5] = f;\n        output[6] = g;\n        output[7] = h;\n        output[8] = i;\n        return;\n      }\n\n      return [\n        a, b, c, d, e, f, g, h, i\n      ];\n    }\n\n    if (hasOutput) {\n      output[0] = a;\n      output[1] = b;\n      output[2] = c;\n      output[3] = d;\n      output[4] = e;\n      output[5] = f;\n      return;\n    }\n\n    return [\n      a, b, c, d, e, f\n    ];\n\n  },\n\n  /**\n   * @name Two.Matrix#toObject\n   * @function\n   * @description Create a JSON compatible object that represents information of the matrix.\n   */\n  toObject: function() {\n    return {\n      elements: this.toArray(true),\n      manual: !!this.manual\n    };\n  },\n\n  /**\n   * @name Two.Matrix#clone\n   * @function\n   * @description Clone the current matrix.\n   */\n  clone: function() {\n\n    return new Matrix$1().copy(this);\n\n  }\n\n});\n\nvar count = 0;\n\nvar Constants = {\n\n  /**\n   * @name Two.nextFrameID\n   * @property {Integer}\n   * @description The id of the next requestAnimationFrame function.\n   */\n  nextFrameID: null,\n\n  // Primitive\n\n  /**\n   * @name Two.Types\n   * @property {Object} - The different rendering types available in the library.\n   */\n  Types: {\n    webgl: 'WebGLRenderer',\n    svg: 'SVGRenderer',\n    canvas: 'CanvasRenderer'\n  },\n\n  /**\n   * @name Two.Version\n   * @property {String} - The current working version of the library.\n   */\n  Version: 'v0.7.1',\n\n  /**\n   * @name Two.PublishDate\n   * @property {String} - The automatically generated publish date in the build process to verify version release candidates.\n   */\n  PublishDate: '2021-01-13T01:57:28.198Z',\n\n  /**\n   * @name Two.Identifier\n   * @property {String} - String prefix for all Two.js object's ids. This trickles down to SVG ids.\n   */\n  Identifier: 'two-',\n\n  /**\n   * @name Two.Resolution\n   * @property {Number} - Default amount of vertices to be used for interpreting Arcs and ArcSegments.\n   */\n  Resolution: 12,\n\n  /**\n   * @name Two.AutoCalculateImportedMatrices\n   * @property {Boolean} - When importing SVGs through the {@link two#interpret} and {@link two#load}, this boolean determines whether Two.js infers and then overrides the exact transformation matrix of the reference SVG.\n   * @nota-bene `false` copies the exact transformation matrix values, but also sets the path's `matrix.manual = true`.\n   */\n  AutoCalculateImportedMatrices: true,\n\n  /**\n   * @name Two.Instances\n   * @property {Two[]} - Registered list of all Two.js instances in the current session.\n   */\n  Instances: [],\n\n  /**\n   * @function Two.uniqueId\n   * @description Simple method to access an incrementing value. Used for `id` allocation on all Two.js objects.\n   * @returns {Number} Ever increasing integer.\n   */\n  uniqueId: function() {\n    return count++;\n  }\n\n};\n\nvar HALF_PI = Math.PI / 2;\n\n/**\n * @name Utils.Curve\n * @property {Object} - Additional utility constant variables related to curve math and calculations.\n */\nvar Curve = {\n\n  CollinearityEpsilon: Math.pow(10, -30),\n\n  RecursionLimit: 16,\n\n  CuspLimit: 0,\n\n  Tolerance: {\n    distance: 0.25,\n    angle: 0,\n    epsilon: Number.EPSILON\n  },\n\n  // Lookup tables for abscissas and weights with values for n = 2 .. 16.\n  // As values are symmetric, only store half of them and adapt algorithm\n  // to factor in symmetry.\n  abscissas: [\n    [  0.5773502691896257645091488],\n    [0,0.7745966692414833770358531],\n    [  0.3399810435848562648026658,0.8611363115940525752239465],\n    [0,0.5384693101056830910363144,0.9061798459386639927976269],\n    [  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],\n    [0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],\n    [  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],\n    [0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],\n    [  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],\n    [0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],\n    [  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],\n    [0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],\n    [  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],\n    [0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],\n    [  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]\n  ],\n\n  weights: [\n    [1],\n    [0.8888888888888888888888889,0.5555555555555555555555556],\n    [0.6521451548625461426269361,0.3478548451374538573730639],\n    [0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],\n    [0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],\n    [0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],\n    [0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],\n    [0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],\n    [0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],\n    [0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],\n    [0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],\n    [0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],\n    [0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],\n    [0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],\n    [0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]\n  ]\n\n};\n\n/**\n * @name Utils.getComponentOnCubicBezier\n * @function\n * @param {Number} t - Zero-to-one value describing what percentage to calculate.\n * @param {Number} a - The firt point's component value.\n * @param {Number} b - The first point's bezier component value.\n * @param {Number} c - The second point's bezier component value.\n * @param {Number} d - The second point's component value.\n * @returns {Number} The coordinate value for a specific component along a cubic bezier curve by `t`.\n */\nvar getComponentOnCubicBezier = function(t, a, b, c, d) {\n  var k = 1 - t;\n  return (k * k * k * a) + (3 * k * k * t * b) + (3 * k * t * t * c) +\n      (t * t * t * d);\n};\n\n/**\n * @name Utils.subdivide\n * @function\n * @param {Number} x1 - x position of first anchor point.\n * @param {Number} y1 - y position of first anchor point.\n * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n * @param {Number} x4 - x position of second anchor point.\n * @param {Number} y4 - y position of second anchor point.\n * @param {Number} [limit=Utils.Curve.RecursionLimit] - The amount of vertices to create by subdividing.\n * @returns {Anchor[]} A list of anchor points ordered in between `x1`, `y1` and `x4`, `y4`\n * @description Given 2 points (a, b) and corresponding control point for each return an array of points that represent points plotted along the curve. The number of returned points is determined by `limit`.\n */\nvar subdivide = function(x1, y1, x2, y2, x3, y3, x4, y4, limit) {\n\n  limit = limit || Curve.RecursionLimit;\n  var amount = limit + 1;\n\n  // TODO: Abstract 0.001 to a limiting variable\n  // Don't recurse if the end points are identical\n  if (Math.abs(x1 - x4) < 0.001 && Math.abs(y1 - y4) < 0.001) {\n    return [new Anchor(x4, y4)];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < amount; i++) {\n    var t = i / amount;\n    var x = getComponentOnCubicBezier(t, x1, x2, x3, x4);\n    var y = getComponentOnCubicBezier(t, y1, y2, y3, y4);\n    result.push(new Anchor(x, y));\n  }\n\n  return result;\n\n};\n\n/**\n * @name Utils.getCurveLength\n * @function\n * @param {Number} x1 - x position of first anchor point.\n * @param {Number} y1 - y position of first anchor point.\n * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n * @param {Number} x4 - x position of second anchor point.\n * @param {Number} y4 - y position of second anchor point.\n * @param {Number} [limit=Utils.Curve.RecursionLimit] - The amount of vertices to create by subdividing.\n * @returns {Number} The length of a curve.\n * @description Given 2 points (a, b) and corresponding control point for each, return a float that represents the length of the curve using Gauss-Legendre algorithm. Limit iterations of calculation by `limit`.\n */\nvar getCurveLength = function(x1, y1, x2, y2, x3, y3, x4, y4, limit) {\n\n  // TODO: Better / fuzzier equality check\n  // Linear calculation\n  if (x1 === x2 && y1 === y2 && x3 === x4 && y3 === y4) {\n    var dx = x4 - x1;\n    var dy = y4 - y1;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // Calculate the coefficients of a Bezier derivative.\n  var ax = 9 * (x2 - x3) + 3 * (x4 - x1),\n    bx = 6 * (x1 + x3) - 12 * x2,\n    cx = 3 * (x2 - x1),\n\n    ay = 9 * (y2 - y3) + 3 * (y4 - y1),\n    by = 6 * (y1 + y3) - 12 * y2,\n    cy = 3 * (y2 - y1);\n\n  var integrand = function(t) {\n    // Calculate quadratic equations of derivatives for x and y\n    var dx = (ax * t + bx) * t + cx,\n      dy = (ay * t + by) * t + cy;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  return integrate(\n    integrand, 0, 1, limit || Curve.RecursionLimit\n  );\n\n};\n\n/**\n * @name Utils.getCurveBoundingBox\n * @function\n * @param {Number} x1 - x position of first anchor point.\n * @param {Number} y1 - y position of first anchor point.\n * @param {Number} x2 - x position of first anchor point's \"right\" bezier handle.\n * @param {Number} y2 - y position of first anchor point's \"right\" bezier handle.\n * @param {Number} x3 - x position of second anchor point's \"left\" bezier handle.\n * @param {Number} y3 - y position of second anchor point's \"left\" bezier handle.\n * @param {Number} x4 - x position of second anchor point.\n * @param {Number} y4 - y position of second anchor point.\n * @returns {Object} Object contains min and max `x` / `y` bounds.\n * @see {@link https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js#L856}\n */\nvar getCurveBoundingBox = function(x1, y1, x2, y2, x3, y3, x4, y4) {\n\n  var tvalues = [];\n  var bounds = [[], []];\n  var a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n  for (var i = 0; i < 2; ++i) {\n      if (i == 0) {\n        b = 6 * x1 - 12 * x2 + 6 * x3;\n        a = -3 * x1 + 9 * x2 - 9 * x3 + 3 * x4;\n        c = 3 * x2 - 3 * x1;\n      } else {\n        b = 6 * y1 - 12 * y2 + 6 * y3;\n        a = -3 * y1 + 9 * y2 - 9 * y3 + 3 * y4;\n        c = 3 * y2 - 3 * y1;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n  }\n\n  var j = tvalues.length;\n  var jlen = j;\n  var mt;\n\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x1 + 3 * mt * mt * t * x2 + 3 * mt * t * t * x3 + t * t * t * x4;\n    bounds[1][j] = mt * mt * mt * y1 + 3 * mt * mt * t * y2 + 3 * mt * t * t * y3 + t * t * t * y4;\n  }\n\n  bounds[0][jlen] = x1;\n  bounds[1][jlen] = y1;\n  bounds[0][jlen + 1] = x4;\n  bounds[1][jlen + 1] = y4;\n  bounds[0].length = bounds[1].length = jlen + 2;\n\n  return {\n    min: { x: Math.min.apply(0, bounds[0]), y: Math.min.apply(0, bounds[1]) },\n    max: { x: Math.max.apply(0, bounds[0]), y: Math.max.apply(0, bounds[1]) }\n  };\n\n};\n\n/**\n * @name Utils.integrate\n * @function\n * @param {Function} f\n * @param {Number} a\n * @param {Number} b\n * @param {Integer} n\n * @description Integration for `getCurveLength` calculations.\n * @see [Paper.js](@link https://github.com/paperjs/paper.js/blob/master/src/util/Numerical.js#L101)\n */\nvar integrate = function(f, a, b, n) {\n  var x = Curve.abscissas[n - 2],\n    w = Curve.weights[n - 2],\n    A = 0.5 * (b - a),\n    B = A + a,\n    i = 0,\n    m = (n + 1) >> 1,\n    sum = n & 1 ? w[i++] * f(B) : 0; // Handle odd n\n  while (i < m) {\n    var Ax = A * x[i];\n    sum += w[i++] * (f(B + Ax) + f(B - Ax));\n  }\n  return A * sum;\n};\n\n/**\n * @name Utils.getCurveFromPoints\n * @function\n * @param {Anchor[]} points\n * @param {Boolean} closed\n * @description Sets the bezier handles on {@link Anchor}s in the `points` list with estimated values to create a catmull-rom like curve. Used by {@link Two.Path#plot}.\n */\nvar getCurveFromPoints = function(points, closed) {\n\n  var l = points.length, last = l - 1;\n\n  for (var i = 0; i < l; i++) {\n\n    var point = points[i];\n\n    if (!_.isObject(point.controls)) {\n      Anchor.AppendCurveProperties(point);\n    }\n\n    var prev = closed ? mod(i - 1, l) : Math.max(i - 1, 0);\n    var next = closed ? mod(i + 1, l) : Math.min(i + 1, last);\n\n    var a = points[prev];\n    var b = point;\n    var c = points[next];\n    getControlPoints(a, b, c);\n\n    b.command = i === 0 ? Commands.move : Commands.curve;\n\n  }\n\n};\n\n/**\n * @name Utils.getControlPoints\n * @function\n * @param {Anchor} a\n * @param {Anchor} b\n * @param {Anchor} c\n * @returns {Anchor} Returns the passed middle point `b`.\n * @description Given three coordinates set the control points for the middle, b, vertex based on its position with the adjacent points.\n */\nvar getControlPoints = function(a, b, c) {\n\n  var a1 = Vector.angleBetween(a, b);\n  var a2 = Vector.angleBetween(c, b);\n\n  var d1 = Vector.distanceBetween(a, b);\n  var d2 = Vector.distanceBetween(c, b);\n\n  var mid = (a1 + a2) / 2;\n\n  // TODO: Issue 73\n  if (d1 < 0.0001 || d2 < 0.0001) {\n    if (typeof b.relative === 'boolean' && !b.relative) {\n      b.controls.left.copy(b);\n      b.controls.right.copy(b);\n    }\n    return b;\n  }\n\n  d1 *= 0.33; // Why 0.33?\n  d2 *= 0.33;\n\n  if (a2 < a1) {\n    mid += HALF_PI;\n  } else {\n    mid -= HALF_PI;\n  }\n\n  b.controls.left.x = Math.cos(mid) * d1;\n  b.controls.left.y = Math.sin(mid) * d1;\n\n  mid -= Math.PI;\n\n  b.controls.right.x = Math.cos(mid) * d2;\n  b.controls.right.y = Math.sin(mid) * d2;\n\n  if (typeof b.relative === 'boolean' && !b.relative) {\n    b.controls.left.x += b.x;\n    b.controls.left.y += b.y;\n    b.controls.right.x += b.x;\n    b.controls.right.y += b.y;\n  }\n\n  return b;\n\n};\n\n/**\n * @name Utils.getReflection\n * @function\n * @param {Vector} a\n * @param {Vector} b\n * @param {Boolean} [relative=false]\n * @returns {Vector} New {@link Vector} that represents the reflection point.\n * @description Get the reflection of a point `b` about point `a`. Where `a` is in absolute space and `b` is relative to `a`.\n * @see {@link http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes}\n */\nvar getReflection = function(a, b, relative) {\n\n  return new Vector(\n    2 * a.x - (b.x + a.x) - (relative ? a.x : 0),\n    2 * a.y - (b.y + a.y) - (relative ? a.y : 0)\n  );\n\n};\n\n/**\n * @name Utils.getAnchorsFromArcData\n * @function\n * @param {Vector} center\n * @param {Radians} xAxisRotation\n * @param {Number} rx - x radius\n * @param {Number} ry - y radius\n * @param {Radians} ts\n * @param {Radians} td\n * @param {Boolean} [ccw=false] - Set path traversal to counter-clockwise\n */\nvar getAnchorsFromArcData = function(center, xAxisRotation, rx, ry, ts, td, ccw) {\n\n  var matrix = new Matrix$1()\n    .translate(center.x, center.y)\n    .rotate(xAxisRotation);\n\n  var resolution = Constants.Resolution;\n\n  for (var i = 0; i < resolution; i++) {\n    var pct = (i + 1) / resolution;\n    if (ccw) {\n      pct = 1 - pct;\n    }\n\n    var theta = pct * td + ts;\n    var x = rx * Math.cos(theta);\n    var y = ry * Math.sin(theta);\n\n    // x += center.x;\n    // y += center.y;\n\n    var anchor = new Anchor(x, y);\n    Anchor.AppendCurveProperties(anchor);\n    anchor.command = Commands.line;\n  }\n\n};\n\nvar Curves = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Curve: Curve,\n  getComponentOnCubicBezier: getComponentOnCubicBezier,\n  subdivide: subdivide,\n  getCurveLength: getCurveLength,\n  getCurveBoundingBox: getCurveBoundingBox,\n  integrate: integrate,\n  getCurveFromPoints: getCurveFromPoints,\n  getControlPoints: getControlPoints,\n  getReflection: getReflection,\n  getAnchorsFromArcData: getAnchorsFromArcData\n});\n\nvar devicePixelRatio = root$1.devicePixelRatio || 1;\n\nvar getBackingStoreRatio = function(ctx) {\n  return ctx.webkitBackingStorePixelRatio ||\n  ctx.mozBackingStorePixelRatio ||\n  ctx.msBackingStorePixelRatio ||\n  ctx.oBackingStorePixelRatio ||\n  ctx.backingStorePixelRatio || 1;\n};\n\n/**\n * @name Utils.getRatio\n * @function\n * @param {CanvasRenderingContext2D} ctx\n * @returns {Number} The ratio of a unit in Two.js to the pixel density of a session's screen.\n * @see [High DPI Rendering](http://www.html5rocks.com/en/tutorials/canvas/hidpi/)\n */\nvar getRatio = function(ctx) {\n  return devicePixelRatio / getBackingStoreRatio(ctx);\n};\n\n/**\n * @name Utils.Collection\n * @class\n * @extends Utils.Events\n * @description An `Array` like object with additional event propagation on actions. `pop`, `shift`, and `splice` trigger `removed` events. `push`, `unshift`, and `splice` with more than 2 arguments trigger 'inserted'. Finally, `sort` and `reverse` trigger `order` events.\n */\nvar Collection = function() {\n\n  Array.call(this);\n\n  if (arguments.length > 1) {\n    Array.prototype.push.apply(this, arguments);\n  } else if (arguments[0] && Array.isArray(arguments[0])) {\n    Array.prototype.push.apply(this, arguments[0]);\n  }\n\n};\n\nCollection.prototype = new Array();\nCollection.prototype.constructor = Collection;\n\n_.extend(Collection.prototype, Events, {\n\n  pop: function() {\n    var popped = Array.prototype.pop.apply(this, arguments);\n    this.trigger(Events.Types.remove, [popped]);\n    return popped;\n  },\n\n  shift: function() {\n    var shifted = Array.prototype.shift.apply(this, arguments);\n    this.trigger(Events.Types.remove, [shifted]);\n    return shifted;\n  },\n\n  push: function() {\n    var pushed = Array.prototype.push.apply(this, arguments);\n    this.trigger(Events.Types.insert, arguments);\n    return pushed;\n  },\n\n  unshift: function() {\n    var unshifted = Array.prototype.unshift.apply(this, arguments);\n    this.trigger(Events.Types.insert, arguments);\n    return unshifted;\n  },\n\n  splice: function() {\n    var spliced = Array.prototype.splice.apply(this, arguments);\n    var inserted;\n\n    this.trigger(Events.Types.remove, spliced);\n\n    if (arguments.length > 2) {\n      inserted = this.slice(arguments[0], arguments[0] + arguments.length - 2);\n      this.trigger(Events.Types.insert, inserted);\n      this.trigger(Events.Types.order);\n    }\n    return spliced;\n  },\n\n  sort: function() {\n    Array.prototype.sort.apply(this, arguments);\n    this.trigger(Events.Types.order);\n    return this;\n  },\n\n  reverse: function() {\n    Array.prototype.reverse.apply(this, arguments);\n    this.trigger(Events.Types.order);\n    return this;\n  }\n\n});\n\n/**\n * @name Two.Shape\n * @class\n * @extends Events\n * @description The foundational transformation object for the Two.js scenegraph.\n */\nvar Shape = function() {\n\n  /**\n   * @name Two.Shape#_renderer\n   * @property {Object}\n   * @private\n   * @description A private object to store relevant renderer specific variables.\n   * @nota-bene With the {@link Two.SvgRenderer} you can access the underlying SVG element created via `shape._renderer.elem`.\n   */\n  this._renderer = {};\n  this._renderer.flagMatrix = Shape.FlagMatrix.bind(this);\n  this.isShape = true;\n\n  /**\n   * @name Two.Shape#id\n   * @property {String} - Session specific unique identifier.\n   * @nota-bene In the {@link Two.SvgRenderer} change this to change the underlying SVG element's id too.\n   */\n  this.id = Constants.Identifier + Constants.uniqueId();\n\n  /**\n   * @name Two.Shape#classList\n   * @property {String[]}\n   * @description A list of class strings stored if imported / interpreted  from an SVG element.\n   */\n  this.classList = [];\n\n  /**\n   * @name Two.Shape#matrix\n   * @property {Two.Matrix}\n   * @description The transformation matrix of the shape.\n   * @nota-bene {@link Two.Shape#translation}, {@link Two.Shape#rotation}, and {@link Two.Shape#scale} apply their values to the matrix when changed. The matrix is what is sent to the renderer to be drawn.\n   */\n  this.matrix = new Matrix$1();\n\n  /**\n   * @name Two.Shape#translation\n   * @property {Two.Vector} - The x and y value for where the shape is placed relative to its parent.\n   */\n  this.translation = new Vector();\n\n  /**\n   * @name Two.Shape#rotation\n   * @property {Radians} - The value in radians for how much the shape is rotated relative to its parent.\n   */\n  this.rotation = 0;\n\n  /**\n   * @name Two.Shape#scale\n   * @property {Number} - The value for how much the shape is scaled relative to its parent.\n   * @nota-bene This value can be replaced with a {@link Two.Vector} to do non-uniform scaling. e.g: `shape.scale = new Two.Vector(2, 1);`\n   */\n  this.scale = 1;\n\n};\n\n_.extend(Shape, {\n\n  /**\n   * @name Two.Shape.FlagMatrix\n   * @function\n   * @description Utility function used in conjunction with event handlers to update the flagMatrix of a shape.\n   */\n  FlagMatrix: function() {\n    this._flagMatrix = true;\n  },\n\n  /**\n   * @name Two.Shape.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Shape} to any object. Handy if you'd like to extend the {@link Two.Shape} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    var translation = {\n      enumerable: false,\n      get: function() {\n        return this._translation;\n      },\n      set: function(v) {\n        if (this._translation) {\n          this._translation.unbind(Events.Types.change, this._renderer.flagMatrix);\n        }\n        this._translation = v;\n        this._translation.bind(Events.Types.change, this._renderer.flagMatrix);\n        Shape.FlagMatrix.call(this);\n      }\n    };\n\n    Object.defineProperty(object, 'translation', translation);\n    Object.defineProperty(object, 'position', translation);\n\n    Object.defineProperty(object, 'rotation', {\n      enumerable: true,\n      get: function() {\n        return this._rotation;\n      },\n      set: function(v) {\n        this._rotation = v;\n        this._flagMatrix = true;\n      }\n    });\n\n    Object.defineProperty(object, 'scale', {\n      enumerable: true,\n      get: function() {\n        return this._scale;\n      },\n      set: function(v) {\n\n        if (this._scale instanceof Vector) {\n          this._scale.unbind(Events.Types.change, this._renderer.flagMatrix);\n        }\n\n        this._scale = v;\n\n        if (this._scale instanceof Vector) {\n          this._scale.bind(Events.Types.change, this._renderer.flagMatrix);\n        }\n\n        this._flagMatrix = true;\n        this._flagScale = true;\n\n      }\n    });\n\n    Object.defineProperty(object, 'matrix', {\n      enumerable: true,\n      get: function() {\n        return this._matrix;\n      },\n      set: function(v) {\n        this._matrix = v;\n        this._flagMatrix = true;\n      }\n    });\n\n    Object.defineProperty(object, 'className', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._className;\n      },\n\n      set: function(v) {\n\n        this._flagClassName = this._className !== v;\n\n        if (this._flagClassName) {\n\n          var prev = this._className.split(/\\s+?/);\n          var dest = v.split(/\\s+?/);\n\n          for (var i = 0; i < prev.length; i++) {\n            var className = prev[i];\n            var index = Array.prototype.indexOf.call(this.classList, className);\n            if (index >= 0) {\n              this.classList.splice(index, 1);\n            }\n          }\n\n          this.classList = this.classList.concat(dest);\n\n        }\n\n        this._className = v;\n\n      }\n\n    });\n\n  }\n\n});\n\n_.extend(Shape.prototype, Events, {\n\n  // Flags\n\n  /**\n   * @name Two.Shape#_flagMatrix\n   * @private\n   * @property {Boolean} - Determines whether the matrix needs updating.\n   */\n  _flagMatrix: true,\n\n  /**\n   * @name Two.Shape#_flagScale\n   * @private\n   * @property {Boolean} - Determines whether the scale needs updating.\n   */\n  _flagScale: false,\n\n  // _flagMask: false,\n  // _flagClip: false,\n\n  /**\n   * @name Two.Shape#_flagClassName\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#className} need updating.\n   */\n  _flagClassName: false,\n\n  // Underlying Properties\n\n  /**\n   * @name Two.Shape#_translation\n   * @private\n   * @property {Two.Vector} - The translation values as a {@link Two.Vector}.\n   */\n  _translation: null,\n\n  /**\n   * @name Two.Shape#_rotation\n   * @private\n   * @property {Radians} - The rotation value in radians.\n   */\n  _rotation: 0,\n\n  /**\n   * @name Two.Shape#_translation\n   * @private\n   * @property {Two.Vector} - The translation values as a {@link Two.Vector}.\n   */\n  _scale: 1,\n\n  // _mask: null,\n  // _clip: false,\n\n  /**\n   * @name Two.Shape#className\n   * @property {String} - A class to be applied to the element to be compatible with CSS styling.\n   * @nota-bene Only available for the SVG renderer.\n   */\n  _className: '',\n\n  constructor: Shape,\n\n  /**\n   * @name Two.Shape#addTo\n   * @function\n   * @param {Two.Group} group - The parent the shape adds itself to.\n   * @description Convenience method to add itself to the scenegraph.\n   */\n  addTo: function(group) {\n    group.add(this);\n    return this;\n  },\n\n  /**\n   * @name Two.Shape#clone\n   * @function\n   * @param {Two.Group} [parent] - Optional argument to automatically add the shape to a scenegraph.\n   * @returns {Two.Shape}\n   * @description Create a new {@link Two.Shape} with the same values as the current shape.\n   */\n  clone: function(parent) {\n\n    var clone = new Shape();\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone._update();\n\n  },\n\n  /**\n   * @name Two.Shape#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function(bubbles) {\n\n    if (!this._matrix.manual && this._flagMatrix) {\n\n      this._matrix\n        .identity()\n        .translate(this.translation.x, this.translation.y);\n\n        if (this._scale instanceof Vector) {\n          this._matrix.scale(this._scale.x, this._scale.y);\n        } else {\n          this._matrix.scale(this._scale);\n        }\n\n        this._matrix.rotate(this.rotation);\n\n    }\n\n    if (bubbles) {\n      if (this.parent && this.parent._update) {\n        this.parent._update();\n      }\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Shape#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagMatrix = this._flagScale = this._flagClassName = false;\n\n    return this;\n\n  }\n\n});\n\nShape.MakeObservable(Shape.prototype);\n\n/**\n * @class\n * @name Two.Group.Children\n * @extends Two.Utils.Collection\n * @description A children collection which is accesible both by index and by object `id`.\n */\nvar Children = function() {\n\n  Collection.apply(this, arguments);\n\n  Object.defineProperty(this, '_events', {\n    value : {},\n    enumerable: false\n  });\n\n  /**\n   * @name Two.Group.Children#ids\n   * @property {Object} - Map of all elements in the list keyed by `id`s.\n   */\n  this.ids = {};\n\n  this.on(Events.Types.insert, this.attach);\n  this.on(Events.Types.remove, this.detach);\n  Children.prototype.attach.apply(this, arguments);\n\n};\n\nChildren.prototype = new Collection();\n\n_.extend(Children.prototype, {\n\n  constructor: Children,\n\n  /**\n   * @function\n   * @name Two.Group.Children#attach\n   * @param {Two.Shape[]} children - The objects which extend {@link Two.Shape} to be added.\n   * @description Adds elements to the `ids` map.\n   */\n  attach: function(children) {\n    for (var i = 0; i < children.length; i++) {\n      this.ids[children[i].id] = children[i];\n    }\n    return this;\n  },\n\n  /**\n   * @function\n   * @name Two.Group.Children#detach\n   * @param {Two.Shape[]} children - The objects which extend {@link Two.Shape} to be removed.\n   * @description Removes elements to the `ids` map.\n   */\n  detach: function(children) {\n    for (var i = 0; i < children.length; i++) {\n      delete this.ids[children[i].id];\n    }\n    return this;\n  }\n\n});\n\n// Constants\n\nvar min = Math.min, max = Math.max;\n\n/**\n * @name Two.Group\n * @class\n * @extends Two.Shape\n * @param {Two.Shape[]} [children] - A list of objects that inherit {@link Two.Shape}. For instance, the array could be a {@link Two.Path}, {@link Two.Text}, and {@link Two.RoundedRectangle}.\n * @description This is the primary class for grouping objects that are then drawn in Two.js. In Illustrator this is a group, in After Effects it would be a Null Object. Whichever the case, the `Two.Group` contains a transformation matrix and commands to style its children, but it by itself doesn't render to the screen.\n * @nota-bene The {@link Two#scene} is an instance of `Two.Group`.\n */\nvar Group = function(children) {\n\n  Shape.call(this, true);\n\n  this._renderer.type = 'group';\n\n  /**\n   * @name Two.Group#additions\n   * @property {Two.Shape[]}\n   * @description An automatically updated list of children that need to be appended to the renderer's scenegraph.\n   */\n  this.additions = [];\n\n  /**\n   * @name Two.Group#subtractions\n   * @property {Two.Shape[]}\n   * @description An automatically updated list of children that need to be removed from the renderer's scenegraph.\n   */\n  this.subtractions = [];\n\n  /**\n   * @name Two.Group#additions\n   * @property {Two.Group.Children}\n   * @description A list of all the children in the scenegraph.\n   * @nota-bene Ther order of this list indicates the order each element is rendered to the screen.\n   */\n  this.children = Array.isArray(children) ? children : Array.prototype.slice.call(arguments);\n\n};\n\n_.extend(Group, {\n\n  Children: Children,\n\n  /**\n   * @name Two.Group.InsertChildren\n   * @function\n   * @param {Two.Shape[]} children - The objects to be inserted.\n   * @description Cached method to let renderers know children have been added to a {@link Two.Group}.\n   */\n  InsertChildren: function(children) {\n    for (var i = 0; i < children.length; i++) {\n      replaceParent.call(this, children[i], this);\n    }\n  },\n\n  /**\n   * @name Two.Group.RemoveChildren\n   * @function\n   * @param {Two.Shape[]} children - The objects to be removed.\n   * @description Cached method to let renderers know children have been removed from a {@link Two.Group}.\n   */\n  RemoveChildren: function(children) {\n    for (var i = 0; i < children.length; i++) {\n      replaceParent.call(this, children[i]);\n    }\n  },\n\n  /**\n   * @name Two.Group.OrderChildren\n   * @function\n   * @description Cached method to let renderers know order has been updated on a {@link Two.Group}.\n   */\n  OrderChildren: function(children) {\n    this._flagOrder = true;\n  },\n\n  /**\n   * @name Two.Group.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Group}.\n   */\n  Properties: [\n    'fill',\n    'stroke',\n    'linewidth',\n    'visible',\n    'cap',\n    'join',\n    'miter',\n\n    'closed',\n    'curved',\n    'automatic'\n  ],\n\n  /**\n   * @name Two.Group.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Group} to any object. Handy if you'd like to extend the {@link Two.Group} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    var properties = Group.Properties;\n\n    Object.defineProperty(object, 'opacity', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._opacity;\n      },\n\n      set: function(v) {\n        this._flagOpacity = this._opacity !== v;\n        this._opacity = v;\n      }\n\n    });\n\n    Object.defineProperty(object, 'beginning', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._beginning;\n      },\n\n      set: function(v) {\n        this._flagBeginning = this._beginning !== v;\n        this._beginning = v;\n      }\n\n    });\n\n    Object.defineProperty(object, 'ending', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._ending;\n      },\n\n      set: function(v) {\n        this._flagEnding = this._ending !== v;\n        this._ending = v;\n      }\n\n    });\n\n    Object.defineProperty(object, 'length', {\n\n      enumerable: true,\n\n      get: function() {\n        if (this._flagLength || this._length <= 0) {\n          this._length = 0;\n          if (!this.children) {\n            return this._length;\n          }\n          for (var i = 0; i < this.children.length; i++) {\n            var child = this.children[i];\n            this._length += child.length;\n          }\n        }\n        return this._length;\n      }\n\n    });\n\n    Shape.MakeObservable(object);\n    Group.MakeGetterSetters(object, properties);\n\n    Object.defineProperty(object, 'children', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._children;\n      },\n\n      set: function(children) {\n\n        var insertChildren = Group.InsertChildren.bind(this);\n        var removeChildren = Group.RemoveChildren.bind(this);\n        var orderChildren = Group.OrderChildren.bind(this);\n\n        if (this._children) {\n          this._children.unbind();\n        }\n\n        this._children = new Children(children);\n        this._children.bind(Events.Types.insert, insertChildren);\n        this._children.bind(Events.Types.remove, removeChildren);\n        this._children.bind(Events.Types.order, orderChildren);\n\n      }\n\n    });\n\n    Object.defineProperty(object, 'mask', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._mask;\n      },\n\n      set: function(v) {\n        this._mask = v;\n        this._flagMask = true;\n        if (!v.clip) {\n          v.clip = true;\n        }\n      }\n\n    });\n\n  },\n\n  /**\n   * @name Two.Group.MakeGetterSetters\n   * @function\n   * @param {Two.Group} group - The group to apply getters and setters.\n   * @param {Object} properties - A key / value object containing properties to inherit.\n   * @description Convenience method to apply getter / setter logic on an array of properties. Used in {@link Two.Group.MakeObservable}.\n   */\n  MakeGetterSetters: function(group, properties) {\n\n    if (!Array.isArray(properties)) {\n      properties = [properties];\n    }\n\n    _.each(properties, function(k) {\n      Group.MakeGetterSetter(group, k);\n    });\n\n  },\n\n  /**\n   * @name Two.Group.MakeGetterSetter\n   * @function\n   * @param {Two.Group} group - The group to apply getters and setters.\n   * @param {String} key - The key which will become a property on the group.\n   * @description Convenience method to apply getter / setter logic specific to how `Two.Group`s trickle down styles to their children. Used in {@link Two.Group.MakeObservable}.\n   */\n  MakeGetterSetter: function(group, key) {\n\n    var secret = '_' + key;\n\n    Object.defineProperty(group, key, {\n\n      enumerable: true,\n\n      get: function() {\n        return this[secret];\n      },\n\n      set: function(v) {\n        this[secret] = v;\n        // Trickle down styles\n        for (var i = 0; i < this.children.length; i++) {\n          var child = this.children[i];\n          child[key] = v;\n        }\n      }\n\n    });\n\n  }\n\n});\n\n_.extend(Group.prototype, Shape.prototype, {\n\n  // Flags\n  // http://en.wikipedia.org/wiki/Flag\n\n  /**\n   * @name Two.Group#_flagAdditions\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#additions} need updating.\n   */\n  _flagAdditions: false,\n\n  /**\n   * @name Two.Group#_flagSubtractions\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#subtractions} need updating.\n   */\n  _flagSubtractions: false,\n\n  /**\n   * @name Two.Group#_flagOrder\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#order} need updating.\n   */\n  _flagOrder: false,\n\n  /**\n   * @name Two.Group#_flagOpacity\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#opacity} need updating.\n   */\n  _flagOpacity: true,\n\n  /**\n   * @name Two.Group#_flagBeginning\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#beginning} need updating.\n   */\n  _flagBeginning: false,\n\n  /**\n   * @name Two.Group#_flagEnding\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#ending} need updating.\n   */\n  _flagEnding: false,\n\n  /**\n   * @name Two.Group#_flagLength\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#length} need updating.\n   */\n  _flagLength: false,\n\n  /**\n   * @name Two.Group#_flagMask\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Group#mask} need updating.\n   */\n  _flagMask: false,\n\n  // Underlying Properties\n\n  /**\n   * @name Two.Group#fill\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what all child shapes should be filled in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  _fill: '#fff',\n\n  /**\n   * @name Two.Group#stroke\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what all child shapes should be outlined in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  _stroke: '#000',\n\n  /**\n   * @name Two.Group#linewidth\n   * @property {Number} - The thickness in pixels of the stroke for all child shapes.\n   */\n  _linewidth: 1.0,\n\n  /**\n   * @name Two.Group#opacity\n   * @property {Number} - The opaqueness of all child shapes.\n   * @nota-bene Becomes multiplied by the individual child's opacity property.\n   */\n  _opacity: 1.0,\n\n  /**\n   * @name Two.Group#visible\n   * @property {Boolean} - Display the path or not.\n   * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n   */\n  _visible: true,\n\n  /**\n   * @name Two.Group#cap\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinecapProperty}\n   */\n  _cap: 'round',\n\n  /**\n   * @name Two.Group#join\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinejoinProperty}\n   */\n  _join: 'round',\n\n  /**\n   * @name Two.Group#miter\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeMiterlimitProperty}\n   */\n  _miter: 4,\n\n  /**\n   * @name Two.Group#closed\n   * @property {Boolean} - Determines whether a final line is drawn between the final point in the `vertices` array and the first point of all child shapes.\n   */\n  _closed: true,\n\n  /**\n   * @name Two.Group#curved\n   * @property {Boolean} - When the child's path is `automatic = true` this boolean determines whether the lines between the points are curved or not.\n   */\n  _curved: false,\n\n  /**\n   * @name Two.Group#automatic\n   * @property {Boolean} - Determines whether or not Two.js should calculate curves, lines, and commands automatically for you or to let the developer manipulate them for themselves.\n   */\n  _automatic: true,\n\n  /**\n   * @name Two.Group#beginning\n   * @property {Number} - Number between zero and one to state the beginning of where the path is rendered.\n   * @description {@link Two.Group#beginning} is a percentage value that represents at what percentage into all child shapes should the renderer start drawing.\n   * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Group#ending}.\n   */\n  _beginning: 0,\n\n  /**\n   * @name Two.Group#ending\n   * @property {Number} - Number between zero and one to state the ending of where the path is rendered.\n   * @description {@link Two.Group#ending} is a percentage value that represents at what percentage into all child shapes should the renderer start drawing.\n   * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Group#beginning}.\n   */\n  _ending: 1.0,\n\n  /**\n   * @name Two.Group#length\n   * @property {Number} - The sum of distances between all child lengths.\n   */\n  _length: 0,\n\n  /**\n   * @name Two.Group#mask\n   * @property {Two.Shape} - The Two.js object to clip from a group's rendering.\n   */\n  _mask: null,\n\n  constructor: Group,\n\n  /**\n   * @name Two.Group#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Group}\n   * @description Create a new instance of {@link Two.Group} with the same properties of the current group.\n   */\n  clone: function(parent) {\n\n    // /**\n    //  * TODO: Group has a gotcha in that it's at the moment required to be bound to\n    //  * an instance of two in order to add elements correctly. This needs to\n    //  * be rethought and fixed.\n    //  */\n\n    var clone = new Group();\n    var children = this.children.map(function(child) {\n      return child.clone();\n    });\n\n    clone.add(children);\n\n    clone.opacity = this.opacity;\n\n    if (this.mask) {\n      clone.mask = this.mask;\n    }\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.className = this.className;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone._update();\n\n  },\n\n  /**\n   * @name Two.Group#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the group.\n   */\n  toObject: function() {\n\n    var result = {\n      children: [],\n      translation: this.translation.toObject(),\n      rotation: this.rotation,\n      scale: this.scale instanceof Vector ? this.scale.toObject() : this.scale,\n      opacity: this.opacity,\n      className: this.className,\n      mask: (this.mask ? this.mask.toObject() : null)\n    };\n\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n\n    _.each(this.children, function(child, i) {\n      result.children[i] = child.toObject();\n    }, this);\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Group#corner\n   * @function\n   * @description Orient the children of the group to the upper left-hand corner of that group.\n   */\n  corner: function() {\n\n    var rect = this.getBoundingClientRect(true);\n    var corner = { x: rect.left, y: rect.top };\n\n    this.children.forEach(function(child) {\n      child.translation.sub(corner);\n    });\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Group#center\n   * @function\n   * @description Orient the children of the group to the center of that group.\n   */\n  center: function() {\n\n    var rect = this.getBoundingClientRect(true);\n\n    rect.centroid = {\n      x: rect.left + rect.width / 2 - this.translation.x,\n      y: rect.top + rect.height / 2 - this.translation.y\n    };\n\n    this.children.forEach(function(child) {\n      if (child.isShape) {\n        child.translation.sub(rect.centroid);\n      }\n    });\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Group#getById\n   * @function\n   * @description Recursively search for id. Returns the first element found.\n   * @returns {Two.Shape} - Or `null` if nothing is found.\n   */\n  getById: function (id) {\n    var found = null;\n    function search(node) {\n      if (node.id === id) {\n        return node;\n      } else if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          found = search(node.children[i]);\n          if (found) {\n            return found;\n          }\n        }\n      }\n      return null;\n    }\n    return search(this);\n  },\n\n  /**\n   * @name Two.Group#getByClassName\n   * @function\n   * @description Recursively search for classes. Returns an array of matching elements.\n   * @returns {Two.Shape[]} - Or empty array if nothing is found.\n   */\n  getByClassName: function(className) {\n    var found = [];\n    function search(node) {\n      if (Array.prototype.indexOf.call(node.classList, className) >= 0) {\n        found.push(node);\n      }\n      if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n          search(child);\n        }\n      }\n      return found;\n    }\n    return search(this);\n  },\n\n  /**\n   * @name Two.Group#getByType\n   * @function\n   * @description Recursively search for children of a specific type, e.g. {@link Two.Path}. Pass a reference to this type as the param. Returns an array of matching elements.\n   * @returns {Two.Shape[]} - Empty array if nothing is found.\n   */\n  getByType: function(type) {\n    var found = [];\n    function search(node) {\n      if (node instanceof type) {\n        found.push(node);\n      }\n      if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          var child = node.children[i];\n          search(child);\n        }\n      }\n      return found;\n    }\n    return search(this);\n  },\n\n  /**\n   * @name Two.Group#add\n   * @function\n   * @param {Two.Shape[]} objects - An array of objects to be added. Can be also be supplied as individual arguments.\n   * @description Add objects to the group.\n   */\n  add: function(objects) {\n\n    // Allow to pass multiple objects either as array or as multiple arguments\n    // If it's an array also create copy of it in case we're getting passed\n    // a childrens array directly.\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    } else {\n      objects = objects.slice();\n    }\n\n    // Add the objects\n    for (var i = 0; i < objects.length; i++) {\n      var child = objects[i];\n      if (!(child && child.id)) {\n        continue;\n      }\n      var index = Array.prototype.indexOf.call(this.children, child);\n      if (index >= 0) {\n        this.children.splice(index, 1);\n      }\n      this.children.push(child);\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Group#add\n   * @function\n   * @param {Two.Shape[]} objects - An array of objects to be removed. Can be also removed as individual arguments.\n   * @description Remove objects from the group.\n   */\n  remove: function(objects) {\n\n    var l = arguments.length,\n      grandparent = this.parent;\n\n    // Allow to call remove without arguments\n    // This will detach the object from its own parent.\n    if (l <= 0 && grandparent) {\n      grandparent.remove(this);\n      return this;\n    }\n\n    // Allow to pass multiple objects either as array or as multiple arguments\n    // If it's an array also create copy of it in case we're getting passed\n    // a childrens array directly.\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    } else {\n      objects = objects.slice();\n    }\n\n    // Remove the objects\n    for (var i = 0; i < objects.length; i++) {\n      if (!objects[i] || !(this.children.ids[objects[i].id])) continue;\n      this.children.splice(Array.prototype.indexOf.call(this.children, objects[i]), 1);\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Group#getBoundingClientRect\n   * @function\n   * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n   * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n   * @description Return an object with top, left, right, bottom, width, and height parameters of the group.\n   */\n  getBoundingClientRect: function(shallow) {\n    var rect;\n\n    // TODO: Update this to not __always__ update. Just when it needs to.\n    this._update(true);\n\n    // Variables need to be defined here, because of nested nature of groups.\n    var left = Infinity, right = -Infinity,\n        top = Infinity, bottom = -Infinity;\n\n    var regex = /texture|gradient/i;\n\n    for (var i = 0; i < this.children.length; i++) {\n\n      var child = this.children[i];\n\n      if (!child.visible || regex.test(child._renderer.type)) {\n        continue;\n      }\n\n      rect = child.getBoundingClientRect(shallow);\n\n      if (typeof rect.top !== 'number'   || typeof rect.left !== 'number' ||\n          typeof rect.right !== 'number' || typeof rect.bottom !== 'number') {\n        continue;\n      }\n\n      top = min(rect.top, top);\n      left = min(rect.left, left);\n      right = max(rect.right, right);\n      bottom = max(rect.bottom, bottom);\n\n    }\n\n    return {\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom,\n      width: right - left,\n      height: bottom - top\n    };\n\n  },\n\n  /**\n   * @name Two.Group#noFill\n   * @function\n   * @description Apply `noFill` method to all child shapes.\n   */\n  noFill: function() {\n    this.children.forEach(function(child) {\n      child.noFill();\n    });\n    return this;\n  },\n\n  /**\n   * @name Two.Group#noStroke\n   * @function\n   * @description Apply `noStroke` method to all child shapes.\n   */\n  noStroke: function() {\n    this.children.forEach(function(child) {\n      child.noStroke();\n    });\n    return this;\n  },\n\n  /**\n   * @name Two.Group#subdivide\n   * @function\n   * @description Apply `subdivide` method to all child shapes.\n   */\n  subdivide: function() {\n    var args = arguments;\n    this.children.forEach(function(child) {\n      child.subdivide.apply(child, args);\n    });\n    return this;\n  },\n\n  /**\n   * @name Two.Group#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagBeginning || this._flagEnding) {\n\n      var beginning = Math.min(this._beginning, this._ending);\n      var ending = Math.max(this._beginning, this._ending);\n      var length = this.length;\n      var sum = 0;\n\n      var bd = beginning * length;\n      var ed = ending * length;\n\n      for (var i = 0; i < this.children.length; i++) {\n\n        var child = this.children[i];\n        var l = child.length;\n\n        if (bd > sum + l) {\n          child.beginning = 1;\n          child.ending = 1;\n        } else if (ed < sum) {\n          child.beginning = 0;\n          child.ending = 0;\n        } else if (bd > sum && bd < sum + l) {\n          child.beginning = (bd - sum) / l;\n          child.ending = 1;\n        } else if (ed > sum && ed < sum + l) {\n          child.beginning = 0;\n          child.ending = (ed - sum) / l;\n        } else {\n          child.beginning = 0;\n          child.ending = 1;\n        }\n\n        sum += l;\n\n      }\n\n    }\n\n    return Shape.prototype._update.apply(this, arguments);\n\n  },\n\n  /**\n   * @name Two.Group#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    if (this._flagAdditions) {\n      this.additions.length = 0;\n      this._flagAdditions = false;\n    }\n\n    if (this._flagSubtractions) {\n      this.subtractions.length = 0;\n      this._flagSubtractions = false;\n    }\n\n    this._flagOrder = this._flagMask = this._flagOpacity =\n      this._flagBeginning = this._flagEnding = false;\n\n    Shape.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nGroup.MakeObservable(Group.prototype);\n\n// /**\n//  * Helper function used to sync parent-child relationship within the\n//  * `Two.Group.children` object.\n//  *\n//  * Set the parent of the passed object to another object\n//  * and updates parent-child relationships\n//  * Calling with one arguments will simply remove the parenting\n//  */\nfunction replaceParent(child, newParent) {\n\n  var parent = child.parent;\n  var index;\n\n  if (parent === newParent) {\n    add();\n    return;\n  }\n\n  if (parent && parent.children.ids[child.id]) {\n\n    index = Array.prototype.indexOf.call(parent.children, child);\n    parent.children.splice(index, 1);\n\n    splice();\n\n  }\n\n  if (newParent) {\n    add();\n    return;\n  }\n\n  splice();\n\n  if (parent._flagAdditions && parent.additions.length === 0) {\n    parent._flagAdditions = false;\n  }\n  if (parent._flagSubtractions && parent.subtractions.length === 0) {\n    parent._flagSubtractions = false;\n  }\n\n  delete child.parent;\n\n  function add() {\n\n    if (newParent.subtractions.length > 0) {\n      index = Array.prototype.indexOf.call(newParent.subtractions, child);\n\n      if (index >= 0) {\n        newParent.subtractions.splice(index, 1);\n      }\n    }\n\n    if (newParent.additions.length > 0) {\n      index = Array.prototype.indexOf.call(newParent.additions, child);\n\n      if (index >= 0) {\n        newParent.additions.splice(index, 1);\n      }\n    }\n\n    child.parent = newParent;\n    newParent.additions.push(child);\n    newParent._flagAdditions = true;\n\n  }\n\n  function splice() {\n\n    index = Array.prototype.indexOf.call(parent.additions, child);\n\n    if (index >= 0) {\n      parent.additions.splice(index, 1);\n    }\n\n    index = Array.prototype.indexOf.call(parent.subtractions, child);\n\n    if (index < 0) {\n      parent.subtractions.push(child);\n      parent._flagSubtractions = true;\n    }\n\n  }\n\n}\n\n// Constants\nvar emptyArray = [];\nvar TWO_PI = Math.PI * 2,\n  max$1 = Math.max,\n  min$1 = Math.min,\n  abs = Math.abs,\n  sin$1 = Math.sin,\n  cos$1 = Math.cos,\n  acos = Math.acos,\n  sqrt = Math.sqrt;\n\n// Returns true if this is a non-transforming matrix\nvar isDefaultMatrix = function (m) {\n  return (m[0] == 1 && m[3] == 0 && m[1] == 0 && m[4] == 1 && m[2] == 0 && m[5] == 0);\n};\n\nvar canvas = {\n\n  isHidden: /(undefined|none|transparent)/i,\n\n  alignments: {\n    left: 'start',\n    middle: 'center',\n    right: 'end'\n  },\n\n  shim: function(elem, name) {\n    elem.tagName = elem.nodeName = name || 'canvas';\n    elem.nodeType = 1;\n    elem.getAttribute = function(prop) {\n      return this[prop];\n    };\n    elem.setAttribute = function(prop, val) {\n      this[prop] = val;\n      return this;\n    };\n    return elem;\n  },\n\n  group: {\n\n    renderChild: function(child) {\n      canvas[child._renderer.type].render.call(child, this.ctx, true, this.clip);\n    },\n\n    render: function(ctx) {\n\n      // TODO: Add a check here to only invoke _update if need be.\n      this._update();\n\n      var matrix = this._matrix.elements;\n      var parent = this.parent;\n      this._renderer.opacity = this._opacity\n        * (parent && parent._renderer ? parent._renderer.opacity : 1);\n\n      var mask = this._mask;\n      // var clip = this._clip;\n\n      var defaultMatrix = isDefaultMatrix(matrix);\n      var shouldIsolate = !defaultMatrix || !!mask;\n\n      if (!this._renderer.context) {\n        this._renderer.context = {};\n      }\n\n      this._renderer.context.ctx = ctx;\n      // this._renderer.context.clip = clip;\n\n      if (shouldIsolate) {\n        ctx.save();\n        if (!defaultMatrix) {\n          ctx.transform(  matrix[0], matrix[3], matrix[1],\n            matrix[4], matrix[2], matrix[5]);\n        }\n      }\n\n      if (mask) {\n        canvas[mask._renderer.type].render.call(mask, ctx, true);\n      }\n\n      if (this.opacity > 0 && this.scale !== 0) {\n        for (var i = 0; i < this.children.length; i++) {\n          var child = this.children[i];\n          canvas[child._renderer.type].render.call(child, ctx);\n        }\n      }\n\n      if (shouldIsolate) {\n        ctx.restore();\n      }\n\n      // Commented two-way functionality of clips / masks with groups and\n      // polygons. Uncomment when this bug is fixed:\n      // https://code.google.com/p/chromium/issues/detail?id=370951\n\n      // if (clip) {\n      //   ctx.clip();\n      // }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  path: {\n\n    render: function(ctx, forced, parentClipped) {\n\n      var matrix, stroke, linewidth, fill, opacity, visible, cap, join, miter,\n          closed, commands, length, last, next, prev, a, b, c, d, ux, uy, vx, vy,\n          ar, bl, br, cl, x, y, clip, defaultMatrix, isOffset, dashes;\n\n      // TODO: Add a check here to only invoke _update if need be.\n      this._update();\n\n      matrix = this._matrix.elements;\n      stroke = this._stroke;\n      linewidth = this._linewidth;\n      fill = this._fill;\n      opacity = this._opacity * this.parent._renderer.opacity;\n      visible = this._visible;\n      cap = this._cap;\n      join = this._join;\n      miter = this._miter;\n      closed = this._closed;\n      commands = this._renderer.vertices; // Commands\n      length = commands.length;\n      last = length - 1;\n      defaultMatrix = isDefaultMatrix(matrix);\n      dashes = this.dashes;\n\n      // mask = this._mask;\n      clip = this._clip;\n\n      if (!forced && (!visible || clip)) {\n        return this;\n      }\n\n      // Transform\n      if (!defaultMatrix) {\n        ctx.save();\n        ctx.transform(matrix[0], matrix[3], matrix[1], matrix[4], matrix[2], matrix[5]);\n      }\n\n      // Commented two-way functionality of clips / masks with groups and\n      // polygons. Uncomment when this bug is fixed:\n      // https://code.google.com/p/chromium/issues/detail?id=370951\n\n      // if (mask) {\n      //   canvas[mask._renderer.type].render.call(mask, ctx, true);\n      // }\n\n      // Styles\n      if (fill) {\n        if (typeof fill === 'string') {\n          ctx.fillStyle = fill;\n        } else {\n          canvas[fill._renderer.type].render.call(fill, ctx);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === 'string') {\n          ctx.strokeStyle = stroke;\n        } else {\n          canvas[stroke._renderer.type].render.call(stroke, ctx);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n        if (miter) {\n          ctx.miterLimit = miter;\n        }\n        if (join) {\n          ctx.lineJoin = join;\n        }\n        if (!closed && cap) {\n          ctx.lineCap = cap;\n        }\n      }\n      if (typeof opacity === 'number') {\n        ctx.globalAlpha = opacity;\n      }\n\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n\n      ctx.beginPath();\n\n      for (var i = 0; i < commands.length; i++) {\n\n        b = commands[i];\n\n        x = b.x;\n        y = b.y;\n\n        switch (b.command) {\n\n          case Commands.close:\n            ctx.closePath();\n            break;\n\n          case Commands.arc:\n\n            var rx = b.rx;\n            var ry = b.ry;\n            var xAxisRotation = b.xAxisRotation;\n            var largeArcFlag = b.largeArcFlag;\n            var sweepFlag = b.sweepFlag;\n\n            prev = closed ? mod(i - 1, length) : max$1(i - 1, 0);\n            a = commands[prev];\n\n            var ax = a.x;\n            var ay = a.y;\n\n            canvas.renderSvgArcCommand(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y);\n            break;\n\n          case Commands.curve:\n\n            prev = closed ? mod(i - 1, length) : Math.max(i - 1, 0);\n            next = closed ? mod(i + 1, length) : Math.min(i + 1, last);\n\n            a = commands[prev];\n            c = commands[next];\n            ar = (a.controls && a.controls.right) || Vector.zero;\n            bl = (b.controls && b.controls.left) || Vector.zero;\n\n            if (a._relative) {\n              vx = (ar.x + a.x);\n              vy = (ar.y + a.y);\n            } else {\n              vx = ar.x;\n              vy = ar.y;\n            }\n\n            if (b._relative) {\n              ux = (bl.x + b.x);\n              uy = (bl.y + b.y);\n            } else {\n              ux = bl.x;\n              uy = bl.y;\n            }\n\n            ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n\n            if (i >= last && closed) {\n\n              c = d;\n\n              br = (b.controls && b.controls.right) || Vector.zero;\n              cl = (c.controls && c.controls.left) || Vector.zero;\n\n              if (b._relative) {\n                vx = (br.x + b.x);\n                vy = (br.y + b.y);\n              } else {\n                vx = br.x;\n                vy = br.y;\n              }\n\n              if (c._relative) {\n                ux = (cl.x + c.x);\n                uy = (cl.y + c.y);\n              } else {\n                ux = cl.x;\n                uy = cl.y;\n              }\n\n              x = c.x;\n              y = c.y;\n\n              ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n\n            }\n\n            break;\n\n          case Commands.line:\n            ctx.lineTo(x, y);\n            break;\n\n          case Commands.move:\n            d = b;\n            ctx.moveTo(x, y);\n            break;\n\n        }\n      }\n\n      // Loose ends\n\n      if (closed) {\n        ctx.closePath();\n      }\n\n      if (!clip && !parentClipped) {\n        if (!canvas.isHidden.test(fill)) {\n          isOffset = fill._renderer && fill._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(\n              - fill._renderer.offset.x, - fill._renderer.offset.y);\n            ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n          }\n          ctx.fill();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n        if (!canvas.isHidden.test(stroke)) {\n          isOffset = stroke._renderer && stroke._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(\n              - stroke._renderer.offset.x, - stroke._renderer.offset.y);\n            ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n            ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n          }\n          ctx.stroke();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n      }\n\n      if (!defaultMatrix) {\n        ctx.restore();\n      }\n\n      if (clip && !parentClipped) {\n        ctx.clip();\n      }\n\n      if (dashes && dashes.length > 0) {\n        ctx.setLineDash(emptyArray);\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  text: {\n\n    render: function(ctx, forced, parentClipped) {\n\n      // TODO: Add a check here to only invoke _update if need be.\n      this._update();\n\n      var matrix = this._matrix.elements;\n      var stroke = this._stroke;\n      var linewidth = this._linewidth;\n      var fill = this._fill;\n      var decoration = this._decoration;\n      var opacity = this._opacity * this.parent._renderer.opacity;\n      var visible = this._visible;\n      var defaultMatrix = isDefaultMatrix(matrix);\n      var isOffset = fill._renderer && fill._renderer.offset\n        && stroke._renderer && stroke._renderer.offset;\n      var dashes = this.dashes;\n      var alignment = canvas.alignments[this._alignment] || this._alignment;\n      var baseline = this._baseline;\n\n      var a, b, c, d, e, sx, sy, x1, y1, x2, y2;\n\n      // mask = this._mask;\n      var clip = this._clip;\n\n      if (!forced && (!visible || clip)) {\n        return this;\n      }\n\n      // Transform\n      if (!defaultMatrix) {\n        ctx.save();\n        ctx.transform(matrix[0], matrix[3], matrix[1], matrix[4], matrix[2], matrix[5]);\n      }\n\n      // Commented two-way functionality of clips / masks with groups and\n      // polygons. Uncomment when this bug is fixed:\n      // https://code.google.com/p/chromium/issues/detail?id=370951\n\n      // if (mask) {\n      //   canvas[mask._renderer.type].render.call(mask, ctx, true);\n      // }\n\n      if (!isOffset) {\n        ctx.font = [this._style, this._weight, this._size + 'px/' +\n          this._leading + 'px', this._family].join(' ');\n      }\n\n      ctx.textAlign = alignment;\n      ctx.textBaseline = baseline;\n\n      // Styles\n      if (fill) {\n        if (typeof fill === 'string') {\n          ctx.fillStyle = fill;\n        } else {\n          canvas[fill._renderer.type].render.call(fill, ctx);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === 'string') {\n          ctx.strokeStyle = stroke;\n        } else {\n          canvas[stroke._renderer.type].render.call(stroke, ctx);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n      }\n      if (typeof opacity === 'number') {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n\n      if (!clip && !parentClipped) {\n\n        if (!canvas.isHidden.test(fill)) {\n\n          if (fill._renderer && fill._renderer.offset) {\n\n            sx = fill._renderer.scale.x;\n            sy = fill._renderer.scale.y;\n\n            ctx.save();\n            ctx.translate( - fill._renderer.offset.x,\n              - fill._renderer.offset.y);\n            ctx.scale(sx, sy);\n\n            a = this._size / fill._renderer.scale.y;\n            b = this._leading / fill._renderer.scale.y;\n            ctx.font = [this._style, this._weight, a + 'px/',\n              b + 'px', this._family].join(' ');\n\n            c = fill._renderer.offset.x / fill._renderer.scale.x;\n            d = fill._renderer.offset.y / fill._renderer.scale.y;\n\n            ctx.fillText(this.value, c, d);\n            ctx.restore();\n\n          } else {\n            ctx.fillText(this.value, 0, 0);\n          }\n\n        }\n\n        if (!canvas.isHidden.test(stroke)) {\n\n          if (stroke._renderer && stroke._renderer.offset) {\n\n            sx = stroke._renderer.scale.x;\n            sy = stroke._renderer.scale.y;\n\n            ctx.save();\n            ctx.translate(- stroke._renderer.offset.x,\n              - stroke._renderer.offset.y);\n            ctx.scale(sx, sy);\n\n            a = this._size / stroke._renderer.scale.y;\n            b = this._leading / stroke._renderer.scale.y;\n            ctx.font = [this._style, this._weight, a + 'px/',\n              b + 'px', this._family].join(' ');\n\n            c = stroke._renderer.offset.x / stroke._renderer.scale.x;\n            d = stroke._renderer.offset.y / stroke._renderer.scale.y;\n            e = linewidth / stroke._renderer.scale.x;\n\n            ctx.lineWidth = e;\n            ctx.strokeText(this.value, c, d);\n            ctx.restore();\n\n          } else {\n            ctx.strokeText(this.value, 0, 0);\n          }\n        }\n      }\n\n      // Handle text-decoration\n      if (/(underline|strikethrough)/i.test(decoration)) {\n\n        var metrics = ctx.measureText(this.value);\n        var scalar = 1;\n\n        switch (decoration) {\n          case 'underline':\n            y1 = metrics.actualBoundingBoxAscent;\n            y2 = metrics.actualBoundingBoxAscent;\n            break;\n          case 'strikethrough':\n            y1 = 0;\n            y2 = 0;\n            scalar = 0.5;\n            break;\n        }\n\n        switch (baseline) {\n          case 'top':\n            y1 += this._size * scalar;\n            y2 += this._size * scalar;\n            break;\n          case 'baseline':\n          case 'bottom':\n            y1 -= this._size * scalar;\n            y2 -= this._size * scalar;\n            break;\n        }\n\n        switch (alignment) {\n          case 'left':\n          case 'start':\n            x1 = 0;\n            x2 = metrics.width;\n            break;\n          case 'right':\n          case 'end':\n            x1 = - metrics.width;\n            x2 = 0;\n            break;\n          default:\n            x1 = - metrics.width / 2;\n            x2 = metrics.width / 2;\n        }\n\n        ctx.lineWidth = Math.max(Math.floor(this._size / 15), 1);\n        ctx.strokeStyle = ctx.fillStyle;\n\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n\n      }\n\n      if (!defaultMatrix) {\n        ctx.restore();\n      }\n\n      // TODO: Test for text\n      if (clip && !parentClipped) {\n        ctx.clip();\n      }\n\n      if (dashes && dashes.length > 0) {\n        ctx.setLineDash(emptyArray);\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'linear-gradient': {\n\n    render: function(ctx) {\n\n      this._update();\n\n      if (!this._renderer.effect || this._flagEndPoints || this._flagStops) {\n\n        this._renderer.effect = ctx.createLinearGradient(\n          this.left._x, this.left._y,\n          this.right._x, this.right._y\n        );\n\n        for (var i = 0; i < this.stops.length; i++) {\n          var stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'radial-gradient': {\n\n    render: function(ctx) {\n\n      this._update();\n\n      if (!this._renderer.effect || this._flagCenter || this._flagFocal\n          || this._flagRadius || this._flagStops) {\n\n        this._renderer.effect = ctx.createRadialGradient(\n          this.center._x, this.center._y, 0,\n          this.focal._x, this.focal._y, this._radius\n        );\n\n        for (var i = 0; i < this.stops.length; i++) {\n          var stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  texture: {\n\n    render: function(ctx) {\n\n      this._update();\n\n      var image = this.image;\n\n      if (!this._renderer.effect || ((this._flagLoaded || this._flagImage || this._flagVideo || this._flagRepeat) && this.loaded)) {\n        this._renderer.effect = ctx.createPattern(this.image, this._repeat);\n      }\n\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n\n        if (!(this._renderer.offset instanceof Vector)) {\n          this._renderer.offset = new Vector();\n        }\n\n        this._renderer.offset.x = - this._offset.x;\n        this._renderer.offset.y = - this._offset.y;\n\n        if (image) {\n\n          this._renderer.offset.x += image.width / 2;\n          this._renderer.offset.y += image.height / 2;\n\n          if (this._scale instanceof Vector) {\n            this._renderer.offset.x *= this._scale.x;\n            this._renderer.offset.y *= this._scale.y;\n          } else {\n            this._renderer.offset.x *= this._scale;\n            this._renderer.offset.y *= this._scale;\n          }\n        }\n\n      }\n\n      if (this._flagScale || this._flagLoaded) {\n\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.copy(this._scale);\n        } else {\n          this._renderer.scale.set(this._scale, this._scale);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  renderSvgArcCommand: function(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y) {\n\n    xAxisRotation = xAxisRotation * Math.PI / 180;\n\n    // Ensure radii are positive\n    rx = abs(rx);\n    ry = abs(ry);\n\n    // Compute (x1′, y1′)\n    var dx2 = (ax - x) / 2.0;\n    var dy2 = (ay - y) / 2.0;\n    var x1p = cos$1(xAxisRotation) * dx2 + sin$1(xAxisRotation) * dy2;\n    var y1p = - sin$1(xAxisRotation) * dx2 + cos$1(xAxisRotation) * dy2;\n\n    // Compute (cx′, cy′)\n    var rxs = rx * rx;\n    var rys = ry * ry;\n    var x1ps = x1p * x1p;\n    var y1ps = y1p * y1p;\n\n    // Ensure radii are large enough\n    var cr = x1ps / rxs + y1ps / rys;\n\n    if (cr > 1) {\n\n      // scale up rx,ry equally so cr == 1\n      var s = sqrt(cr);\n      rx = s * rx;\n      ry = s * ry;\n      rxs = rx * rx;\n      rys = ry * ry;\n\n    }\n\n    var dq = (rxs * y1ps + rys * x1ps);\n    var pq = (rxs * rys - dq) / dq;\n    var q = sqrt(max$1(0, pq));\n    if (largeArcFlag === sweepFlag) q = - q;\n    var cxp = q * rx * y1p / ry;\n    var cyp = - q * ry * x1p / rx;\n\n    // Step 3: Compute (cx, cy) from (cx′, cy′)\n    var cx = cos$1(xAxisRotation) * cxp\n      - sin$1(xAxisRotation) * cyp + (ax + x) / 2;\n    var cy = sin$1(xAxisRotation) * cxp\n      + cos$1(xAxisRotation) * cyp + (ay + y) / 2;\n\n    // Step 4: Compute θ1 and Δθ\n    var startAngle = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n    var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry,\n      (- x1p - cxp) / rx, (- y1p - cyp) / ry) % TWO_PI;\n\n    var endAngle = startAngle + delta;\n\n    var clockwise = sweepFlag === 0;\n\n    renderArcEstimate(ctx, cx, cy, rx, ry, startAngle, endAngle,\n      clockwise, xAxisRotation);\n\n  }\n\n};\n\n/**\n * @name Two.CanvasRenderer\n * @class\n * @extends Two.Events\n * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n * @param {Element} [parameters.domElement] - The `<canvas />` to draw to. If none given a new one will be constructed.\n * @param {Boolean} [parameters.overdraw] - Determines whether the canvas should clear the background or not. Defaults to `true`.\n * @param {Boolean} [parameters.smoothing=true] - Determines whether the canvas should antialias drawing. Set it to `false` when working with pixel art. `false` can lead to better performance, since it would use a cheaper interpolation algorithm.\n * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.canvas`. It takes Two.js' scenegraph and renders it to a `<canvas />`.\n */\nvar Renderer = function(params) {\n\n  // It might not make a big difference on GPU backed canvases.\n  var smoothing = (params.smoothing !== false);\n\n  /**\n   * @name Two.CanvasRenderer#domElement\n   * @property {Element} - The `<canvas />` associated with the Two.js scene.\n   */\n  this.domElement = params.domElement || document.createElement('canvas');\n\n  /**\n   * @name Two.CanvasRenderer#ctx\n   * @property {Canvas2DContext} - Associated two dimensional context to render on the `<canvas />`.\n   */\n  this.ctx = this.domElement.getContext('2d');\n\n  /**\n   * @name Two.CanvasRenderer#overdraw\n   * @property {Boolean} - Determines whether the canvas clears the background each draw call.\n   * @default true\n   */\n  this.overdraw = params.overdraw || false;\n\n  if (typeof this.ctx.imageSmoothingEnabled !== 'undefined') {\n    this.ctx.imageSmoothingEnabled = smoothing;\n  }\n\n  /**\n   * @name Two.CanvasRenderer#scene\n   * @property {Two.Group} - The root group of the scenegraph.\n   */\n  this.scene = new Group();\n  this.scene.parent = this;\n};\n\n\n_.extend(Renderer, {\n\n  /**\n   * @name Two.CanvasRenderer.Utils\n   * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<canvas />`.\n   */\n  Utils: canvas\n\n});\n\n_.extend(Renderer.prototype, Events, {\n\n  constructor: Renderer,\n\n  /**\n   * @name Two.CanvasRenderer#setSize\n   * @function\n   * @fires resize\n   * @param {Number} width - The new width of the renderer.\n   * @param {Number} height - The new height of the renderer.\n   * @param {Number} [ratio] - The new pixel ratio (pixel density) of the renderer. Defaults to calculate the pixel density of the user's screen.\n   * @description Change the size of the renderer.\n   */\n  setSize: function(width, height, ratio) {\n\n    this.width = width;\n    this.height = height;\n\n    this.ratio = typeof ratio === 'undefined' ? getRatio(this.ctx) : ratio;\n\n    this.domElement.width = width * this.ratio;\n    this.domElement.height = height * this.ratio;\n\n    if (this.domElement.style) {\n      _.extend(this.domElement.style, {\n        width: width + 'px',\n        height: height + 'px'\n      });\n    }\n\n    return this.trigger(Events.Types.resize, width, height, ratio);\n\n  },\n\n  /**\n   * @name Two.CanvasRenderer#render\n   * @function\n   * @description Render the current scene to the `<canvas />`.\n   */\n  render: function() {\n\n    var isOne = this.ratio === 1;\n\n    if (!isOne) {\n      this.ctx.save();\n      this.ctx.scale(this.ratio, this.ratio);\n    }\n\n    if (!this.overdraw) {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n\n    canvas.group.render.call(this.scene, this.ctx);\n\n    if (!isOne) {\n      this.ctx.restore();\n    }\n\n    return this;\n\n  }\n\n});\n\nfunction renderArcEstimate(ctx, ox, oy, rx, ry, startAngle, endAngle, clockwise, xAxisRotation) {\n\n  var epsilon = Curve.Tolerance.epsilon;\n  var deltaAngle = endAngle - startAngle;\n  var samePoints = Math.abs(deltaAngle) < epsilon;\n\n  // ensures that deltaAngle is 0 .. 2 PI\n  deltaAngle = mod(deltaAngle, TWO_PI);\n\n  if (deltaAngle < epsilon) {\n\n    if (samePoints) {\n\n      deltaAngle = 0;\n\n    } else {\n\n      deltaAngle = TWO_PI;\n\n    }\n\n  }\n\n  if (clockwise === true && ! samePoints) {\n\n    if (deltaAngle === TWO_PI) {\n\n      deltaAngle = - TWO_PI;\n\n    } else {\n\n      deltaAngle = deltaAngle - TWO_PI;\n\n    }\n\n  }\n\n  for (var i = 0; i < Constants.Resolution; i++) {\n\n    var t = i / (Constants.Resolution - 1);\n\n    var angle = startAngle + t * deltaAngle;\n    var x = ox + rx * Math.cos(angle);\n    var y = oy + ry * Math.sin(angle);\n\n    if (xAxisRotation !== 0) {\n\n      var cos = Math.cos(xAxisRotation);\n      var sin = Math.sin(xAxisRotation);\n\n      var tx = x - ox;\n      var ty = y - oy;\n\n      // Rotate the point about the center of the ellipse.\n      x = tx * cos - ty * sin + ox;\n      y = tx * sin + ty * cos + oy;\n\n    }\n\n    ctx.lineTo(x, y);\n\n  }\n\n}\n\nfunction svgAngle(ux, uy, vx, vy) {\n\n  var dot = ux * vx + uy * vy;\n  var len = sqrt(ux * ux + uy * uy) *  sqrt(vx * vx + vy * vy);\n  // floating point precision, slightly over values appear\n  var ang = acos(max$1(-1, min$1(1, dot / len)));\n  if ((ux * vy - uy * vx) < 0) {\n    ang = - ang;\n  }\n\n  return ang;\n\n}\n\nvar CanvasShim = {\n\n  Image: null,\n\n  isHeadless: false,\n\n  /**\n   * @name Utils.shim\n   * @function\n   * @param {canvas} canvas - The instanced `Canvas` object provided by `node-canvas`.\n   * @param {Image} [Image] - The prototypical `Image` object provided by `node-canvas`. This is only necessary to pass if you're going to load bitmap imagery.\n   * @returns {canvas} Returns the instanced canvas object you passed from with additional attributes needed for Two.js.\n   * @description Convenience method for defining all the dependencies from the npm package `node-canvas`. See [node-canvas](https://github.com/Automattic/node-canvas) for additional information on setting up HTML5 `<canvas />` drawing in a node.js environment.\n   */\n  shim: function(canvas, Image) {\n    Renderer.Utils.shim(canvas);\n    if (typeof Image !== 'undefined') {\n      CanvasShim.Image = Image;\n    }\n    CanvasShim.isHeadless = true;\n    return canvas;\n  }\n\n};\n\nvar dom = {\n\n  temp: (root$1.document ? root$1.document.createElement('div') : {}),\n\n  hasEventListeners: typeof root$1.addEventListener === 'function',\n\n  bind: function(elem, event, func, bool) {\n    if (this.hasEventListeners) {\n      elem.addEventListener(event, func, !!bool);\n    } else {\n      elem.attachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  unbind: function(elem, event, func, bool) {\n    if (dom.hasEventListeners) {\n      elem.removeEventListeners(event, func, !!bool);\n    } else {\n      elem.detachEvent('on' + event, func);\n    }\n    return dom;\n  },\n\n  getRequestAnimationFrame: function() {\n\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    var request = root$1.requestAnimationFrame, cancel;\n\n    if(!request) {\n      for (var i = 0; i < vendors.length; i++) {\n        request = root$1[vendors[i] + 'RequestAnimationFrame'] || request;\n        cancel = root$1[vendors[i] + 'CancelAnimationFrame']\n          || root$1[vendors[i] + 'CancelRequestAnimationFrame'] || cancel;\n      }\n\n      request = request || function(callback, element) {\n        var currTime = new Date().getTime();\n        var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        var id = root$1.setTimeout(function() { callback(currTime + timeToCall); }, timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n      };\n    }\n\n    return request;\n\n  }\n\n};\n\n/**\n * @name Utils.Error\n * @class\n * @description Custom error throwing for Two.js specific identification.\n */\nvar TwoError = function(message) {\n  this.name = 'Two.js';\n  this.message = message;\n};\n\n\nTwoError.prototype = new Error();\nTwoError.prototype.constructor = TwoError;\n\n/**\n * @name Utils.defineGetterSetter\n * @function\n * @this Two#\n * @param {String} property - The property to add an enumerable getter / setter to.\n * @description Convenience function to setup the flag based getter / setter that most properties are defined as in Two.js.\n */\nvar defineGetterSetter = function(property) {\n\n  var object = this;\n  var secret = '_' + property;\n  var flag = '_flag' + property.charAt(0).toUpperCase() + property.slice(1);\n\n  Object.defineProperty(object, property, {\n    enumerable: true,\n    get: function() {\n      return this[secret];\n    },\n    set: function(v) {\n      this[secret] = v;\n      this[flag] = true;\n    }\n  });\n\n};\n\n/**\n * @name Two.Registry\n * @class\n * @description An arbitrary class to manage a directory of things. Mainly used for keeping tabs of textures in Two.js.\n */\nvar Registry = function() {\n\n  this.map = {};\n\n};\n\n_.extend(Registry.prototype, {\n\n  constructor: Registry,\n\n  /**\n   * @name Two.Registry#add\n   * @function\n   * @param {String} id - A unique identifier.\n   * @param value - Any type of variable to be registered to the directory.\n   * @description Adds any value to the directory. Assigned by the `id`.\n   */\n  add: function(id, obj) {\n    this.map[id] = obj;\n    return this;\n  },\n\n  /**\n   * @name Two.Registry#remove\n   * @function\n   * @param {String} id - A unique identifier.\n   * @description Remove any value from the directory by its `id`.\n   */\n  remove: function(id) {\n    delete this.map[id];\n    return this;\n  },\n\n  /**\n   * @name Two.Registry#get\n   * @function\n   * @param {String} id - A unique identifier.\n   * @returns The associated value. If unavailable then `undefined` is returned.\n   * @description Get a registered value by its `id`.\n   */\n  get: function(id) {\n    return this.map[id];\n  },\n\n  /**\n   * @name Two.Registry#contains\n   * @function\n   * @param {String} id - A unique identifier.\n   * @returns {Boolean}\n   * @description Convenience method to see if a value is registered to an `id` already.\n   */\n  contains: function(id) {\n    return id in this.map;\n  }\n\n});\n\n/**\n * @name Two.Stop\n * @class\n * @param {Number} [offset] - The offset percentage of the stop represented as a zero-to-one value. Default value flip flops from zero-to-one as new stops are created.\n * @param {CssColor} [color] - The color of the stop. Default value flip flops from white to black as new stops are created.\n * @param {Number} [opacity] - The opacity value. Default value is 1, cannot be lower than 0.\n * @nota-bene Used specifically in conjunction with {@link Two.Gradient}s to control color graduation.\n */\nvar Stop = function(offset, color, opacity) {\n\n  /**\n   * @name Two.Stop#_renderer\n   * @property {Object}\n   * @private\n   * @description A private object to store relevant renderer specific variables.\n   * @nota-bene With the {@link Two.SvgRenderer} you can access the underlying SVG element created via `stop._renderer.elem`.\n   */\n  this._renderer = {};\n  this._renderer.type = 'stop';\n\n  /**\n   * @name Two.Stop#offset\n   * @property {Number} - The offset percentage of the stop represented as a zero-to-one value.\n   */\n  this.offset = typeof offset === 'number' ? offset\n    : Stop.Index <= 0 ? 0 : 1;\n\n  /**\n   * @name Two.Stop#opacity\n   * @property {Number} - The alpha percentage of the stop represented as a zero-to-one value.\n   */\n  this.opacity = typeof opacity === 'number' ? opacity : 1;\n\n  /**\n   * @name Two.Stop#color\n   * @property {CssColor} - The color of the stop.\n   */\n  this.color = (typeof color === 'string') ? color\n    : Stop.Index <= 0 ? '#fff' : '#000';\n\n  Stop.Index = (Stop.Index + 1) % 2;\n\n};\n\n_.extend(Stop, {\n\n  /**\n   * @name Two.Stop.Index\n   * @property {Number} - The current index being referenced for calculating a stop's default offset value.\n   */\n  Index: 0,\n\n  /**\n   * @name Two.Stop.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Stop}.\n   */\n  Properties: [\n    'offset',\n    'opacity',\n    'color'\n  ],\n\n  /**\n   * @name Two.Stop.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Stop} to any object. Handy if you'd like to extend the {@link Two.Stop} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    _.each(Stop.Properties, function(property) {\n\n      var object = this;\n      var secret = '_' + property;\n      var flag = '_flag' + property.charAt(0).toUpperCase() + property.slice(1);\n\n      Object.defineProperty(object, property, {\n        enumerable: true,\n        get: function() {\n          return this[secret];\n        },\n        set: function(v) {\n          this[secret] = v;\n          this[flag] = true;\n          if (this.parent) {\n            this.parent._flagStops = true;\n          }\n        }\n      });\n\n    }, object);\n\n  }\n\n});\n\n_.extend(Stop.prototype, Events, {\n\n  constructor: Stop,\n\n  /**\n   * @name Two.Stop#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Stop}\n   * @description Create a new instance of {@link Two.Stop} with the same properties of the current path.\n   */\n  clone: function() {\n\n    var clone = new Stop();\n\n    _.each(Stop.Properties, function(property) {\n      clone[property] = this[property];\n    }, this);\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Stop#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var result = {};\n\n    _.each(Stop.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Stop#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagOffset = this._flagColor = this._flagOpacity = false;\n\n    return this;\n\n  }\n\n});\n\nStop.MakeObservable(Stop.prototype);\nStop.prototype.constructor = Stop;\n\n/**\n * @name Two.Gradient\n * @class\n * @param {Two.Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n * @description This is the base class for constructing different types of gradients with Two.js. The two common gradients are {@link Two.LinearGradient} and {@link Two.RadialGradient}.\n */\nvar Gradient = function(stops) {\n\n  /**\n   * @name Two.Gradient#_renderer\n   * @property {Object}\n   * @private\n   * @description A private object to store relevant renderer specific variables.\n   * @nota-bene With the {@link Two.SvgRenderer} you can access the underlying SVG element created via `gradient._renderer.elem`.\n   */\n  this._renderer = {};\n  this._renderer.type = 'gradient';\n\n  /**\n   * @name Two.Gradient#id\n   * @property {String} - Session specific unique identifier.\n   * @nota-bene In the {@link Two.SvgRenderer} change this to change the underlying SVG element's id too.\n   */\n  this.id = Constants.Identifier + Constants.uniqueId();\n  this.classList = [];\n\n  this._renderer.flagStops = Gradient.FlagStops.bind(this);\n  this._renderer.bindStops = Gradient.BindStops.bind(this);\n  this._renderer.unbindStops = Gradient.UnbindStops.bind(this);\n\n  /**\n   * @name Two.Gradient#spread\n   * @property {String} - Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle. Possible values are `'pad'`, `'reflect'`, and `'repeat'`.\n   * @see {@link https://www.w3.org/TR/SVG11/pservers.html#LinearGradientElementSpreadMethodAttribute} for more information\n   */\n  this.spread = 'pad';\n\n  /**\n   * @name Two.Gradient#stops\n   * @property {Two.Stop[]} - An ordered list of {@link Two.Stop}s for rendering the gradient.\n   */\n  this.stops = stops;\n\n};\n\n_.extend(Gradient, {\n\n  /**\n   * @name Two.Gradient#Stop\n   * @see {@link Two.Stop}\n   */\n  Stop: Stop,\n\n  /**\n   * @name Two.Gradient.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Gradient}.\n   */\n  Properties: [\n    'spread'\n  ],\n\n  /**\n   * @name Two.Gradient.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Gradient} to any object. Handy if you'd like to extend the {@link Two.Gradient} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    _.each(Gradient.Properties, defineGetterSetter, object);\n\n    Object.defineProperty(object, 'stops', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._stops;\n      },\n\n      set: function(stops) {\n\n        var updateStops = this._renderer.flagStops;\n        var bindStops = this._renderer.bindStops;\n        var unbindStops = this._renderer.unbindStops;\n\n        // Remove previous listeners\n        if (this._stops) {\n          this._stops\n            .unbind(Events.Types.insert, bindStops)\n            .unbind(Events.Types.remove, unbindStops);\n        }\n\n        // Create new Collection with copy of Stops\n        this._stops = new Collection((stops || []).slice(0));\n\n        // Listen for Collection changes and bind / unbind\n        this._stops\n          .bind(Events.Types.insert, bindStops)\n          .bind(Events.Types.remove, unbindStops);\n\n        // Bind Initial Stops\n        bindStops(this._stops);\n\n      }\n\n    });\n\n  },\n\n  /**\n   * @name Two.Gradient.FlagStops\n   * @function\n   * @description Cached method to let renderers know stops have been updated on a {@link Two.Gradient}.\n   */\n  FlagStops: function() {\n    this._flagStops = true;\n  },\n\n  /**\n   * @name Two.Gradient.BindVertices\n   * @function\n   * @description Cached method to let {@link Two.Gradient} know vertices have been added to the instance.\n   */\n  BindStops: function(items) {\n\n    // This function is called a lot\n    // when importing a large SVG\n    var i = items.length;\n    while(i--) {\n      items[i].bind(Events.Types.change, this._renderer.flagStops);\n      items[i].parent = this;\n    }\n\n    this._renderer.flagStops();\n\n  },\n\n  /**\n   * @name Two.Gradient.UnbindStops\n   * @function\n   * @description Cached method to let {@link Two.Gradient} know vertices have been removed from the instance.\n   */\n  UnbindStops: function(items) {\n\n    var i = items.length;\n    while(i--) {\n      items[i].unbind(Events.Types.change, this._renderer.flagStops);\n      delete items[i].parent;\n    }\n\n    this._renderer.flagStops();\n\n  }\n\n});\n\n_.extend(Gradient.prototype, Events, {\n\n  /**\n   * @name Two.Gradient#_flagStops\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Gradient#stops} need updating.\n   */\n  _flagStops: false,\n  /**\n   * @name Two.Gradient#_flagSpread\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Gradient#spread} need updating.\n   */\n  _flagSpread: false,\n\n  /**\n   * @name Two.Gradient#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Gradient}\n   * @description Create a new instance of {@link Two.Gradient} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var stops = this.stops.map(function(s) {\n      return s.clone();\n    });\n\n    var clone = new Gradient(stops);\n\n    _.each(Gradient.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Gradient#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var result = {\n      stops: this.stops.map(function(s) {\n        return s.toObject();\n      })\n    };\n\n    _.each(Gradient.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Gradient#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Gradient#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagSpread = this._flagStops = false;\n\n    return this;\n\n  }\n\n});\n\nGradient.MakeObservable(Gradient.prototype);\n\n/**\n * @name Two.LinearGradient\n * @class\n * @extends Two.Gradient\n * @param {Number} [x1=0] - The x position of the first end point of the linear gradient.\n * @param {Number} [y1=0] - The y position of the first end point of the linear gradient.\n * @param {Number} [x2=0] - The x position of the second end point of the linear gradient.\n * @param {Number} [y2=0] - The y position of the second end point of the linear gradient.\n * @param {Two.Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n * @nota-bene The linear gradient lives within the space of the parent object's matrix space.\n */\nvar LinearGradient = function(x1, y1, x2, y2, stops) {\n\n  Gradient.call(this, stops);\n\n  this._renderer.type = 'linear-gradient';\n\n  var flagEndPoints = LinearGradient.FlagEndPoints.bind(this);\n\n  /**\n   * @name Two.LinearGradient#left\n   * @property {Two.Vector} - The x and y value for where the first end point is placed on the canvas.\n   */\n  this.left = new Vector().bind(Events.Types.change, flagEndPoints);\n  /**\n   * @name Two.LinearGradient#right\n   * @property {Two.Vector} - The x and y value for where the second end point is placed on the canvas.\n   */\n  this.right = new Vector().bind(Events.Types.change, flagEndPoints);\n\n  if (typeof x1 === 'number') {\n    this.left.x = x1;\n  }\n  if (typeof y1 === 'number') {\n    this.left.y = y1;\n  }\n  if (typeof x2 === 'number') {\n    this.right.x = x2;\n  }\n  if (typeof y2 === 'number') {\n    this.right.y = y2;\n  }\n\n};\n\n_.extend(LinearGradient, {\n\n  /**\n   * @name Two.LinearGradient#Stop\n   * @see {@link Two.Stop}\n   */\n  Stop: Stop,\n\n  /**\n   * @name Two.LinearGradient.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.LinearGradient} to any object. Handy if you'd like to extend the {@link Two.LinearGradient} class on a custom class.\n   */\n  MakeObservable: function(object) {\n    Gradient.MakeObservable(object);\n  },\n\n  /**\n   * @name Two.LinearGradient.FlagEndPoints\n   * @function\n   * @description Cached method to let renderers know end points have been updated on a {@link Two.LinearGradient}.\n   */\n  FlagEndPoints: function() {\n    this._flagEndPoints = true;\n  }\n\n});\n\n_.extend(LinearGradient.prototype, Gradient.prototype, {\n\n  /**\n   * @name Two.LinearGradient#_flagEndPoints\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.LinearGradient#left} or {@link Two.LinearGradient#right} changed and needs to update.\n   */\n  _flagEndPoints: false,\n\n  constructor: LinearGradient,\n\n  /**\n   * @name Two.LinearGradient#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Gradient}\n   * @description Create a new instance of {@link Two.LinearGradient} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var stops = this.stops.map(function(stop) {\n      return stop.clone();\n    });\n\n    var clone = new LinearGradient(this.left._x, this.left._y,\n      this.right._x, this.right._y, stops);\n\n    _.each(Gradient.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.LinearGradient#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var result = Gradient.prototype.toObject.call(this);\n\n    result.left = this.left.toObject();\n    result.right = this.right.toObject();\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.LinearGradient#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagEndPoints || this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.LinearGradient#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagEndPoints = false;\n\n    Gradient.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nLinearGradient.MakeObservable(LinearGradient.prototype);\n\n/**\n * @name Two.RadialGradient\n * @class\n * @extends Two.Gradient\n * @param {Number} [x=0] - The x position of the origin of the radial gradient.\n * @param {Number} [y=0] - The y position of the origin of the radial gradient.\n * @param {Number} [radius=0] - The radius of the radial gradient.\n * @param {Two.Stop[]} [stops] - A list of {@link Two.Stop}s that contain the gradient fill pattern for the gradient.\n * @param {Number} [focalX=0] - The x position of the focal point on the radial gradient.\n * @param {Number} [focalY=0] - The y position of the focal point on the radial gradient.\n * @nota-bene The radial gradient lives within the space of the parent object's matrix space.\n */\nvar RadialGradient = function(cx, cy, r, stops, fx, fy) {\n\n  Gradient.call(this, stops);\n\n  this._renderer.type = 'radial-gradient';\n\n  /**\n   * @name Two.RadialGradient#center\n   * @property {Two.Vector} - The x and y value for where the origin of the radial gradient is.\n   */\n  this.center = new Vector()\n    .bind(Events.Types.change, (function() {\n      this._flagCenter = true;\n    }).bind(this));\n\n  this.radius = typeof r === 'number' ? r : 20;\n\n  /**\n   * @name Two.RadialGradient#focal\n   * @property {Two.Vector} - The x and y value for where the focal point of the radial gradient is.\n   * @nota-bene This effects the spray or spread of the radial gradient.\n   */\n  this.focal = new Vector()\n    .bind(Events.Types.change, (function() {\n      this._flagFocal = true;\n    }).bind(this));\n\n  if (typeof cx === 'number') {\n    this.center.x = cx;\n  }\n  if (typeof cy === 'number') {\n    this.center.y = cy;\n  }\n\n  this.focal.copy(this.center);\n\n  if (typeof fx === 'number') {\n    this.focal.x = fx;\n  }\n  if (typeof fy === 'number') {\n    this.focal.y = fy;\n  }\n\n};\n\n_.extend(RadialGradient, {\n\n  /**\n   * @name Two.RadialGradient#Stop\n   * @see {@link Two.Stop}\n   */\n  Stop: Stop,\n\n  /**\n   * @name Two.RadialGradient.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.RadialGradient}.\n   */\n  Properties: [\n    'radius'\n  ],\n\n  /**\n   * @name Two.RadialGradient.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.RadialGradient} to any object. Handy if you'd like to extend the {@link Two.RadialGradient} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    Gradient.MakeObservable(object);\n\n    _.each(RadialGradient.Properties, defineGetterSetter, object);\n\n  }\n\n});\n\n_.extend(RadialGradient.prototype, Gradient.prototype, {\n\n  /**\n   * @name Two.RadialGradient#_flagRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RadialGradient#radius} changed and needs to update.\n   */\n  _flagRadius: false,\n  /**\n   * @name Two.RadialGradient#_flagCenter\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RadialGradient#center} changed and needs to update.\n   */\n  _flagCenter: false,\n  /**\n   * @name Two.RadialGradient#_flagFocal\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RadialGradient#focal} changed and needs to update.\n   */\n  _flagFocal: false,\n\n  constructor: RadialGradient,\n\n  /**\n   * @name Two.RadialGradient#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Gradient}\n   * @description Create a new instance of {@link Two.RadialGradient} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var stops = this.stops.map(function(stop) {\n      return stop.clone();\n    });\n\n    var clone = new RadialGradient(this.center._x, this.center._y,\n        this._radius, stops, this.focal._x, this.focal._y);\n\n    _.each(Gradient.Properties.concat(RadialGradient.Properties), function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.RadialGradient#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var result = Gradient.prototype.toObject.call(this);\n\n    _.each(RadialGradient.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n\n    result.center = this.center.toObject();\n    result.focal = this.focal.toObject();\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.RadialGradient#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagRadius || this._flatCenter || this._flagFocal\n      || this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.RadialGradient#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagRadius = this._flagCenter = this._flagFocal = false;\n\n    Gradient.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nRadialGradient.MakeObservable(RadialGradient.prototype);\n\nvar anchor;\nvar regex = {\n  video: /\\.(mp4|webm|ogg)$/i,\n  image: /\\.(jpe?g|png|gif|tiff|webp)$/i,\n  effect: /texture|gradient/i\n};\n\nif (root$1.document) {\n  anchor = document.createElement('a');\n}\n\n/**\n * @name Two.Texture\n * @class\n * @extends Two.Shape\n * @param {String|ImageElement} [src] - The URL path to an image file or an `<img />` element.\n * @param {Function} [callback] - An optional callback function once the image has been loaded.\n * @description Fundamental to work with bitmap data, a.k.a. pregenerated imagery, in Two.js. Supported formats include jpg, png, gif, and tiff. See {@link Two.Texture.RegularExpressions} for a full list of supported formats.\n */\nvar Texture = function(src, callback) {\n\n  this._renderer = {};\n  this._renderer.type = 'texture';\n  this._renderer.flagOffset = Texture.FlagOffset.bind(this);\n  this._renderer.flagScale = Texture.FlagScale.bind(this);\n\n  this.id = Constants.Identifier + Constants.uniqueId();\n  this.classList = [];\n\n  /**\n   * @name Two.Texture#loaded\n   * @property {Boolean} - Shorthand value to determine if image has been loaded into the texture.\n   */\n  this.loaded = false;\n\n  /**\n   * @name Two.Texture#repeat\n   * @property {String} - CSS style declaration to tile {@link Two.Path}. Valid values include: `'no-repeat'`, `'repeat'`, `'repeat-x'`, `'repeat-y'`.\n   * @see {@link https://www.w3.org/TR/2dcontext/#dom-context-2d-createpattern}\n   */\n  this.repeat = 'no-repeat';\n\n  /**\n   * @name Two.Texture#offset\n   * @property {Two.Vector} - A two-component vector describing any pixel offset of the texture when applied to a {@link Two.Path}.\n   */\n  this.offset = new Vector();\n\n  if (typeof callback === 'function') {\n    var loaded = (function() {\n      this.unbind(Events.Types.load, loaded);\n      if (typeof callback === 'function') {\n        callback();\n      }\n    }).bind(this);\n    this.bind(Events.Types.load, loaded);\n  }\n\n  /**\n   * @name Two.Texture#src\n   * @property {String} - The URL path to the image data.\n   * @nota-bene This property is ultimately serialized in a {@link Two.Registry} to cache retrieval.\n   */\n  if (typeof src === 'string') {\n    this.src = src;\n  } else if (typeof src === 'object') {\n    var elemString = Object.prototype.toString.call(src);\n    if (\n      elemString === '[object HTMLImageElement]' ||\n      elemString === '[object HTMLCanvasElement]' ||\n      elemString === '[object HTMLVideoElement]' ||\n      elemString === '[object Image]'\n    ) {\n      /**\n       * @name Two.Texture#image\n       * @property {Element} - The corresponding DOM Element of the texture. Can be a `<img />`, `<canvas />`, or `<video />` element. See {@link Two.Texture.RegularExpressions} for a full list of supported elements.\n       * @nota-bene In headless environments this is a `Canvas.Image` object. See {@link https://github.com/Automattic/node-canvas} for more information on headless image objects.\n       */\n      this.image = src;\n    }\n  }\n\n  this._update();\n\n};\n\n_.extend(Texture, {\n\n  /**\n   * @name Two.Texture.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Texture}.\n   */\n  Properties: [\n    'src',\n    'loaded',\n    'repeat'\n  ],\n\n  /**\n   * @name Two.Texture.RegularExpressions\n   * @property {Object} - A map of compatible DOM Elements categorized by media format.\n   */\n  RegularExpressions: regex,\n\n  /**\n   * @name Two.Texture.ImageRegistry\n   * @property {Two.Registry} - A canonical listing of image data used in a single session of Two.js.\n   * @nota-bene This object is used to cache image data between different textures.\n   */\n  ImageRegistry: new Registry(),\n\n  /**\n   * @name Two.Texture.getAbsoluteURL\n   * @property {Function} - Serializes a URL as an absolute path for canonical attribution in {@link Two.ImageRegistry}.\n   * @param {String} path\n   * @returns {String} - The serialized absolute path.\n   */\n  getAbsoluteURL: function(path) {\n    if (!anchor) {\n      // TODO: Fix for headless environments\n      return path;\n    }\n    anchor.href = path;\n    return anchor.href;\n  },\n\n  /**\n   * @name Two.Texture.loadHeadlessBuffer\n   * @property {Function} - Loads an image as a buffer in headless environments.\n   * @param {Two.Texture} texture - The {@link Two.Texture} to be loaded.\n   * @param {Function} loaded - The callback function to be triggered once the image is loaded.\n   * @nota-bene - This function uses node's `fs.readFileSync` to spoof the `<img />` loading process in the browser.\n   */\n  loadHeadlessBuffer: function(texture, loaded) {\n\n    texture.image.onload = loaded;\n    texture.image.src = texture.src;\n\n  },\n\n  /**\n   * @name Two.Texture.getTag\n   * @property {Function} - Retrieves the tag name of an image, video, or canvas node.\n   * @param {ImageElement} - The image to infer the tag name from.\n   * @returns {String} - Returns the tag name of an image, video, or canvas node.\n   */\n  getTag: function(image) {\n    return (image && image.nodeName && image.nodeName.toLowerCase())\n      // Headless environments\n      || 'img';\n  },\n\n  /**\n   * @name Two.Texture.getImage\n   * @property {Function} - Convenience function to set {@link Two.Texture#image} properties with canonincal versions set in {@link Two.Texture.ImageRegistry}.\n   * @param {String} src - The URL path of the image.\n   * @returns {ImageElement} - Returns either a cached version of the image or a new one that is registered in {@link Two.Texture.ImageRegistry}.\n   */\n  getImage: function(src) {\n\n    var absoluteSrc = Texture.getAbsoluteURL(src);\n\n    if (Texture.ImageRegistry.contains(absoluteSrc)) {\n      return Texture.ImageRegistry.get(absoluteSrc);\n    }\n\n    var image;\n\n    if (CanvasShim.Image) {\n\n      // TODO: Fix for headless environments\n      image = new CanvasShim.Image();\n      Renderer.Utils.shim(image, 'img');\n\n    } else if (root$1.document) {\n\n      if (regex.video.test(absoluteSrc)) {\n        image = document.createElement('video');\n      } else {\n        image = document.createElement('img');\n      }\n\n    } else {\n\n      console.warn('Two.js: no prototypical image defined for Two.Texture');\n\n    }\n\n    image.crossOrigin = 'anonymous';\n\n    return image;\n\n  },\n\n  /**\n   * @name Two.Register\n   * @interface\n   * @description A collection of functions to register different types of textures. Used internally by a {@link Two.Texture}.\n   */\n  Register: {\n    canvas: function(texture, callback) {\n      texture._src = '#' + texture.id;\n      Texture.ImageRegistry.add(texture.src, texture.image);\n      if (typeof callback === 'function') {\n        callback();\n      }\n    },\n    img: function(texture, callback) {\n\n      var image = texture.image;\n\n      var loaded = function(e) {\n        if (!CanvasShim.isHeadless && image.removeEventListener && typeof image.removeEventListener === 'function') {\n          image.removeEventListener('load', loaded, false);\n          image.removeEventListener('error', error, false);\n        }\n        if (typeof callback === 'function') {\n          callback();\n        }\n      };\n      var error = function(e) {\n        if (!CanvasShim.isHeadless && typeof image.removeEventListener === 'function') {\n          image.removeEventListener('load', loaded, false);\n          image.removeEventListener('error', error, false);\n        }\n        throw new TwoError('unable to load ' + texture.src);\n      };\n\n      if (typeof image.width === 'number' && image.width > 0\n        && typeof image.height === 'number' && image.height > 0) {\n          loaded();\n      } else if (!CanvasShim.isHeadless && typeof image.addEventListener === 'function') {\n        image.addEventListener('load', loaded, false);\n        image.addEventListener('error', error, false);\n      }\n\n      texture._src = Texture.getAbsoluteURL(texture._src);\n\n      if (!CanvasShim.isHeadless && image && image.getAttribute('two-src')) {\n        return;\n      }\n\n      if (!CanvasShim.isHeadless) {\n        image.setAttribute('two-src', texture.src);\n      }\n\n      Texture.ImageRegistry.add(texture.src, image);\n\n      if (CanvasShim.isHeadless) {\n\n        Texture.loadHeadlessBuffer(texture, loaded);\n\n      } else {\n\n        texture.image.src = texture.src;\n\n      }\n\n    },\n    video: function(texture, callback) {\n\n      if (CanvasShim.isHeadless) {\n        throw new TwoError('video textures are not implemented in headless environments.');\n      }\n\n      var loaded = function(e) {\n        texture.image.removeEventListener('canplaythrough', loaded, false);\n        texture.image.removeEventListener('error', error, false);\n        texture.image.width = texture.image.videoWidth;\n        texture.image.height = texture.image.videoHeight;\n        if (typeof callback === 'function') {\n          callback();\n        }\n      };\n      var error = function(e) {\n        texture.image.removeEventListener('canplaythrough', loaded, false);\n        texture.image.removeEventListener('error', error, false);\n        throw new TwoError('unable to load ' + texture.src);\n      };\n\n      texture._src = Texture.getAbsoluteURL(texture._src);\n\n      if (!texture.image.getAttribute('two-src')) {\n        texture.image.setAttribute('two-src', texture.src);\n        Texture.ImageRegistry.add(texture.src, texture.image);\n      }\n\n      if (texture.image.readyState >= 4) {\n        loaded();\n      } else {\n        texture.image.addEventListener('canplaythrough', loaded, false);\n        texture.image.addEventListener('error', error, false);\n        texture.image.src = texture.src;\n        texture.image.load();\n      }\n\n    }\n  },\n\n  /**\n   * @name Two.Texture.load\n   * @function\n   * @param {Two.Texture} texture - The texture to load.\n   * @param {Function} callback - The function to be called once the texture is loaded.\n   */\n  load: function(texture, callback) {\n\n    var src = texture.src;\n    var image = texture.image;\n    var tag = Texture.getTag(image);\n\n    if (texture._flagImage) {\n      if (/canvas/i.test(tag)) {\n        Texture.Register.canvas(texture, callback);\n      } else {\n        texture._src = (!CanvasShim.isHeadless && image.getAttribute('two-src')) || image.src;\n        Texture.Register[tag](texture, callback);\n      }\n    }\n\n    if (texture._flagSrc) {\n      if (!image) {\n        image = Texture.getImage(texture.src);\n        texture.image = image;\n      }\n      tag = Texture.getTag(image);\n      Texture.Register[tag](texture, callback);\n    }\n\n  },\n\n  /**\n   * @name Two.Texture.FlagOffset\n   * @function\n   * @description Cached method to let renderers know `offset` has been updated on a {@link Two.Texture}.\n   */\n  FlagOffset: function() {\n    this._flagOffset = true;\n  },\n\n  /**\n   * @name Two.Texture.FlagScale\n   * @function\n   * @description Cached method to let renderers know `scale` has been updated on a {@link Two.Texture}.\n   */\n  FlagScale: function() {\n    this._flagScale = true;\n  },\n\n  /**\n   * @name Two.Texture.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Texture} to any object. Handy if you'd like to extend or inherit the {@link Two.Texture} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    _.each(Texture.Properties, defineGetterSetter, object);\n\n    Object.defineProperty(object, 'image', {\n      enumerable: true,\n      get: function() {\n        return this._image;\n      },\n      set: function(image) {\n\n        var tag = Texture.getTag(image);\n        var index;\n\n        switch (tag) {\n          case 'canvas':\n            index = '#' + image.id;\n            break;\n          default:\n            index = image.src;\n        }\n\n        if (Texture.ImageRegistry.contains(index)) {\n          this._image = Texture.ImageRegistry.get(image.src);\n        } else {\n          this._image = image;\n        }\n\n        this._flagImage = true;\n\n      }\n\n    });\n\n    Object.defineProperty(object, 'offset', {\n      enumerable: true,\n      get: function() {\n        return this._offset;\n      },\n      set: function(v) {\n        if (this._offset) {\n          this._offset.unbind(Events.Types.change, this._renderer.flagOffset);\n        }\n        this._offset = v;\n        this._offset.bind(Events.Types.change, this._renderer.flagOffset);\n        this._flagOffset = true;\n      }\n    });\n\n    Object.defineProperty(object, 'scale', {\n      enumerable: true,\n      get: function() {\n        return this._scale;\n      },\n      set: function(v) {\n\n        if (this._scale instanceof Vector) {\n          this._scale.unbind(Events.Types.change, this._renderer.flagScale);\n        }\n\n        this._scale = v;\n\n        if (this._scale instanceof Vector) {\n          this._scale.bind(Events.Types.change, this._renderer.flagScale);\n        }\n\n        this._flagScale = true;\n\n      }\n    });\n\n  }\n\n});\n\n_.extend(Texture.prototype, Events, Shape.prototype, {\n\n  /**\n   * @name Two.Texture#_flagSrc\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#src} needs updating.\n   */\n  _flagSrc: false,\n\n  /**\n   * @name Two.Texture#_flagImage\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#image} needs updating.\n   */\n  _flagImage: false,\n\n  /**\n   * @name Two.Texture#_flagVideo\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#video} needs updating.\n   */\n  _flagVideo: false,\n\n  /**\n   * @name Two.Texture#_flagLoaded\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#loaded} needs updating.\n   */\n  _flagLoaded: false,\n\n  /**\n   * @name Two.Texture#_flagRepeat\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#repeat} needs updating.\n   */\n  _flagRepeat: false,\n\n  /**\n   * @name Two.Texture#_flagOffset\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#offset} needs updating.\n   */\n  _flagOffset: false,\n\n  /**\n   * @name Two.Texture#_flagScale\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Texture#scale} needs updating.\n   */\n  _flagScale: false,\n\n  /**\n   * @name Two.Texture#_src\n   * @private\n   * @see {@link Two.Texture#src}\n   */\n  _src: '',\n\n  /**\n   * @name Two.Texture#_image\n   * @private\n   * @see {@link Two.Texture#image}\n   */\n  _image: null,\n\n  /**\n   * @name Two.Texture#_loaded\n   * @private\n   * @see {@link Two.Texture#loaded}\n   */\n  _loaded: false,\n\n  /**\n   * @name Two.Texture#_repeat\n   * @private\n   * @see {@link Two.Texture#repeat}\n   */\n  _repeat: 'no-repeat',\n\n  /**\n   * @name Two.Texture#_scale\n   * @private\n   * @see {@link Two.Texture#scale}\n   */\n  _scale: 1,\n\n  /**\n   * @name Two.Texture#_offset\n   * @private\n   * @see {@link Two.Texture#offset}\n   */\n  _offset: null,\n\n  constructor: Texture,\n\n  /**\n   * @name Two.Texture#clone\n   * @function\n   * @returns {Two.Texture}\n   * @description Create a new instance of {@link Two.Texture} with the same properties of the current texture.\n   */\n  clone: function() {\n    var clone = new Texture(this.src);\n    clone.repeat = this.repeat;\n    clone.offset.copy(this.origin);\n    clone.scale = this.scale;\n    return clone;\n  },\n\n  /**\n   * @name Two.Texture#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the texture.\n   */\n  toObject: function() {\n    return {\n      src: this.src,\n      // image: this.image,\n      repeat: this.repeat,\n      origin: this.origin.toObject(),\n      scale: typeof this.scale === 'number' ? this.scale : this.scale.toObject()\n    };\n  },\n\n  /**\n   * @name Two.Texture#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagSrc || this._flagImage) {\n\n      this.trigger(Events.Types.change);\n\n      if (this._flagSrc || this._flagImage) {\n        this.loaded = false;\n        Texture.load(this, (function() {\n          this.loaded = true;\n          this\n            .trigger(Events.Types.change)\n            .trigger(Events.Types.load);\n        }).bind(this));\n      }\n\n    }\n\n    if (this._image && this._image.readyState >= 4) {\n      this._flagVideo = true;\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Texture#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagSrc = this._flagImage = this._flagLoaded\n      = this._flagVideo = this._flagScale = this._flagOffset = false;\n\n    return this;\n\n  }\n\n});\n\nTexture.MakeObservable(Texture.prototype);\n\n// Constants\n\nvar min$2 = Math.min, max$2 = Math.max, ceil = Math.ceil, floor = Math.floor;\n\n/**\n * @name Two.Path\n * @class\n * @extends Two.Shape\n * @param {Two.Anchor[]} [vertices] - A list of {@link Two.Anchor}s that represent the order and coordinates to construct the rendered shape.\n * @param {Boolean} [closed=false] - Describes whether the shape is closed or open.\n * @param {Boolean} [curved=false] - Describes whether the shape automatically calculates bezier handles for each vertex.\n * @param {Boolean} [manual=false] - Describes whether the developer controls how vertices are plotted or if Two.js automatically plots coordinates based on closed and curved booleans.\n * @description This is the primary primitive class for creating all drawable shapes in Two.js. Unless specified methods return their instance of `Two.Path` for the purpose of chaining.\n */\nvar Path = function(vertices, closed, curved, manual) {\n\n  Shape.call(this);\n\n  this._renderer.type = 'path';\n  this._renderer.flagVertices = Path.FlagVertices.bind(this);\n  this._renderer.bindVertices = Path.BindVertices.bind(this);\n  this._renderer.unbindVertices = Path.UnbindVertices.bind(this);\n\n  this._renderer.flagFill = Path.FlagFill.bind(this);\n  this._renderer.flagStroke = Path.FlagStroke.bind(this);\n  this._renderer.vertices = [];\n  this._renderer.collection = [];\n\n  /**\n   * @name Two.Path#closed\n   * @property {Boolean} - Determines whether a final line is drawn between the final point in the `vertices` array and the first point.\n   */\n  this._closed = !!closed;\n\n  /**\n   * @name Two.Path#curved\n   * @property {Boolean} - When the path is `automatic = true` this boolean determines whether the lines between the points are curved or not.\n   */\n  this._curved = !!curved;\n\n  /**\n   * @name Two.Path#beginning\n   * @property {Number} - Number between zero and one to state the beginning of where the path is rendered.\n   * @description {@link Two.Path#beginning} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n   * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Path#ending}.\n   */\n  this.beginning = 0;\n\n  /**\n   * @name Two.Path#ending\n   * @property {Number} - Number between zero and one to state the ending of where the path is rendered.\n   * @description {@link Two.Path#ending} is a percentage value that represents at what percentage into the path should the renderer start drawing.\n   * @nota-bene This is great for animating in and out stroked paths in conjunction with {@link Two.Path#beginning}.\n   */\n  this.ending = 1;\n\n  // Style properties\n\n  /**\n   * @name Two.Path#fill\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what the path should be filled in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  this.fill = '#fff';\n\n  /**\n   * @name Two.Path#stroke\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what the path should be outlined in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  this.stroke = '#000';\n\n  /**\n   * @name Two.Path#linewidth\n   * @property {Number} - The thickness in pixels of the stroke.\n   */\n  this.linewidth = 1.0;\n\n  /**\n   * @name Two.Path#opacity\n   * @property {Number} - The opaqueness of the path.\n   * @nota-bene Can be used in conjunction with CSS Colors that have an alpha value.\n   */\n  this.opacity = 1.0;\n\n  /**\n   * @name Two.Path#className\n   * @property {String} - A class to be applied to the element to be compatible with CSS styling.\n   * @nota-bene Only available for the SVG renderer.\n   */\n  this.className = '';\n\n  /**\n   * @name Two.Path#visible\n   * @property {Boolean} - Display the path or not.\n   * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n   */\n  this.visible = true;\n\n  /**\n   * @name Two.Path#cap\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinecapProperty}\n   */\n  this.cap = 'butt';      // Default of Adobe Illustrator\n\n  /**\n   * @name Two.Path#join\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeLinejoinProperty}\n   */\n  this.join = 'miter';    // Default of Adobe Illustrator\n\n  /**\n   * @name Two.Path#miter\n   * @property {String}\n   * @see {@link https://www.w3.org/TR/SVG11/painting.html#StrokeMiterlimitProperty}\n   */\n  this.miter = 4;         // Default of Adobe Illustrator\n\n  /**\n   * @name Two.Path#vertices\n   * @property {Two.Anchor[]} - An ordered list of anchor points for rendering the path.\n   * @description A list of {@link Two.Anchor} objects that consist of what form the path takes.\n   * @nota-bene The array when manipulating is actually a {@link Two.Utils.Collection}.\n   */\n  this.vertices = vertices;\n\n  /**\n   * @name Two.Path#automatic\n   * @property {Boolean} - Determines whether or not Two.js should calculate curves, lines, and commands automatically for you or to let the developer manipulate them for themselves.\n   */\n  this.automatic = !manual;\n\n  /**\n   * @name Two.Path#dashes\n   * @property {Number[]} - Array of numbers. Odd indices represent dash length. Even indices represent dash space.\n   * @description A list of numbers that represent the repeated dash length and dash space applied to the stroke of the text.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more information on the SVG stroke-dasharray attribute.\n   */\n  this.dashes = [];\n\n  /**\n   * @name Two.Path#dashes#offset\n   * @property {Number} - A number in pixels to offset {@link Two.Path#dashes} display.\n   */\n  this.dashes.offset = 0;\n\n};\n\n_.extend(Path, {\n\n  /**\n   * @name Two.Path.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Path}.\n   */\n  Properties: [\n    'fill',\n    'stroke',\n    'linewidth',\n    'opacity',\n    'visible',\n    'cap',\n    'join',\n    'miter',\n\n    'closed',\n    'curved',\n    'automatic',\n    'beginning',\n    'ending'\n  ],\n\n  Utils: {\n    getCurveLength: getCurveLength$1\n  },\n\n  /**\n   * @name Two.Path.FlagVertices\n   * @function\n   * @description Cached method to let renderers know vertices have been updated on a {@link Two.Path}.\n   */\n  FlagVertices: function() {\n    this._flagVertices = true;\n    this._flagLength = true;\n    if (this.parent) {\n      this.parent._flagLength = true;\n    }\n  },\n\n  /**\n   * @name Two.Path.BindVertices\n   * @function\n   * @description Cached method to let {@link Two.Path} know vertices have been added to the instance.\n   */\n  BindVertices: function(items) {\n\n    // This function is called a lot\n    // when importing a large SVG\n    var i = items.length;\n    while (i--) {\n      items[i].bind(Events.Types.change, this._renderer.flagVertices);\n    }\n\n    this._renderer.flagVertices();\n\n  },\n\n  /**\n   * @name Two.Path.UnbindVertices\n   * @function\n   * @description Cached method to let {@link Two.Path} know vertices have been removed from the instance.\n   */\n  UnbindVertices: function(items) {\n\n    var i = items.length;\n    while (i--) {\n      items[i].unbind(Events.Types.change, this._renderer.flagVertices);\n    }\n\n    this._renderer.flagVertices();\n\n  },\n\n  /**\n   * @name Two.Path.FlagFill\n   * @function\n   * @description Cached method to let {@link Two.Path} know the fill has changed.\n   */\n  FlagFill: function() {\n    this._flagFill = true;\n  },\n\n  /**\n   * @name Two.Path.FlagFill\n   * @function\n   * @description Cached method to let {@link Two.Path} know the stroke has changed.\n   */\n  FlagStroke: function() {\n    this._flagStroke = true;\n  },\n\n  /**\n   * @name Two.Path.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Path} to any object. Handy if you'd like to extend the {@link Two.Path} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    Shape.MakeObservable(object);\n\n    // Only the 7 defined properties are flagged like this. The subsequent\n    // properties behave differently and need to be hand written.\n    _.each(Path.Properties.slice(2, 8), defineGetterSetter, object);\n\n    Object.defineProperty(object, 'fill', {\n      enumerable: true,\n      get: function() {\n        return this._fill;\n      },\n      set: function(f) {\n\n        if (this._fill instanceof Gradient\n          || this._fill instanceof LinearGradient\n          || this._fill instanceof RadialGradient\n          || this._fill instanceof Texture) {\n          this._fill.unbind(Events.Types.change, this._renderer.flagFill);\n        }\n\n        this._fill = f;\n        this._flagFill = true;\n\n        if (this._fill instanceof Gradient\n          || this._fill instanceof LinearGradient\n          || this._fill instanceof RadialGradient\n          || this._fill instanceof Texture) {\n          this._fill.bind(Events.Types.change, this._renderer.flagFill);\n        }\n\n      }\n    });\n\n    Object.defineProperty(object, 'stroke', {\n      enumerable: true,\n      get: function() {\n        return this._stroke;\n      },\n      set: function(f) {\n\n        if (this._stroke instanceof Gradient\n          || this._stroke instanceof LinearGradient\n          || this._stroke instanceof RadialGradient\n          || this._stroke instanceof Texture) {\n          this._stroke.unbind(Events.Types.change, this._renderer.flagStroke);\n        }\n\n        this._stroke = f;\n        this._flagStroke = true;\n\n        if (this._stroke instanceof Gradient\n          || this._stroke instanceof LinearGradient\n          || this._stroke instanceof RadialGradient\n          || this._stroke instanceof Texture) {\n          this._stroke.bind(Events.Types.change, this._renderer.flagStroke);\n        }\n\n      }\n    });\n\n    /**\n     * @name Two.Path#length\n     * @property {Number} - The sum of distances between all {@link Two.Path#vertices}.\n     */\n    Object.defineProperty(object, 'length', {\n      get: function() {\n        if (this._flagLength) {\n          this._updateLength();\n        }\n        return this._length;\n      }\n    });\n\n    Object.defineProperty(object, 'closed', {\n      enumerable: true,\n      get: function() {\n        return this._closed;\n      },\n      set: function(v) {\n        this._closed = !!v;\n        this._flagVertices = true;\n      }\n    });\n\n    Object.defineProperty(object, 'curved', {\n      enumerable: true,\n      get: function() {\n        return this._curved;\n      },\n      set: function(v) {\n        this._curved = !!v;\n        this._flagVertices = true;\n      }\n    });\n\n    Object.defineProperty(object, 'automatic', {\n      enumerable: true,\n      get: function() {\n        return this._automatic;\n      },\n      set: function(v) {\n        if (v === this._automatic) {\n          return;\n        }\n        this._automatic = !!v;\n        var method = this._automatic ? 'ignore' : 'listen';\n        _.each(this.vertices, function(v) {\n          v[method]();\n        });\n      }\n    });\n\n    Object.defineProperty(object, 'beginning', {\n      enumerable: true,\n      get: function() {\n        return this._beginning;\n      },\n      set: function(v) {\n        this._beginning = v;\n        this._flagVertices = true;\n      }\n    });\n\n    Object.defineProperty(object, 'ending', {\n      enumerable: true,\n      get: function() {\n        return this._ending;\n      },\n      set: function(v) {\n        this._ending = v;\n        this._flagVertices = true;\n      }\n    });\n\n    Object.defineProperty(object, 'vertices', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._collection;\n      },\n\n      set: function(vertices) {\n\n        var updateVertices = this._renderer.flagVertices;\n        var bindVertices = this._renderer.bindVertices;\n        var unbindVertices = this._renderer.unbindVertices;\n\n        // Remove previous listeners\n        if (this._collection) {\n          this._collection\n            .unbind(Events.Types.insert, bindVertices)\n            .unbind(Events.Types.remove, unbindVertices);\n        }\n\n        // Create new Collection with copy of vertices\n        if (vertices instanceof Collection) {\n          this._collection = vertices;\n        } else {\n          this._collection = new Collection(vertices || []);\n        }\n\n\n        // Listen for Collection changes and bind / unbind\n        this._collection\n          .bind(Events.Types.insert, bindVertices)\n          .bind(Events.Types.remove, unbindVertices);\n\n        // Bind Initial Vertices\n        bindVertices(this._collection);\n\n      }\n\n    });\n\n    /**\n     * @name Two.Path#clip\n     * @property {Two.Shape} - Object to define clipping area.\n     * @nota-bene This property is currently not working becuase of SVG spec issues found here {@link https://code.google.com/p/chromium/issues/detail?id=370951}.\n     */\n    Object.defineProperty(object, 'clip', {\n      enumerable: true,\n      get: function() {\n        return this._clip;\n      },\n      set: function(v) {\n        this._clip = v;\n        this._flagClip = true;\n      }\n    });\n\n    Object.defineProperty(object, 'dashes', {\n      enumerable: true,\n      get: function() {\n        return this._dashes;\n      },\n      set: function(v) {\n        if (typeof v.offset !== 'number') {\n          v.offset = this._dashes.offset || 0;\n        }\n        this._dashes = v;\n      }\n    });\n\n  }\n\n});\n\n_.extend(Path.prototype, Shape.prototype, {\n\n  // Flags\n  // http://en.wikipedia.org/wiki/Flag\n\n  /**\n   * @name Two.Path#_flagVertices\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#vertices} need updating.\n   */\n  _flagVertices: true,\n\n  /**\n   * @name Two.Path#_flagLength\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#length} needs updating.\n   */\n  _flagLength: true,\n\n  /**\n   * @name Two.Path#_flagFill\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#fill} needs updating.\n   */\n  _flagFill: true,\n\n  /**\n   * @name Two.Path#_flagStroke\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#stroke} needs updating.\n   */\n  _flagStroke: true,\n\n  /**\n   * @name Two.Path#_flagLinewidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#linewidth} needs updating.\n   */\n  _flagLinewidth: true,\n\n  /**\n   * @name Two.Path#_flagOpacity\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#opacity} needs updating.\n   */\n  _flagOpacity: true,\n\n  /**\n   * @name Two.Path#_flagVisible\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#visible} needs updating.\n   */\n  _flagVisible: true,\n\n  /**\n   * @name Two.Path#_flagCap\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#cap} needs updating.\n   */\n  _flagCap: true,\n\n  /**\n   * @name Two.Path#_flagJoin\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#join} needs updating.\n   */\n  _flagJoin: true,\n\n  /**\n   * @name Two.Path#_flagMiter\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#miter} needs updating.\n   */\n  _flagMiter: true,\n\n  /**\n   * @name Two.Path#_flagClip\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Path#clip} needs updating.\n   */\n  _flagClip: false,\n\n  // Underlying Properties\n\n  /**\n   * @name Two.Path#_length\n   * @private\n   * @see {@link Two.Path#length}\n   */\n  _length: 0,\n\n  /**\n   * @name Two.Path#_fill\n   * @private\n   * @see {@link Two.Path#fill}\n   */\n  _fill: '#fff',\n\n  /**\n   * @name Two.Path#_stroke\n   * @private\n   * @see {@link Two.Path#stroke}\n   */\n  _stroke: '#000',\n\n  /**\n   * @name Two.Path#_linewidth\n   * @private\n   * @see {@link Two.Path#linewidth}\n   */\n  _linewidth: 1.0,\n\n  /**\n   * @name Two.Path#_opacity\n   * @private\n   * @see {@link Two.Path#opacity}\n   */\n  _opacity: 1.0,\n\n  /**\n   * @name Two.Path#_visible\n   * @private\n   * @see {@link Two.Path#visible}\n   */\n  _visible: true,\n\n  /**\n   * @name Two.Path#_cap\n   * @private\n   * @see {@link Two.Path#cap}\n   */\n  _cap: 'round',\n\n  /**\n   * @name Two.Path#_join\n   * @private\n   * @see {@link Two.Path#join}\n   */\n  _join: 'round',\n\n  /**\n   * @name Two.Path#_miter\n   * @private\n   * @see {@link Two.Path#miter}\n   */\n  _miter: 4,\n\n  /**\n   * @name Two.Path#_closed\n   * @private\n   * @see {@link Two.Path#closed}\n   */\n  _closed: true,\n\n  /**\n   * @name Two.Path#_curved\n   * @private\n   * @see {@link Two.Path#curved}\n   */\n  _curved: false,\n\n  /**\n   * @name Two.Path#_automatic\n   * @private\n   * @see {@link Two.Path#automatic}\n   */\n  _automatic: true,\n\n  /**\n   * @name Two.Path#_beginning\n   * @private\n   * @see {@link Two.Path#beginning}\n   */\n  _beginning: 0,\n\n  /**\n   * @name Two.Path#_ending\n   * @private\n   * @see {@link Two.Path#ending}\n   */\n  _ending: 1.0,\n\n  /**\n   * @name Two.Path#_clip\n   * @private\n   * @see {@link Two.Path#clip}\n   */\n  _clip: false,\n\n  /**\n   * @name Two.Path#_dashes\n   * @private\n   * @see {@link Two.Path#dashes}\n   */\n  _dashes: [],\n\n  constructor: Path,\n\n  /**\n   * @name Two.Path#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Path}\n   * @description Create a new instance of {@link Two.Path} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var clone = new Path();\n\n    for (var j = 0; j < this.vertices.length; j++) {\n      clone.vertices.push(this.vertices[j].clone());\n    }\n\n    for (var i = 0; i < Path.Properties.length; i++) {\n      var k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n\n    clone.className = this.className;\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone._update();\n\n  },\n\n  /**\n   * @name Two.Path#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var result = {\n      vertices: this.vertices.map(function(v) {\n        return v.toObject();\n      })\n    };\n\n    _.each(Path.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n\n    result.className = this.className;\n\n    result.translation = this.translation.toObject();\n    result.rotation = this.rotation;\n    result.scale = this.scale instanceof Vector ? this.scale.toObject() : this.scale;\n\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Path#noFill\n   * @function\n   * @description Short hand method to set fill to `transparent`.\n   */\n  noFill: function() {\n    this.fill = 'transparent';\n    return this;\n  },\n\n  /**\n   * @name Two.Path#noStroke\n   * @function\n   * @description Short hand method to set stroke to `transparent`.\n   */\n  noStroke: function() {\n    this.stroke = undefined;\n    return this;\n  },\n\n  /**\n   * @name Two.Path#corner\n   * @function\n   * @description Orient the vertices of the shape to the upper left-hand corner of the path.\n   */\n  corner: function() {\n\n    var rect = this.getBoundingClientRect(true);\n\n    rect.centroid = {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2\n    };\n\n    _.each(this.vertices, function(v) {\n      v.subSelf(rect.centroid);\n      v.x += rect.width / 2;\n      v.y += rect.height / 2;\n    });\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#center\n   * @function\n   * @description Orient the vertices of the shape to the center of the path.\n   */\n  center: function() {\n\n    var rect = this.getBoundingClientRect(true);\n\n    rect.centroid = {\n      x: rect.left + rect.width / 2 - this.translation.x,\n      y: rect.top + rect.height / 2 - this.translation.y\n    };\n\n    _.each(this.vertices, function(v) {\n      v.subSelf(rect.centroid);\n    });\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#remove\n   * @function\n   * @description Remove self from the scene / parent.\n   */\n  remove: function() {\n\n    if (!this.parent) {\n      return this;\n    }\n\n    this.parent.remove(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#getBoundingClientRect\n   * @function\n   * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n   * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n   * @description Return an object with top, left, right, bottom, width, and height parameters of the path.\n   */\n  getBoundingClientRect: function(shallow) {\n    var matrix, border, l, i, v0, c0, c1, v1;\n\n    var left = Infinity, right = -Infinity,\n        top = Infinity, bottom = -Infinity;\n\n    // TODO: Update this to not __always__ update. Just when it needs to.\n    this._update(true);\n\n    matrix = shallow ? this._matrix : getComputedMatrix(this);\n\n    border = this.linewidth / 2;\n    l = this._renderer.vertices.length;\n\n    if (l <= 0) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n\n    for (i = 0; i < l; i++) {\n\n      v1 = this._renderer.vertices[i];\n      // If i = 0, then this \"wraps around\" to the last vertex. Otherwise, it's the previous vertex.\n      // This is important for handling cyclic paths.\n      v0 = this._renderer.vertices[(i + l - 1) % l];\n\n      if (v0.controls && v1.controls) {\n\n        if (v0.relative) {\n          c0 = matrix.multiply(\n            v0.controls.right.x + v0.x, v0.controls.right.y + v0.y, 1);\n        } else {\n          c0 = matrix.multiply(\n            v0.controls.right.x, v0.controls.right.y, 1);\n        }\n        v0 = matrix.multiply(v0.x, v0.y, 1);\n\n        if (v1.relative) {\n          c1 = matrix.multiply(\n            v1.controls.left.x + v1.x, v1.controls.left.y + v1.y, 1);\n        } else {\n          c1 = matrix.multiply(\n            v1.controls.left.x, v1.controls.left.y, 1);\n        }\n        v1 = matrix.multiply(v1.x, v1.y, 1);\n\n        var bb = getCurveBoundingBox(\n          v0.x, v0.y, c0.x, c0.y, c1.x, c1.y, v1.x, v1.y);\n\n        top = min$2(bb.min.y - border, top);\n        left = min$2(bb.min.x - border, left);\n        right = max$2(bb.max.x + border, right);\n        bottom = max$2(bb.max.y + border, bottom);\n\n      } else {\n\n        if (i <= 1) {\n\n          v0 = matrix.multiply(v0.x, v0.y, 1);\n\n          top = min$2(v0.y - border, top);\n          left = min$2(v0.x - border, left);\n          right = max$2(v0.x + border, right);\n          bottom = max$2(v0.y + border, bottom);\n\n        }\n\n        v1 = matrix.multiply(v1.x, v1.y, 1);\n\n        top = min$2(v1.y - border, top);\n        left = min$2(v1.x - border, left);\n        right = max$2(v1.x + border, right);\n        bottom = max$2(v1.y + border, bottom);\n\n      }\n\n    }\n\n    return {\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom,\n      width: right - left,\n      height: bottom - top\n    };\n\n  },\n\n  /**\n   * @name Two.Path#getPointAt\n   * @function\n   * @param {Boolean} t - Percentage value describing where on the Two.Path to estimate and assign coordinate values.\n   * @param {Two.Vector} [obj=undefined] - Object to apply calculated x, y to. If none available returns new Object.\n   * @returns {Object}\n   * @description Given a float `t` from 0 to 1, return a point or assign a passed `obj`'s coordinates to that percentage on this Two.Path's curve.\n   */\n  getPointAt: function(t, obj) {\n\n    var ia, ib, result;\n    var x, x1, x2, x3, x4, y, y1, y2, y3, y4, left, right;\n    var target = this.length * Math.min(Math.max(t, 0), 1);\n    var length = this.vertices.length;\n    var last = length - 1;\n\n    var a = null;\n    var b = null;\n\n    for (var i = 0, l = this._lengths.length, sum = 0; i < l; i++) {\n\n      if (sum + this._lengths[i] >= target) {\n\n        if (this._closed) {\n          ia = mod(i, length);\n          ib = mod(i - 1, length);\n          if (i === 0) {\n            ia = ib;\n            ib = i;\n          }\n        } else {\n          ia = i;\n          ib = Math.min(Math.max(i - 1, 0), last);\n        }\n\n        a = this.vertices[ia];\n        b = this.vertices[ib];\n        target -= sum;\n        if (this._lengths[i] !== 0) {\n          t = target / this._lengths[i];\n        } else {\n          t = 0;\n        }\n\n        break;\n\n      }\n\n      sum += this._lengths[i];\n\n    }\n\n    if (a === null || b === null) {\n      return null;\n    }\n\n    if (!a) {\n      return b;\n    } else if (!b) {\n      return a;\n    }\n\n    right = b.controls && b.controls.right;\n    left = a.controls && a.controls.left;\n\n    x1 = b.x;\n    y1 = b.y;\n    x2 = (right || b).x;\n    y2 = (right || b).y;\n    x3 = (left || a).x;\n    y3 = (left || a).y;\n    x4 = a.x;\n    y4 = a.y;\n\n    if (right && b.relative) {\n      x2 += b.x;\n      y2 += b.y;\n    }\n\n    if (left && a.relative) {\n      x3 += a.x;\n      y3 += a.y;\n    }\n\n    x = getComponentOnCubicBezier(t, x1, x2, x3, x4);\n    y = getComponentOnCubicBezier(t, y1, y2, y3, y4);\n\n    // Higher order points for control calculation.\n    var t1x = lerp(x1, x2, t);\n    var t1y = lerp(y1, y2, t);\n    var t2x = lerp(x2, x3, t);\n    var t2y = lerp(y2, y3, t);\n    var t3x = lerp(x3, x4, t);\n    var t3y = lerp(y3, y4, t);\n\n    // Calculate the returned points control points.\n    var brx = lerp(t1x, t2x, t);\n    var bry = lerp(t1y, t2y, t);\n    var alx = lerp(t2x, t3x, t);\n    var aly = lerp(t2y, t3y, t);\n\n    if (_.isObject(obj)) {\n\n      obj.x = x;\n      obj.y = y;\n\n      if (!_.isObject(obj.controls)) {\n        Anchor.AppendCurveProperties(obj);\n      }\n\n      obj.controls.left.x = brx;\n      obj.controls.left.y = bry;\n      obj.controls.right.x = alx;\n      obj.controls.right.y = aly;\n\n      if (!typeof obj.relative === 'boolean' || obj.relative) {\n        obj.controls.left.x -= x;\n        obj.controls.left.y -= y;\n        obj.controls.right.x -= x;\n        obj.controls.right.y -= y;\n      }\n\n      obj.t = t;\n\n      return obj;\n\n    }\n\n    result = new Anchor(\n      x, y, brx - x, bry - y, alx - x, aly - y,\n      this._curved ? Commands.curve : Commands.line\n    );\n\n    result.t = t;\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Path#plot\n   * @function\n   * @description Based on closed / curved and sorting of vertices plot where all points should be and where the respective handles should be too.\n   * @nota-bene While this method is public it is internally called by {@link Two.Path#_update} when `automatic = true`.\n   */\n  plot: function() {\n\n    if (this.curved) {\n      getCurveFromPoints(this._collection, this.closed);\n      return this;\n    }\n\n    for (var i = 0; i < this._collection.length; i++) {\n      this._collection[i].command = i === 0 ? Commands.move : Commands.line;\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#subdivide\n   * @function\n   * @param {Integer} limit - How many times to recurse subdivisions.\n   * @description Insert a {@link Two.Anchor} at the midpoint between every item in {@link Two.Path#vertices}.\n   */\n  subdivide: function(limit) {\n    //TODO: DRYness (function below)\n    this._update();\n\n    var last = this.vertices.length - 1;\n    var b = this.vertices[last];\n    var closed = this._closed || this.vertices[last]._command === Commands.close;\n    var points = [];\n    _.each(this.vertices, function(a, i) {\n\n      if (i <= 0 && !closed) {\n        b = a;\n        return;\n      }\n\n      if (a.command === Commands.move) {\n        points.push(new Anchor(b.x, b.y));\n        if (i > 0) {\n          points[points.length - 1].command = Commands.line;\n        }\n        b = a;\n        return;\n      }\n\n      var verts = getSubdivisions(a, b, limit);\n      points = points.concat(verts);\n\n      // Assign commands to all the verts\n      _.each(verts, function(v, i) {\n        if (i <= 0 && b.command === Commands.move) {\n          v.command = Commands.move;\n        } else {\n          v.command = Commands.line;\n        }\n      });\n\n      if (i >= last) {\n\n        // TODO: Add check if the two vectors in question are the same values.\n        if (this._closed && this._automatic) {\n\n          b = a;\n\n          verts = getSubdivisions(a, b, limit);\n          points = points.concat(verts);\n\n          // Assign commands to all the verts\n          _.each(verts, function(v, i) {\n            if (i <= 0 && b.command === Commands.move) {\n              v.command = Commands.move;\n            } else {\n              v.command = Commands.line;\n            }\n          });\n\n        } else if (closed) {\n          points.push(new Anchor(a.x, a.y));\n        }\n\n        points[points.length - 1].command = closed\n          ? Commands.close : Commands.line;\n\n      }\n\n      b = a;\n\n    }, this);\n\n    this._automatic = false;\n    this._curved = false;\n    this.vertices = points;\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#_updateLength\n   * @function\n   * @private\n   * @param {Integer} [limit=] -\n   * @param {Boolean} [silent=false] - If set to `true` then the path isn't updated before calculation. Useful for internal use.\n   * @description Recalculate the {@link Two.Path#length} value.\n   */\n  _updateLength: function(limit, silent) {\n    //TODO: DRYness (function above)\n    if (!silent) {\n      this._update();\n    }\n\n    var length = this.vertices.length;\n    var last = length - 1;\n    var b = this.vertices[last];\n    var closed = false;//this._closed || this.vertices[last]._command === Commands.close;\n    var sum = 0;\n\n    if (typeof this._lengths === 'undefined') {\n      this._lengths = [];\n    }\n\n    _.each(this.vertices, function(a, i) {\n\n      if ((i <= 0 && !closed) || a.command === Commands.move) {\n        b = a;\n        this._lengths[i] = 0;\n        return;\n      }\n\n      this._lengths[i] = getCurveLength$1(a, b, limit);\n      sum += this._lengths[i];\n\n      if (i >= last && closed) {\n\n        b = this.vertices[(i + 1) % length];\n\n        this._lengths[i + 1] = getCurveLength$1(a, b, limit);\n        sum += this._lengths[i + 1];\n\n      }\n\n      b = a;\n\n    }, this);\n\n    this._length = sum;\n    this._flagLength = false;\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagVertices) {\n\n      if (this._automatic) {\n        this.plot();\n      }\n\n      if (this._flagLength) {\n        this._updateLength(undefined, true);\n      }\n\n      var l = this._collection.length;\n      var closed = this._closed;\n\n      var beginning = Math.min(this._beginning, this._ending);\n      var ending = Math.max(this._beginning, this._ending);\n\n      var bid = getIdByLength(this, beginning * this._length);\n      var eid = getIdByLength(this, ending * this._length);\n\n      var low = ceil(bid);\n      var high = floor(eid);\n\n      var left, right, prev, next, v;\n\n      this._renderer.vertices.length = 0;\n\n      for (var i = 0; i < l; i++) {\n\n        if (this._renderer.collection.length <= i) {\n          // Expected to be `relative` anchor points.\n          this._renderer.collection.push(new Anchor());\n        }\n\n        if (i > high && !right) {\n\n          v = this._renderer.collection[i];\n          v.copy(this._collection[i]);\n          this.getPointAt(ending, v);\n          v.command = this._renderer.collection[i].command;\n          this._renderer.vertices.push(v);\n\n          right = v;\n          prev = this._collection[i - 1];\n\n          // Project control over the percentage `t`\n          // of the in-between point\n          if (prev && prev.controls) {\n\n            v.controls.right.clear();\n\n            this._renderer.collection[i - 1].controls.right\n              .clear()\n              .lerp(prev.controls.right, v.t);\n\n          }\n\n        } else if (i >= low && i <= high) {\n\n          v = this._renderer.collection[i]\n            .copy(this._collection[i]);\n          this._renderer.vertices.push(v);\n\n          if (i === high && contains(this, ending)) {\n            right = v;\n            if (!closed && right.controls) {\n              right.controls.right.clear();\n            }\n          } else if (i === low && contains(this, beginning)) {\n            left = v;\n            left.command = Commands.move;\n            if (!closed && left.controls) {\n              left.controls.left.clear();\n            }\n          }\n\n        }\n\n      }\n\n      // Prepend the trimmed point if necessary.\n      if (low > 0 && !left) {\n\n        i = low - 1;\n\n        v = this._renderer.collection[i];\n        v.copy(this._collection[i]);\n        this.getPointAt(beginning, v);\n        v.command = Commands.move;\n        this._renderer.vertices.unshift(v);\n\n        left = v;\n        next = this._collection[i + 1];\n\n        // Project control over the percentage `t`\n        // of the in-between point\n        if (next && next.controls) {\n\n          v.controls.left.clear();\n\n          this._renderer.collection[i + 1].controls.left\n            .copy(next.controls.left)\n            .lerp(Vector.zero, v.t);\n\n        }\n\n      }\n\n    }\n\n    Shape.prototype._update.apply(this, arguments);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Path#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagVertices =  this._flagFill =  this._flagStroke =\n        this._flagLinewidth = this._flagOpacity = this._flagVisible =\n        this._flagCap = this._flagJoin = this._flagMiter =\n        this._flagClip = false;\n\n    Shape.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nPath.MakeObservable(Path.prototype);\n\n  // Utility functions\n\nfunction contains(path, t) {\n\n  if (t === 0 || t === 1) {\n    return true;\n  }\n\n  var length = path._length;\n  var target = length * t;\n  var elapsed = 0;\n\n  for (var i = 0; i < path._lengths.length; i++) {\n    var dist = path._lengths[i];\n    if (elapsed >= target) {\n      return target - elapsed >= 0;\n    }\n    elapsed += dist;\n  }\n\n  return false;\n\n}\n\n/**\n * @protected\n * @param {Two.Path} path - The path to analyze against.\n * @param {Number} target - The target length at which to find an anchor.\n * @returns {Integer}\n * @description Return the id of an anchor based on a target length.\n */\nfunction getIdByLength(path, target) {\n\n  var total = path._length;\n\n  if (target <= 0) {\n    return 0;\n  } else if (target >= total) {\n    return path._lengths.length - 1;\n  }\n\n  for (var i = 0, sum = 0; i < path._lengths.length; i++) {\n\n    if (sum + path._lengths[i] >= target) {\n      target -= sum;\n      return Math.max(i - 1, 0) + target / path._lengths[i];\n    }\n\n    sum += path._lengths[i];\n\n  }\n\n  return - 1;\n\n}\n\nfunction getCurveLength$1(a, b, limit) {\n  // TODO: DRYness\n  var x1, x2, x3, x4, y1, y2, y3, y4;\n\n  var right = b.controls && b.controls.right;\n  var left = a.controls && a.controls.left;\n\n  x1 = b.x;\n  y1 = b.y;\n  x2 = (right || b).x;\n  y2 = (right || b).y;\n  x3 = (left || a).x;\n  y3 = (left || a).y;\n  x4 = a.x;\n  y4 = a.y;\n\n  if (right && b._relative) {\n    x2 += b.x;\n    y2 += b.y;\n  }\n\n  if (left && a._relative) {\n    x3 += a.x;\n    y3 += a.y;\n  }\n\n  return getCurveLength(x1, y1, x2, y2, x3, y3, x4, y4, limit);\n\n}\n\nfunction getSubdivisions(a, b, limit) {\n  // TODO: DRYness\n  var x1, x2, x3, x4, y1, y2, y3, y4;\n\n  var right = b.controls && b.controls.right;\n  var left = a.controls && a.controls.left;\n\n  x1 = b.x;\n  y1 = b.y;\n  x2 = (right || b).x;\n  y2 = (right || b).y;\n  x3 = (left || a).x;\n  y3 = (left || a).y;\n  x4 = a.x;\n  y4 = a.y;\n\n  if (right && b._relative) {\n    x2 += b.x;\n    y2 += b.y;\n  }\n\n  if (left && a._relative) {\n    x3 += a.x;\n    y3 += a.y;\n  }\n\n  return subdivide(x1, y1, x2, y2, x3, y3, x4, y4, limit);\n\n}\n\nvar TWO_PI$1 = Math.PI * 2, HALF_PI$1 = Math.PI / 2;\nvar cos$2 = Math.cos, sin$2 = Math.sin;\n\n/**\n * @name Two.Circle\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the circle.\n * @param {Number} [y=0] - The y position of the circle.\n * @param {Number} radius - The radius value of the circle.\n * @param {Number} [resolution=4] - The number of vertices used to construct the circle.\n */\nvar Circle = function(ox, oy, r, resolution) {\n\n  // At least 2 vertices are required for proper circlage\n  var amount = resolution ? Math.max(resolution, 2) : 4;\n\n  var points = [];\n  for (var i = 0; i < amount; i++) {\n    points.push(new Anchor());\n  }\n\n  Path.call(this, points, true, true, true);\n\n  /**\n   * @name Two.Circle#radius\n   * @property {Number} - The size of the radius of the circle.\n   */\n  this.radius = r;\n\n  this._update();\n\n  if (typeof ox === 'number') {\n    this.translation.x = ox;\n  }\n  if (typeof oy === 'number') {\n    this.translation.y = oy;\n  }\n\n};\n\n_.extend(Circle, {\n\n  /**\n   * @name Two.Circle.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Circle}.\n   */\n  Properties: ['radius'],\n\n  /**\n   * @name Two.Circle.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Circle} to any object. Handy if you'd like to extend the {@link Two.Circle} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Path.MakeObservable(obj);\n    _.each(Circle.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(Circle.prototype, Path.prototype, {\n\n  /**\n   * @name Two.Circle#_flagRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Circle#radius} needs updating.\n   */\n  _flagRadius: false,\n\n  /**\n   * @name Two.Circle#_radius\n   * @private\n   * @see {@link Two.Circle#radius}\n   */\n  _radius: 0,\n\n  constructor: Circle,\n\n  /**\n   * @name Two.Circle#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagRadius) {\n      // Coefficient for approximating circular arcs with Bezier curves\n      var c = (4 / 3) * Math.tan(Math.PI / (this.vertices.length * 2));\n\n      var radius = this._radius;\n      var rc = radius * c;\n\n      for (var i = 0, numVertices = this.vertices.length; i < numVertices; i++) {\n        var pct = i / numVertices;\n        var theta = pct * TWO_PI$1;\n\n        var x = radius * cos$2(theta);\n        var y = radius * sin$2(theta);\n\n        var lx = rc * cos$2(theta - HALF_PI$1);\n        var ly = rc * sin$2(theta - HALF_PI$1);\n\n        var rx = rc * cos$2(theta + HALF_PI$1);\n        var ry = rc * sin$2(theta + HALF_PI$1);\n\n        var v = this.vertices[i];\n\n        v.command = Commands.curve;\n        v.set(x, y);\n        v.controls.left.set(lx, ly);\n        v.controls.right.set(rx, ry);\n      }\n    }\n\n    Path.prototype._update.call(this);\n    return this;\n\n  },\n\n  /**\n   * @name Two.Circle#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagRadius = false;\n\n    Path.prototype.flagReset.call(this);\n    return this;\n\n  },\n\n  /**\n   * @name Two.Circle#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Circle}\n   * @description Create a new instance of {@link Two.Circle} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var clone = new Circle(0, 0, this.radius, this.vertices.length);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Circle#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(Circle.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    return object;\n\n  }\n\n});\n\nCircle.MakeObservable(Circle.prototype);\n\nvar TWO_PI$2 = Math.PI * 2, HALF_PI$2 = Math.PI / 2;\nvar cos$3 = Math.cos, sin$3 = Math.sin;\n\n/**\n * @name Two.Ellipse\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the ellipse.\n * @param {Number} [y=0] - The y position of the ellipse.\n * @param {Number} rx - The radius value of the ellipse in the x direction.\n * @param {Number} ry - The radius value of the ellipse in the y direction.\n * @param {Number} [resolution=4] - The number of vertices used to construct the ellipse.\n */\nvar Ellipse = function(ox, oy, rx, ry, resolution) {\n\n  if (typeof ry !== 'number') {\n    ry = rx;\n  }\n\n  // At least 2 vertices are required for proper circlage\n  var amount = resolution ? Math.max(resolution, 2) : 4;\n\n  var points = [];\n  for (var i = 0; i < amount; i++) {\n    points.push(new Anchor());\n  }\n\n  Path.call(this, points, true, true, true);\n\n  /**\n   * @name Two.Ellipse#width\n   * @property {Number} - The width of the ellipse.\n   */\n  this.width = rx * 2;\n  /**\n   * @name Two.Ellipse#height\n   * @property {Number} - The height of the ellipse.\n   */\n  this.height = ry * 2;\n\n  this._update();\n  this.translation.set(ox, oy);\n\n};\n\n_.extend(Ellipse, {\n\n  /**\n   * @name Two.Ellipse.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Ellipse}.\n   */\n  Properties: ['width', 'height'],\n\n  /**\n   * @name Two.Ellipse.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Ellipse} to any object. Handy if you'd like to extend the {@link Two.Ellipse} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Path.MakeObservable(obj);\n    _.each(Ellipse.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(Ellipse.prototype, Path.prototype, {\n\n  /**\n   * @name Two.Ellipse#_flagWidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Ellipse#width} needs updating.\n   */\n  _flagWidth: false,\n  /**\n   * @name Two.Ellipse#_flagHeight\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Ellipse#height} needs updating.\n   */\n  _flagHeight: false,\n\n  /**\n   * @name Two.Polygon#_width\n   * @private\n   * @see {@link Two.Ellipse#width}\n   */\n  _width: 0,\n  /**\n   * @name Two.Polygon#_height\n   * @private\n   * @see {@link Two.Ellipse#height}\n   */\n  _height: 0,\n\n  constructor: Ellipse,\n\n  /**\n   * @name Two.Ellipse#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagWidth || this._flagHeight) {\n      // Coefficient for approximating circular arcs with Bezier curves\n      var c = (4 / 3) * Math.tan(Math.PI / (this.vertices.length * 2));\n      var radiusX = this._width / 2;\n      var radiusY = this._height / 2;\n\n      for (var i = 0, numVertices = this.vertices.length; i < numVertices; i++) {\n        var pct = i / numVertices;\n        var theta = pct * TWO_PI$2;\n\n        var x = radiusX * cos$3(theta);\n        var y = radiusY * sin$3(theta);\n\n        var lx = radiusX * c * cos$3(theta - HALF_PI$2);\n        var ly = radiusY * c * sin$3(theta - HALF_PI$2);\n\n        var rx = radiusX * c * cos$3(theta + HALF_PI$2);\n        var ry = radiusY * c * sin$3(theta + HALF_PI$2);\n\n        var v = this.vertices[i];\n\n        v.command = Commands.curve;\n        v.set(x, y);\n        v.controls.left.set(lx, ly);\n        v.controls.right.set(rx, ry);\n      }\n    }\n\n    Path.prototype._update.call(this);\n    return this;\n\n  },\n\n  /**\n   * @name Two.Ellipse#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagWidth = this._flagHeight = false;\n\n    Path.prototype.flagReset.call(this);\n    return this;\n\n  },\n\n  /**\n   * @name Two.Ellipse#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Polygon}\n   * @description Create a new instance of {@link Two.Polygon} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var rx = this.width / 2;\n    var ry = this.height / 2;\n    var resolution = this.vertices.length;\n    var clone = new Ellipse(0, 0, rx, ry, resolution);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Ellipse#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(Ellipse.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    return object;\n\n  }\n\n});\n\nEllipse.MakeObservable(Ellipse.prototype);\n\n/**\n * @name Two.Line\n * @class\n * @extends Two.Path\n * @param {Number} [x1=0] - The x position of the first vertex on the line.\n * @param {Number} [y1=0] - The y position of the first vertex on the line.\n * @param {Number} [x2=0] - The x position of the second vertex on the line.\n * @param {Number} [y2=0] - The y position of the second vertex on the line.\n */\nvar Line = function(x1, y1, x2, y2) {\n\n  Path.call(this, [\n      new Anchor(x1, y1),\n      new Anchor(x2, y2)\n  ]);\n\n  this.vertices[0].command = Commands.move;\n  this.vertices[1].command = Commands.line;\n\n  this.automatic = false;\n\n};\n\n_.extend(Line.prototype, Path.prototype);\nLine.prototype.constructor = Line;\n\nPath.MakeObservable(Line.prototype);\n\n/**\n * @name Two.Rectangle\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the rectangle.\n * @param {Number} [y=0] - The y position of the rectangle.\n * @param {Number} width - The width value of the rectangle.\n * @param {Number} height - The width value of the rectangle.\n */\nvar Rectangle = function(x, y, width, height) {\n\n  Path.call(this, [\n    new Anchor(),\n    new Anchor(),\n    new Anchor(),\n    new Anchor()\n    // new Anchor() // TODO: Figure out how to handle this for `beginning` / `ending` animations\n  ], true, false, true);\n\n  /**\n   * @name Two.Rectangle#width\n   * @property {Number} - The size of the width of the rectangle.\n   */\n  this.width = width;\n  /**\n   * @name Two.Rectangle#height\n   * @property {Number} - The size of the height of the rectangle.\n   */\n  this.height = height;\n\n  /**\n   * @name Two.Rectangle#origin\n   * @property {Number} - A two-component vector describing the origin offset to draw the rectangle. Default is `0, 0`.\n   */\n  this.origin = new Vector();\n  this.translation.set(x, y);\n\n  this._update();\n\n};\n\n_.extend(Rectangle, {\n\n  /**\n   * @name Two.Rectangle.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Rectangle}.\n   */\n  Properties: ['width', 'height'],\n\n  /**\n   * @name Two.Rectangle.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Rectangle} to any object. Handy if you'd like to extend the {@link Two.Rectangle} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    Path.MakeObservable(object);\n    _.each(Rectangle.Properties, defineGetterSetter, object);\n\n    Object.defineProperty(object, 'origin', {\n      enumerable: true,\n      get: function() {\n        return this._origin;\n      },\n      set: function(v) {\n        if (this._origin) {\n          this._origin.unbind(Events.Types.change, this._renderer.flagVertices);\n        }\n        this._origin = v;\n        this._origin.bind(Events.Types.change, this._renderer.flagVertices);\n        this._renderer.flagVertices();\n      }\n    });\n\n  }\n\n});\n\n_.extend(Rectangle.prototype, Path.prototype, {\n\n  /**\n   * @name Two.Rectangle#_flagWidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Rectangle#width} needs updating.\n   */\n  _flagWidth: 0,\n  /**\n   * @name Two.Rectangle#_flagHeight\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Rectangle#height} needs updating.\n   */\n  _flagHeight: 0,\n\n  /**\n   * @name Two.Rectangle#_width\n   * @private\n   * @see {@link Two.Rectangle#width}\n   */\n  _width: 0,\n  /**\n   * @name Two.Rectangle#_height\n   * @private\n   * @see {@link Two.Rectangle#height}\n   */\n  _height: 0,\n\n  _origin: null,\n\n  constructor: Rectangle,\n\n  /**\n   * @name Two.Rectangle#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagWidth || this._flagHeight) {\n\n      var xr = this._width / 2;\n      var yr = this._height / 2;\n\n      this.vertices[0].set(-xr, -yr).add(this._origin).command = Commands.move;\n      this.vertices[1].set(xr, -yr).add(this._origin).command = Commands.line;\n      this.vertices[2].set(xr, yr).add(this._origin).command = Commands.line;\n      this.vertices[3].set(-xr, yr).add(this._origin).command = Commands.line;\n      // FYI: Two.Sprite and Two.ImageSequence have 4 verts\n      if (this.vertices[4]) {\n        this.vertices[4].set(-xr, -yr).add(this._origin).command = Commands.line;\n      }\n\n    }\n\n    Path.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Rectangle#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagWidth = this._flagHeight = false;\n    Path.prototype.flagReset.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Rectangle#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Rectangle}\n   * @description Create a new instance of {@link Two.Rectangle} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var clone = new Rectangle(0, 0, this.width, this.height);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Rectangle#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n    object.width = this.width;\n    object.height = this.height;\n    object.origin = this.origin.toObject();\n    return object;\n\n  }\n\n});\n\nRectangle.MakeObservable(Rectangle.prototype);\n\n/**\n * @name Two.RoundedRectangle\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the rounded rectangle.\n * @param {Number} [y=0] - The y position of the rounded rectangle.\n * @param {Number} width - The width value of the rounded rectangle.\n * @param {Number} height - The width value of the rounded rectangle.\n * @param {Number} radius - The radius value of the rounded rectangle.\n * @param {Number} [resolution=12] - The number of vertices used to construct the rounded rectangle.\n */\nvar RoundedRectangle = function(ox, oy, width, height, radius) {\n\n  if (typeof radius === 'undefined') {\n    radius = Math.floor(Math.min(width, height) / 12);\n  }\n\n  var amount = 10;\n\n  var points = [];\n  for (var i = 0; i < amount; i++) {\n    points.push(\n      new Anchor(0, 0, 0, 0, 0, 0,\n        i === 0 ? Commands.move : Commands.curve)\n    );\n  }\n\n  // points[points.length - 1].command = Two.Commands.close;\n\n  Path.call(this, points);\n\n  this.closed = true;\n  this.automatic = false;\n\n  this._renderer.flagRadius = RoundedRectangle.FlagRadius.bind(this);\n\n  /**\n   * @name Two.RoundedRectangle#width\n   * @property {Number} - The width of the rounded rectangle.\n   */\n  this.width = width;\n  /**\n   * @name Two.RoundedRectangle#height\n   * @property {Number} - The height of the rounded rectangle.\n   */\n  this.height = height;\n  /**\n   * @name Two.RoundedRectangle#radius\n   * @property {Number} - The size of the radius of the rounded rectangle.\n   */\n  this.radius = radius;\n\n  this._update();\n  this.translation.set(ox, oy);\n\n};\n\n_.extend(RoundedRectangle, {\n\n  /**\n   * @name Two.RoundedRectangle.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.RoundedRectangle}.\n   */\n  Properties: ['width', 'height'],\n\n  /**\n   * @name Two.RoundedRectangle.FlagRadius\n   * @property {Function} - A convenience function to trigger the flag for radius changing.\n   */\n  FlagRadius: function() {\n    this._flagRadius = true;\n  },\n\n  /**\n   * @name Two.RoundedRectangle.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.RoundedRectangle} to any object. Handy if you'd like to extend the {@link Two.RoundedRectangle} class on a custom class.\n   */\n  MakeObservable: function(object) {\n\n    Path.MakeObservable(object);\n    _.each(RoundedRectangle.Properties, defineGetterSetter, object);\n\n    Object.defineProperty(object, 'radius', {\n      enumerable: true,\n      get: function() {\n        return this._radius;\n      },\n      set: function(v) {\n\n        if (this._radius instanceof Vector) {\n          this._radius.unbind(Events.Types.change, this._renderer.flagRadius);\n        }\n\n        this._radius = v;\n\n        if (this._radius instanceof Vector) {\n          this._radius.bind(Events.Types.change, this._renderer.flagRadius);\n        }\n\n        this._flagRadius = true;\n\n      }\n    });\n\n  }\n\n});\n\n_.extend(RoundedRectangle.prototype, Path.prototype, {\n\n  /**\n   * @name Two.RoundedRectangle#_flagWidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#width} needs updating.\n   */\n  _flagWidth: false,\n  /**\n   * @name Two.RoundedRectangle#_flagHeight\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#height} needs updating.\n   */\n  _flagHeight: false,\n  /**\n   * @name Two.RoundedRectangle#_flagRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.RoundedRectangle#radius} needs updating.\n   */\n  _flagRadius: false,\n\n  /**\n   * @name Two.RoundedRectangle#_width\n   * @private\n   * @see {@link Two.RoundedRectangle#width}\n   */\n  _width: 0,\n  /**\n   * @name Two.RoundedRectangle#_height\n   * @private\n   * @see {@link Two.RoundedRectangle#height}\n   */\n  _height: 0,\n  /**\n   * @name Two.RoundedRectangle#_radius\n   * @private\n   * @see {@link Two.RoundedRectangle#radius}\n   */\n  _radius: 0,\n\n  constructor: RoundedRectangle,\n\n  /**\n   * @name Two.RoundedRectangle#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagWidth || this._flagHeight || this._flagRadius) {\n\n      var width = this._width;\n      var height = this._height;\n\n      var rx, ry;\n\n      if (this._radius instanceof Vector) {\n        rx = this._radius.x;\n        ry = this._radius.y;\n      } else {\n        rx = this._radius;\n        ry = this._radius;\n      }\n\n      var v;\n      var w = width / 2;\n      var h = height / 2;\n\n      v = this.vertices[0];\n      v.x = - (w - rx);\n      v.y = - h;\n\n      // Upper Right Corner\n\n      v = this.vertices[1];\n      v.x = (w - rx);\n      v.y = - h;\n      v.controls.left.clear();\n      v.controls.right.x = rx;\n      v.controls.right.y = 0;\n\n      v = this.vertices[2];\n      v.x = w;\n      v.y = - (h - ry);\n      v.controls.right.clear();\n      v.controls.left.clear();\n\n      // Bottom Right Corner\n\n      v = this.vertices[3];\n      v.x = w;\n      v.y = (h - ry);\n      v.controls.left.clear();\n      v.controls.right.x = 0;\n      v.controls.right.y = ry;\n\n      v = this.vertices[4];\n      v.x = (w - rx);\n      v.y = h;\n      v.controls.right.clear();\n      v.controls.left.clear();\n\n      // Bottom Left Corner\n\n      v = this.vertices[5];\n      v.x = - (w - rx);\n      v.y = h;\n      v.controls.left.clear();\n      v.controls.right.x = - rx;\n      v.controls.right.y = 0;\n\n      v = this.vertices[6];\n      v.x = - w;\n      v.y = (h - ry);\n      v.controls.left.clear();\n      v.controls.right.clear();\n\n      // Upper Left Corner\n\n      v = this.vertices[7];\n      v.x = - w;\n      v.y = - (h - ry);\n      v.controls.left.clear();\n      v.controls.right.x = 0;\n      v.controls.right.y = - ry;\n\n      v = this.vertices[8];\n      v.x = - (w - rx);\n      v.y = - h;\n      v.controls.left.clear();\n      v.controls.right.clear();\n\n      v = this.vertices[9];\n      v.copy(this.vertices[8]);\n\n    }\n\n    Path.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.RoundedRectangle#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagWidth = this._flagHeight = this._flagRadius = false;\n    Path.prototype.flagReset.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.RoundedRectangle#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.RoundedRectangle}\n   * @description Create a new instance of {@link Two.RoundedRectangle} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var width = this.width;\n    var height = this.height;\n    var radius = this.radius;\n\n    var clone = new RoundedRectangle(0, 0, width, height, radius);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.RoundedRectangle#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(RoundedRectangle.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    object.radius = typeof this.radius === 'number'\n      ? this.radius : this.radius.toObject();\n\n    return object;\n\n  }\n\n});\n\nRoundedRectangle.MakeObservable(RoundedRectangle.prototype);\n\n/**\n * @name Two.Text\n * @class\n * @extends Two.Shape\n * @param {String} message - The String to be rendered to the scene.\n * @param {Number} [x=0] - The position in the x direction for the object.\n * @param {Number} [y=0] - The position in the y direction for the object.\n * @param {Object} [styles] - An object where styles are applied. Attribute must exist in Two.Text.Properties.\n * @description This is a primitive class for creating drawable text that can be added to the scenegraph.\n */\nvar Text = function(message, x, y, styles) {\n\n  Shape.call(this);\n\n  this._renderer.type = 'text';\n  this._renderer.flagFill = Text.FlagFill.bind(this);\n  this._renderer.flagStroke = Text.FlagStroke.bind(this);\n\n  this.value = message;\n\n  if (typeof x === 'number') {\n      this.translation.x = x;\n  }\n  if (typeof y === 'number') {\n      this.translation.y = y;\n  }\n\n  /**\n   * @name Two.Text#dashes\n   * @property {Number[]} - Array of numbers. Odd indices represent dash length. Even indices represent dash space.\n   * @description A list of numbers that represent the repeated dash length and dash space applied to the stroke of the text.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more information on the SVG stroke-dasharray attribute.\n   */\n  this.dashes = [];\n\n  /**\n   * @name Two.Text#dashes#offset\n   * @property {Number} - A number in pixels to offset {@link Two.Text#dashes} display.\n   */\n  this.dashes.offset = 0;\n\n  if (!_.isObject(styles)) {\n    return this;\n  }\n\n  _.each(Text.Properties, function(property) {\n\n    if (property in styles) {\n      this[property] = styles[property];\n    }\n\n  }, this);\n\n};\n\n_.extend(Text, {\n\n  /**\n   * @name Two.Text.Ratio\n   * @property {Number} - Approximate aspect ratio of a typeface's character width to height.\n   */\n  Ratio: 0.6,\n\n  /**\n   * @name Two.Text.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Text}.\n   */\n  Properties: [\n    'value', 'family', 'size', 'leading', 'alignment', 'linewidth', 'style',\n    'weight', 'decoration', 'baseline', 'opacity', 'visible', 'className',\n    'fill', 'stroke',\n  ],\n\n  /**\n   * @name Two.Text.FlagFill\n   * @function\n   * @description Cached method to let renderers know the fill property have been updated on a {@link Two.Text}.\n   */\n  FlagFill: function() {\n    this._flagFill = true;\n  },\n\n  /**\n   * @name Two.Text.FlagStroke\n   * @function\n   * @description Cached method to let renderers know the stroke property have been updated on a {@link Two.Text}.\n   */\n  FlagStroke: function() {\n    this._flagStroke = true;\n  },\n\n  MakeObservable: function(object) {\n\n    Shape.MakeObservable(object);\n\n    _.each(Text.Properties.slice(0, 12), defineGetterSetter, object);\n\n    Object.defineProperty(object, 'fill', {\n      enumerable: true,\n      get: function() {\n        return this._fill;\n      },\n      set: function(f) {\n\n        if (this._fill instanceof Gradient\n          || this._fill instanceof LinearGradient\n          || this._fill instanceof RadialGradient\n          || this._fill instanceof Texture) {\n          this._fill.unbind(Events.Types.change, this._renderer.flagFill);\n        }\n\n        this._fill = f;\n        this._flagFill = true;\n\n        if (this._fill instanceof Gradient\n          || this._fill instanceof LinearGradient\n          || this._fill instanceof RadialGradient\n          || this._fill instanceof Texture) {\n          this._fill.bind(Events.Types.change, this._renderer.flagFill);\n        }\n\n      }\n    });\n\n    Object.defineProperty(object, 'stroke', {\n      enumerable: true,\n      get: function() {\n        return this._stroke;\n      },\n      set: function(f) {\n\n        if (this._stroke instanceof Gradient\n          || this._stroke instanceof LinearGradient\n          || this._stroke instanceof RadialGradient\n          || this._stroke instanceof Texture) {\n          this._stroke.unbind(Events.Types.change, this._renderer.flagStroke);\n        }\n\n        this._stroke = f;\n        this._flagStroke = true;\n\n        if (this._stroke instanceof Gradient\n          || this._stroke instanceof LinearGradient\n          || this._stroke instanceof RadialGradient\n          || this._stroke instanceof Texture) {\n          this._stroke.bind(Events.Types.change, this._renderer.flagStroke);\n        }\n\n      }\n    });\n\n    Object.defineProperty(object, 'clip', {\n      enumerable: true,\n      get: function() {\n        return this._clip;\n      },\n      set: function(v) {\n        this._clip = v;\n        this._flagClip = true;\n      }\n    });\n\n    Object.defineProperty(object, 'dashes', {\n      enumerable: true,\n      get: function() {\n        return this._dashes;\n      },\n      set: function(v) {\n        if (typeof v.offset !== 'number') {\n          v.offset = this._dashes.offset || 0;\n        }\n        this._dashes = v;\n      }\n    });\n\n  }\n\n});\n\n_.extend(Text.prototype, Shape.prototype, {\n\n  // Flags\n  // http://en.wikipedia.org/wiki/Flag\n\n  /**\n   * @name Two.Text#_flagValue\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#value} need updating.\n   */\n  _flagValue: true,\n\n  /**\n   * @name Two.Text#_flagFamily\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#family} need updating.\n   */\n  _flagFamily: true,\n\n  /**\n   * @name Two.Text#_flagSize\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#size} need updating.\n   */\n  _flagSize: true,\n\n  /**\n   * @name Two.Text#_flagLeading\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#leading} need updating.\n   */\n  _flagLeading: true,\n\n  /**\n   * @name Two.Text#_flagAlignment\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#alignment} need updating.\n   */\n  _flagAlignment: true,\n\n  /**\n   * @name Two.Text#_flagBaseline\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#baseline} need updating.\n   */\n  _flagBaseline: true,\n\n  /**\n   * @name Two.Text#_flagStyle\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#style} need updating.\n   */\n  _flagStyle: true,\n\n  /**\n   * @name Two.Text#_flagWeight\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#weight} need updating.\n   */\n  _flagWeight: true,\n\n  /**\n   * @name Two.Text#_flagDecoration\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#decoration} need updating.\n   */\n  _flagDecoration: true,\n\n  /**\n   * @name Two.Text#_flagFill\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#fill} need updating.\n   */\n  _flagFill: true,\n\n  /**\n   * @name Two.Text#_flagStroke\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#stroke} need updating.\n   */\n  _flagStroke: true,\n\n  /**\n   * @name Two.Text#_flagLinewidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#linewidth} need updating.\n   */\n  _flagLinewidth: true,\n\n  /**\n   * @name Two.Text#_flagOpacity\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#opacity} need updating.\n   */\n  _flagOpacity: true,\n\n  /**\n   * @name Two.Text#_flagClassName\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#className} need updating.\n   */\n  _flagClassName: true,\n\n  /**\n   * @name Two.Text#_flagVisible\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#visible} need updating.\n   */\n  _flagVisible: true,\n\n  /**\n   * @name Two.Text#_flagClip\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Text#clip} need updating.\n   */\n  _flagClip: false,\n\n  // Underlying Properties\n\n  /**\n   * @name Two.Text#value\n   * @property {String} - The characters to be rendered to the the screen. Referred to in the documentation sometimes as the `message`.\n   */\n  _value: '',\n\n  /**\n   * @name Two.Text#family\n   * @property {String} - The font family Two.js should attempt to regsiter for rendering. The default value is `'sans-serif'`. Comma separated font names can be supplied as a \"stack\", similar to the CSS implementation of `font-family`.\n   */\n  _family: 'sans-serif',\n\n  /**\n   * @name Two.Text#size\n   * @property {Number} - The font size in Two.js point space. Defaults to `13`.\n   */\n  _size: 13,\n\n  /**\n   * @name Two.Text#leading\n   * @property {Number} - The height between lines measured from base to base in Two.js point space. Defaults to `17`.\n   */\n  _leading: 17,\n\n  /**\n   * @name Two.Text#alignment\n   * @property {String} - Alignment of text in relation to {@link Two.Text#translation}'s coordinates. Possible values include `'left'`, `'center'`, `'right'`. Defaults to `'center'`.\n   */\n  _alignment: 'center',\n\n  /**\n   * @name Two.Text#baseline\n   * @property {String} - The vertical aligment of the text in relation to {@link Two.Text#translation}'s coordinates. Possible values include `'top'`, `'middle'`, `'bottom'`, and `'baseline'`. Defaults to `'baseline'`.\n   */\n  _baseline: 'middle',\n\n  /**\n   * @name Two.Text#style\n   * @property {String} - The font's style. Possible values include '`normal`', `'italic'`. Defaults to `'normal'`.\n   */\n  _style: 'normal',\n\n  /**\n   * @name Two.Text#weight\n   * @property {Number} - A number at intervals of 100 to describe the font's weight. This compatibility varies with the typeface's variant weights. Larger values are bolder. Smaller values are thinner. Defaults to `'500'`.\n   */\n  _weight: 500,\n\n  /**\n   * @name Two.Text#decoration\n   * @property {String} - String to delineate whether text should be decorated with for instance an `'underline'`. Defaults to `'none'`.\n   */\n  _decoration: 'none',\n\n  /**\n   * @name Two.Text#fill\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what the text object should be filled in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  _fill: '#000',\n\n  /**\n   * @name Two.Text#stroke\n   * @property {(CssColor|Two.Gradient|Two.Texture)} - The value of what the text object should be filled in with.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/color_value} for more information on CSS Colors.\n   */\n  _stroke: 'transparent',\n\n  /**\n   * @name Two.Text#linewidth\n   * @property {Number} - The thickness in pixels of the stroke.\n   */\n  _linewidth: 1,\n\n  /**\n   * @name Two.Text#opacity\n   * @property {Number} - The opaqueness of the text object.\n   * @nota-bene Can be used in conjunction with CSS Colors that have an alpha value.\n   */\n  _opacity: 1,\n\n  /**\n   * @name Two.Text#className\n   * @property {String} - A class to be applied to the element to be compatible with CSS styling. Only available for the {@link Two.SvgRenderer}.\n   */\n  _className: '',\n\n  /**\n   * @name Two.Text#visible\n   * @property {Boolean} - Display the text object or not.\n   * @nota-bene For {@link Two.CanvasRenderer} and {@link Two.WebGLRenderer} when set to false all updating is disabled improving performance dramatically with many objects in the scene.\n   */\n  _visible: true,\n\n  /**\n   * @name Two.Text#clip\n   * @property {Two.Shape} - Object to define clipping area.\n   * @nota-bene This property is currently not working becuase of SVG spec issues found here {@link https://code.google.com/p/chromium/issues/detail?id=370951}.\n   */\n  _clip: false,\n\n  /**\n   * @name Two.Text#_dashes\n   * @private\n   * @see {@link Two.Text#dashes}\n   */\n  _dashes: [],\n\n  constructor: Text,\n\n  /**\n   * @name Two.Text#remove\n   * @function\n   * @description Remove self from the scene / parent.\n   */\n  remove: function() {\n\n    if (!this.parent) {\n      return this;\n    }\n\n    this.parent.remove(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Text#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Text}\n   * @description Create a new instance of {@link Two.Text} with the same properties of the current text object.\n   */\n  clone: function(parent) {\n\n    var clone = new Text(this.value);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    _.each(Text.Properties, function(property) {\n      clone[property] = this[property];\n    }, this);\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone._update();\n\n  },\n\n  /**\n   * @name Two.Text#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the text object.\n   */\n  toObject: function() {\n\n    var result = {\n      translation: this.translation.toObject(),\n      rotation: this.rotation,\n      scale: this.scale\n    };\n\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n\n    _.each(Text.Properties, function(property) {\n      result[property] = this[property];\n    }, this);\n\n    return result;\n\n  },\n\n  /**\n   * @name Two.Text#noFill\n   * @function\n   * @description Short hand method to set fill to `transparent`.\n   */\n  noFill: function() {\n    this.fill = 'transparent';\n    return this;\n  },\n\n  /**\n   * @name Two.Text#noStroke\n   * @function\n   * @description Short hand method to set stroke to `transparent`.\n   */\n  noStroke: function() {\n    this.stroke = undefined;\n    this.linewidth = undefined;\n    return this;\n  },\n\n  // A shim to not break `getBoundingClientRect` calls.\n  // TODO: Implement a way to calculate proper bounding\n  // boxes of `Two.Text`.\n\n  /**\n   * @name Two.Text#getBoundingClientRect\n   * @function\n   * @param {Boolean} [shallow=false] - Describes whether to calculate off local matrix or world matrix.\n   * @returns {Object} - Returns object with top, left, right, bottom, width, height attributes.\n   * @description Return an object with top, left, right, bottom, width, and height parameters of the text object.\n   */\n  getBoundingClientRect: function(shallow) {\n\n    var matrix, v;\n    var left, right, top, bottom;\n\n    // TODO: Update this to not __always__ update. Just when it needs to.\n    this._update(true);\n\n    matrix = shallow ? this._matrix : getComputedMatrix(this);\n\n    var height = this.leading;\n    var width = this.value.length * this.size * Text.Ratio;\n\n    switch (this.alignment) {\n      case 'left':\n        left = 0;\n        right = width;\n        break;\n      case 'right':\n        left = - width;\n        right = 0;\n        break;\n      default:\n        left = - width / 2;\n        right = width / 2;\n    }\n\n    switch (this.baseline) {\n      case 'top':\n        top = 0;\n        bottom = height;\n        break;\n      case 'bottom':\n        top = - height;\n        bottom = 0;\n        break;\n      default:\n        top = - height / 2;\n        bottom = height / 2;\n    }\n\n    v = matrix.multiply(left, top, 1);\n\n    top = v.y;\n    left = v.x;\n\n    v = matrix.multiply(right, bottom, 1);\n\n    right = v.x;\n    bottom = v.y;\n\n    return {\n      top: top,\n      left: left,\n      right: right,\n      bottom: bottom,\n      width: right - left,\n      height: bottom - top\n    };\n\n  },\n\n  /**\n   * @name Two.Text#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagValue = this._flagFamily = this._flagSize =\n      this._flagLeading = this._flagAlignment = this._flagFill =\n      this._flagStroke = this._flagLinewidth = this._flagOpacity =\n      this._flagVisible = this._flagClip = this._flagDecoration =\n      this._flagClassName = this._flagBaseline = this._flagWeight =\n        this._flagStyle = false;\n\n    Shape.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nText.MakeObservable(Text.prototype);\n\nvar alignments = {\n  start: 'left',\n  middle: 'center',\n  end: 'right'\n};\n\n/**\n * @name Utils.getAlignment\n * @function\n * @param {AlignmentString}\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor}\n */\nvar getAlignment = function(anchor) {\n  return alignments[anchor];\n};\n\nvar getBaseline = function(node) {\n  var a = node.getAttribute('dominant-baseline');\n  var b = node.getAttribute('alignment-baseline');\n  return a || b;\n};\n\n/**\n * @name Utils.extractCSSText\n * @function\n * @param {String} text - The CSS text body to be parsed and extracted.\n * @param {Object} [styles] - The styles object to apply CSS key values to.\n * @returns {Object} styles\n * @description Parse CSS text body and apply them as key value pairs to a JavaScript object.\n */\nvar extractCSSText = function(text, styles) {\n\n  var commands, command, name, value;\n\n  if (!styles) {\n    styles = {};\n  }\n\n  commands = text.split(';');\n\n  for (var i = 0; i < commands.length; i++) {\n    command = commands[i].split(':');\n    name = command[0];\n    value = command[1];\n    if (typeof name === 'undefined' || typeof value === 'undefined') {\n      continue;\n    }\n    styles[name] = value.replace(/\\s/, '');\n  }\n\n  return styles;\n\n};\n\n/**\n * @name Utils.getSvgStyles\n * @function\n * @param {SvgNode} node - The SVG node to parse.\n * @returns {Object} styles\n * @description Get the CSS comands from the `style` attribute of an SVG node and apply them as key value pairs to a JavaScript object.\n */\nvar getSvgStyles = function(node) {\n\n  var styles = {};\n  var attributes = getSvgAttributes(node);\n  var length = Math.max(attributes.length, node.style.length);\n\n  for (var i = 0; i < length; i++) {\n\n    var command = node.style[i];\n    var attribute = attributes[i];\n\n    if (command) {\n      styles[command] = node.style[command];\n    }\n    if (attribute) {\n      styles[attribute] = node.getAttribute(attribute);\n    }\n\n  }\n\n  return styles;\n\n};\n\nvar getSvgAttributes = function(node) {\n\n  var attributes = node.getAttributeNames();\n\n  // Reserved attributes to remove\n  var keywords = ['id', 'class', 'transform', 'xmlns', 'viewBox'];\n\n  for (var i = 0; i < keywords.length; i++) {\n    var keyword = keywords[i];\n    var index = Array.prototype.indexOf.call(attributes, keyword);\n    if (index >= 0) {\n      attributes.splice(index, 1);\n    }\n  }\n\n  return attributes;\n\n};\n\n/**\n * @name Utils.applySvgViewBox\n * @function\n * @param {Two.Shape} node - The Two.js object to apply viewbox matrix to\n * @param {String} value - The viewBox value from the SVG attribute\n * @returns {Two.Shape} node\n * @description Applies the transform of the SVG Viewbox on a given node.\n */\nvar applySvgViewBox = function(node, value) {\n\n  var elements = value.split(/\\s/);\n\n  var x = parseFloat(elements[0]);\n  var y = parseFloat(elements[1]);\n  var width = parseFloat(elements[2]);\n  var height = parseFloat(elements[3]);\n\n  var s = Math.min(this.width / width, this.height / height);\n\n  node.translation.x -= x * s;\n  node.translation.y -= y * s;\n  node.scale = s;\n\n  return node;\n\n};\n\nvar extrapolateScientificNotation = function(command) {\n  var regex = /[\\+\\-]?[\\d\\.]*e[\\-\\+]?\\d*/ig;\n  var matches = command.match(regex);\n  if (matches && matches.length > 0) {\n    for (var i = 0; i < matches.length; i++) {\n      var match = matches[i];\n      var items = match.split(/e/i);\n      var value = parseFloat(items[0]);\n      var coefficient = Math.pow(10, parseFloat(items[1]));\n      if (coefficient < 0) {\n        value /= coefficient;\n      } else {\n        value *= coefficient;\n      }\n      command = command.replace(match, value);\n    }\n  }\n  return command;\n};\n\n/**\n * @name Utils.applySvgAttributes\n * @function\n * @param {SvgNode} node - An SVG Node to extrapolate attributes from.\n * @param {Two.Shape} elem - The Two.js object to apply extrapolated attributes to.\n * @returns {Two.Shape} The Two.js object passed now with applied attributes.\n * @description This function iterates through an SVG Node's properties and stores ones of interest. It tries to resolve styles applied via CSS as well.\n * @TODO Reverse calculate {@link Two.Gradient}s for fill / stroke of any given path.\n */\nvar applySvgAttributes = function(node, elem, parentStyles) {\n\n  var  styles = {}, attributes = {}, extracted = {}, i, key, value, attr;\n\n  // Not available in non browser environments\n  if (root$1.getComputedStyle) {\n    // Convert CSSStyleDeclaration to a normal object\n    var computedStyles = root$1.getComputedStyle(node);\n    i = computedStyles.length;\n\n    while (i--) {\n      key = computedStyles[i];\n      value = computedStyles[key];\n      // Gecko returns undefined for unset properties\n      // Webkit returns the default value\n      if (typeof value !== 'undefined') {\n        styles[key] = value;\n      }\n    }\n  }\n\n  // Convert NodeMap to a normal object\n  for (i = 0; i < node.attributes.length; i++) {\n    attr = node.attributes[i];\n    if (/style/i.test(attr.nodeName)) {\n      extractCSSText(attr.value, extracted);\n    } else {\n      attributes[attr.nodeName] = attr.value;\n    }\n  }\n\n  // Getting the correct opacity is a bit tricky, since SVG path elements don't\n  // support opacity as an attribute, but you can apply it via CSS.\n  // So we take the opacity and set (stroke/fill)-opacity to the same value.\n  if (typeof styles.opacity !== 'undefined') {\n    styles['stroke-opacity'] = styles.opacity;\n    styles['fill-opacity'] = styles.opacity;\n    delete styles.opacity;\n  }\n\n  // Merge attributes and applied styles (attributes take precedence)\n  if (parentStyles) {\n    _.defaults(styles, parentStyles);\n  }\n  _.extend(styles, extracted, attributes);\n\n  // Similarly visibility is influenced by the value of both display and visibility.\n  // Calculate a unified value here which defaults to `true`.\n  styles.visible = !(typeof styles.display === 'undefined' && /none/i.test(styles.display))\n    || (typeof styles.visibility === 'undefined' && /hidden/i.test(styles.visibility));\n\n  // Now iterate the whole thing\n  for (key in styles) {\n    value = styles[key];\n\n    switch (key) {\n      case 'transform':\n        // TODO: Check this out https://github.com/paperjs/paper.js/blob/develop/src/svg/SvgImport.js#L315\n        if (/none/i.test(value)) break;\n        var m = (node.transform && node.transform.baseVal && node.transform.baseVal.length > 0)\n          ? node.transform.baseVal[0].matrix\n          : (node.getCTM ? node.getCTM() : null);\n\n        // Might happen when transform string is empty or not valid.\n        if (m === null) break;\n\n        if (Constants.AutoCalculateImportedMatrices) {\n\n          // Decompose and infer Two.js related properties.\n          var transforms = decomposeMatrix(m);\n\n          elem.translation.set(transforms.translateX, transforms.translateY);\n          elem.rotation = Math.PI * (transforms.rotation / 180);\n          elem.scale = new Vector(transforms.scaleX, transforms.scaleY);\n\n          var x = parseFloat((styles.x + '').replace('px'));\n          var y = parseFloat((styles.y + '').replace('px'));\n\n          // Override based on attributes.\n          if (x) {\n            elem.translation.x = x;\n          }\n\n          if (y) {\n            elem.translation.y = y;\n          }\n\n        } else {\n\n          // Edit the underlying matrix and don't force an auto calc.\n          var m = node.getCTM();\n          elem._matrix.manual = true;\n          elem._matrix.set(m.a, m.b, m.c, m.d, m.e, m.f);\n\n        }\n\n        break;\n      case 'viewBox':\n        applySvgViewBox.call(this, elem, value);\n        break;\n      case 'visible':\n        if (elem instanceof Group) {\n          elem._visible = value;\n          break;\n        }\n        elem.visible = value;\n        break;\n      case 'stroke-linecap':\n        if (elem instanceof Group) {\n          elem._cap = value;\n          break;\n        }\n        elem.cap = value;\n        break;\n      case 'stroke-linejoin':\n        if (elem instanceof Group) {\n          elem._join = value;\n          break;\n        }\n        elem.join = value;\n        break;\n      case 'stroke-miterlimit':\n        if (elem instanceof Group) {\n          elem._miter = value;\n          break;\n        }\n        elem.miter = value;\n        break;\n      case 'stroke-width':\n        if (elem instanceof Group) {\n          elem._linewidth = parseFloat(value);\n          break;\n        }\n        elem.linewidth = parseFloat(value);\n        break;\n      case 'opacity':\n      case 'stroke-opacity':\n      case 'fill-opacity':\n        // Only apply styles to rendered shapes\n        // in the scene.\n        if (elem instanceof Group) {\n          elem._opacity = parseFloat(value);\n          break;\n        }\n        elem.opacity = parseFloat(value);\n        break;\n      case 'fill':\n      case 'stroke':\n        if (elem instanceof Group) {\n          key = '_' + key;\n        }\n        if (/url\\(#.*\\)/i.test(value)) {\n          var scene = getScene(this);\n          elem[key] = scene.getById(\n            value.replace(/url\\(#(.*)\\)/i, '$1'));\n        } else {\n          elem[key] = (/none/i.test(value)) ? 'transparent' : value;\n        }\n        break;\n      case 'id':\n        elem.id = value;\n        // Overwritten id for non-conflicts on same page SVG documents\n        // TODO: Make this non-descructive\n        node.id = value + '-' + Constants.Identifier + 'applied';\n        break;\n      case 'class':\n      case 'className':\n        elem.classList = value.split(' ');\n        break;\n      case 'x':\n      case 'y':\n        var ca = elem instanceof Gradient;\n        var cb = elem instanceof LinearGradient;\n        var cc = elem instanceof RadialGradient;\n        if (ca || cb || cc) {\n          break;\n        }\n        if (value.match('[a-z%]$') && !value.endsWith('px')) {\n          var error = new TwoError(\n            'only pixel values are supported with the ' + key + ' attribute.');\n          console.warn(error.name, error.message);\n        }\n        elem.translation[key] = parseFloat(value);\n        break;\n      case 'font-family':\n        if (elem instanceof Text) {\n          elem.family = value;\n        }\n        break;\n      case 'font-size':\n        if (elem instanceof Text) {\n          elem.size = value;\n        }\n        break;\n      case 'font-weight':\n        if (elem instanceof Text) {\n          elem.weight = value;\n        }\n        break;\n      case 'font-style':\n        if (elem instanceof Text) {\n          elem.style = value;\n        }\n        break;\n      case 'text-decoration':\n        if (elem instanceof Text) {\n          elem.decoration = value;\n        }\n        break;\n      case 'line-height':\n        if (elem instanceof Text) {\n          elem.leading = value;\n        }\n        break;\n    }\n  }\n\n  return styles;\n\n};\n\n/**\n * @name Utils.updateDefsCache\n * @function\n * @param {SvgNode} node - The SVG Node with which to update the defs cache.\n * @param {Object} Object - The defs cache to be updated.\n * @description Update the cache of children of <defs /> tags.\n */\nvar updateDefsCache = function(node, defsCache) {\n  for (var i = 0, l = node.childNodes.length; i < l; i++) {\n    var n = node.childNodes[i];\n    if (!n.id) continue;\n\n    var tagName = n.localName;\n    if (tagName === '#text') continue;\n\n    defsCache.add(n.id, n);\n  }\n};\n\n/**\n * @name Utils.getScene\n * @param {Two.Shape} node - The currently available object in the scenegraph.\n * @returns {Group} - The highest order {@link Two.Group} in the scenegraph.\n * @property {Function}\n */\nvar getScene = function(node) {\n\n  while (node.parent) {\n    node = node.parent;\n  }\n\n  return node.scene;\n\n};\n\n/**\n * @name Utils.read\n * @property {Object} read - A map of functions to read any number of SVG node types and create Two.js equivalents of them. Primarily used by the {@link Two#interpret} method.\n */\nvar read = {\n\n  svg: function(node) {\n\n    var defs = read.defs.current = new Registry();\n    var elements = node.getElementsByTagName('defs');\n\n    for (var i = 0; i < elements.length; i++) {\n      updateDefsCache(elements[i], defs);\n    }\n\n    var svg = read.g.call(this, node);\n    var viewBox = node.getAttribute('viewBox');\n\n    svg.defs = defs;  // Export out the <defs /> for later use\n    // Utils.applySvgViewBox(svg, viewBox);\n\n    delete read.defs.current;\n\n    return svg;\n\n  },\n\n  defs: function(node) {\n    return null;\n  },\n\n  use: function(node, styles) {\n\n    var href = node.getAttribute('href') || node.getAttribute('xlink:href');\n    if (!href) {\n      var error = new TwoError('encountered <use /> with no href.');\n      console.warn(error.name, error.message);\n      return null;\n    }\n\n    var id = href.slice(1);\n    if (!read.defs.current.contains(id)) {\n      var error = new TwoError(\n        'unable to find element for reference ' + href + '.');\n      console.warn(error.name, error.message);\n      return null;\n    }\n\n    var template = read.defs.current.get(id);\n    var fullNode = template.cloneNode(true);\n    var overwriteAttrs = ['x', 'y', 'width', 'height', 'href', 'xlink:href'];\n\n    for (var i = 0; i < node.attributes.length; i++) {\n      var attr = node.attributes[i];\n      var ca = overwriteAttrs.includes(attr.nodeName);\n      var cb = !fullNode.hasAttribute(attr.nodeName);\n      if (ca || cb) {\n        fullNode.setAttribute(attr.nodeName, attr.value);\n      }\n    }\n\n    var tagName = fullNode.localName;\n    return read[tagName].call(this, fullNode, styles);\n\n  },\n\n  g: function(node, parentStyles) {\n\n    var styles;\n    var group = new Group();\n\n    applySvgAttributes.call(this, node, group, parentStyles);\n\n    this.add(group);\n\n    // Switched up order to inherit more specific styles\n    styles = getSvgStyles.call(this, node);\n\n    for (var i = 0, l = node.childNodes.length; i < l; i++) {\n      var n = node.childNodes[i];\n      var tag = n.nodeName;\n      if (!tag) return;\n\n      var tagName = tag.replace(/svg:/ig, '').toLowerCase();\n\n      if (tagName in read) {\n        var o = read[tagName].call(group, n, styles);\n        if (!!o && !o.parent) {\n          group.add(o);\n        }\n      }\n    }\n\n    return group;\n\n  },\n\n  polygon: function(node, parentStyles) {\n\n    var points = node.getAttribute('points');\n\n    var verts = [];\n    points.replace(/(-?[\\d.?]+)[,|\\s](-?[\\d.?]+)/g, function(match, p1, p2) {\n      verts.push(new Anchor(parseFloat(p1), parseFloat(p2)));\n    });\n\n    var poly = new Path(verts, true).noStroke();\n    poly.fill = 'black';\n\n    applySvgAttributes.call(this, node, poly, parentStyles);\n\n    return poly;\n\n  },\n\n  polyline: function(node, parentStyles) {\n    var poly = read.polygon.call(this, node, parentStyles);\n    poly.closed = false;\n    return poly;\n  },\n\n  path: function(node, parentStyles) {\n\n    var path = node.getAttribute('d');\n    var points = [];\n    var closed = false, relative = false;\n\n    if (path) {\n\n      // Create a Two.Path from the paths.\n\n      var coord = new Anchor();\n      var control, coords;\n      var commands = path.match(/[a-df-z][^a-df-z]*/ig);\n      var last = commands.length - 1;\n\n      // Split up polybeziers\n\n      _.each(commands.slice(0), function(command, i) {\n\n        var number, fid, lid, numbers, first, s;\n        var j, ct, l, times;\n\n        command = extrapolateScientificNotation(command);\n\n        var type = command[0];\n        var lower = type.toLowerCase();\n        var items = command.slice(1).trim().split(/[\\s,]+|(?=\\s?[+-])/);\n        var result = [], bin;\n        var hasDoubleDecimals = false;\n\n        // Handle double decimal values e.g: 48.6037.71.8\n        // Like: https://m.abcsofchinese.com/images/svg/亼ji2.svg\n        for (j = 0; j < items.length; j++) {\n\n          number = items[j];\n          fid = number.indexOf('.');\n          lid = number.lastIndexOf('.');\n\n          if (fid !== lid) {\n\n            numbers = number.split('.');\n            first = numbers[0] + '.' + numbers[1];\n\n            items.splice(j, 1, first);\n\n            for (s = 2; s < numbers.length; s++) {\n              items.splice(j + s - 1, 0, '0.' + numbers[s]);\n            }\n\n            hasDoubleDecimals = true;\n\n          }\n\n        }\n\n        if (hasDoubleDecimals) {\n          command = type + items.join(',');\n        }\n\n        if (i <= 0) {\n          commands = [];\n        }\n\n        switch (lower) {\n          case 'h':\n          case 'v':\n            if (items.length > 1) {\n              bin = 1;\n            }\n            break;\n          case 'm':\n          case 'l':\n          case 't':\n            if (items.length > 2) {\n              bin = 2;\n            }\n            break;\n          case 's':\n          case 'q':\n            if (items.length > 4) {\n              bin = 4;\n            }\n            break;\n          case 'c':\n            if (items.length > 6) {\n              bin = 6;\n            }\n            break;\n          case 'a':\n            if (items.length > 7) {\n              bin = 7;\n            }\n            break;\n        }\n\n        // This means we have a polybezier.\n        if (bin) {\n\n          for (j = 0, l = items.length, times = 0; j < l; j+=bin) {\n\n            ct = type;\n            if (times > 0) {\n\n              switch (type) {\n                case 'm':\n                  ct = 'l';\n                  break;\n                case 'M':\n                  ct = 'L';\n                  break;\n              }\n\n            }\n\n            result.push(ct + items.slice(j, j + bin).join(' '));\n            times++;\n\n          }\n\n          commands = Array.prototype.concat.apply(commands, result);\n\n        } else {\n\n          commands.push(command);\n\n        }\n\n      });\n\n      // Create the vertices for our Two.Path\n\n      _.each(commands, function(command, i) {\n\n        var result, x, y;\n        var type = command[0];\n        var lower = type.toLowerCase();\n\n        coords = command.slice(1).trim();\n        coords = coords.replace(/(-?\\d+(?:\\.\\d*)?)[eE]([+-]?\\d+)/g, function(match, n1, n2) {\n          return parseFloat(n1) * Math.pow(10, n2);\n        });\n        coords = coords.split(/[\\s,]+|(?=\\s?[+-])/);\n        relative = type === lower;\n\n        var x1, y1, x2, y2, x3, y3, x4, y4, reflection;\n\n        switch (lower) {\n\n          case 'z':\n            if (i >= last) {\n              closed = true;\n            } else {\n              x = coord.x;\n              y = coord.y;\n              result = new Anchor(\n                x, y,\n                undefined, undefined,\n                undefined, undefined,\n                Commands.close\n              );\n              // Make coord be the last `m` command\n              for (var j = points.length - 1; j >= 0; j--) {\n                var point = points[j];\n                if (/m/i.test(point.command)) {\n                  coord = point;\n                  break;\n                }\n              }\n            }\n            break;\n\n          case 'm':\n          case 'l':\n\n            control = undefined;\n\n            x = parseFloat(coords[0]);\n            y = parseFloat(coords[1]);\n\n            result = new Anchor(\n              x, y,\n              undefined, undefined,\n              undefined, undefined,\n              /m/i.test(lower) ? Commands.move : Commands.line\n            );\n\n            if (relative) {\n              result.addSelf(coord);\n            }\n\n            // result.controls.left.copy(result);\n            // result.controls.right.copy(result);\n\n            coord = result;\n            break;\n\n          case 'h':\n          case 'v':\n\n            var a = /h/i.test(lower) ? 'x' : 'y';\n            var b = /x/i.test(a) ? 'y' : 'x';\n\n            result = new Anchor(\n              undefined, undefined,\n              undefined, undefined,\n              undefined, undefined,\n              Commands.line\n            );\n            result[a] = parseFloat(coords[0]);\n            result[b] = coord[b];\n\n            if (relative) {\n              result[a] += coord[a];\n            }\n\n            // result.controls.left.copy(result);\n            // result.controls.right.copy(result);\n\n            coord = result;\n            break;\n\n          case 'c':\n          case 's':\n\n            x1 = coord.x;\n            y1 = coord.y;\n\n            if (!control) {\n              control = new Vector();//.copy(coord);\n            }\n\n            if (/c/i.test(lower)) {\n\n              x2 = parseFloat(coords[0]);\n              y2 = parseFloat(coords[1]);\n              x3 = parseFloat(coords[2]);\n              y3 = parseFloat(coords[3]);\n              x4 = parseFloat(coords[4]);\n              y4 = parseFloat(coords[5]);\n\n            } else {\n\n              // Calculate reflection control point for proper x2, y2\n              // inclusion.\n\n              reflection = getReflection(coord, control, relative);\n\n              x2 = reflection.x;\n              y2 = reflection.y;\n              x3 = parseFloat(coords[0]);\n              y3 = parseFloat(coords[1]);\n              x4 = parseFloat(coords[2]);\n              y4 = parseFloat(coords[3]);\n\n            }\n\n            if (relative) {\n              x2 += x1;\n              y2 += y1;\n              x3 += x1;\n              y3 += y1;\n              x4 += x1;\n              y4 += y1;\n            }\n\n            if (!_.isObject(coord.controls)) {\n              Anchor.AppendCurveProperties(coord);\n            }\n\n            coord.controls.right.set(x2 - coord.x, y2 - coord.y);\n            result = new Anchor(\n              x4, y4,\n              x3 - x4, y3 - y4,\n              undefined, undefined,\n              Commands.curve\n            );\n\n            coord = result;\n            control = result.controls.left;\n\n            break;\n\n          case 't':\n          case 'q':\n\n            x1 = coord.x;\n            y1 = coord.y;\n\n            if (!control) {\n              control = new Vector();\n            }\n\n            if (/q/i.test(lower)) {\n\n              x2 = parseFloat(coords[0]);\n              y2 = parseFloat(coords[1]);\n              x3 = parseFloat(coords[0]);\n              y3 = parseFloat(coords[1]);\n              x4 = parseFloat(coords[2]);\n              y4 = parseFloat(coords[3]);\n\n            } else {\n\n              reflection = getReflection(coord, control, relative);\n\n              x2 = reflection.x;\n              y2 = reflection.y;\n              x3 = reflection.x;\n              y3 = reflection.y;\n              x4 = parseFloat(coords[0]);\n              y4 = parseFloat(coords[1]);\n\n            }\n\n            if (relative) {\n              x2 += x1;\n              y2 += y1;\n              x3 += x1;\n              y3 += y1;\n              x4 += x1;\n              y4 += y1;\n            }\n\n            if (!_.isObject(coord.controls)) {\n              Anchor.AppendCurveProperties(coord);\n            }\n\n            coord.controls.right.set(\n              (x2 - coord.x) * 0.33, (y2 - coord.y) * 0.33);\n            result = new Anchor(\n              x4, y4,\n              x3 - x4, y3 - y4,\n              undefined, undefined,\n              Commands.curve\n            );\n\n            coord = result;\n            control = result.controls.left;\n\n            break;\n\n          case 'a':\n\n            x1 = coord.x;\n            y1 = coord.y;\n\n            var rx = parseFloat(coords[0]);\n            var ry = parseFloat(coords[1]);\n            var xAxisRotation = parseFloat(coords[2]);// * PI / 180;\n            var largeArcFlag = parseFloat(coords[3]);\n            var sweepFlag = parseFloat(coords[4]);\n\n            x4 = parseFloat(coords[5]);\n            y4 = parseFloat(coords[6]);\n\n            if (relative) {\n              x4 += x1;\n              y4 += y1;\n            }\n\n            var anchor = new Anchor(x4, y4);\n            anchor.command = Commands.arc;\n            anchor.rx = rx;\n            anchor.ry = ry;\n            anchor.xAxisRotation = xAxisRotation;\n            anchor.largeArcFlag = largeArcFlag;\n            anchor.sweepFlag = sweepFlag;\n\n            result = anchor;\n\n            coord = anchor;\n            control = undefined;\n\n            break;\n\n        }\n\n        if (result) {\n          if (Array.isArray(result)) {\n            points = points.concat(result);\n          } else {\n            points.push(result);\n          }\n        }\n\n      });\n\n    }\n\n    path = new Path(points, closed, undefined, true).noStroke();\n    path.fill = 'black';\n\n    var rect = path.getBoundingClientRect(true);\n\n    // Center objects to stay consistent\n    // with the rest of the Two.js API.\n    rect.centroid = {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2\n    };\n\n    _.each(path.vertices, function(v) {\n      v.subSelf(rect.centroid);\n    });\n\n    applySvgAttributes.call(this, node, path, parentStyles);\n\n    path.translation.addSelf(rect.centroid);\n\n    return path;\n\n  },\n\n  circle: function(node, parentStyles) {\n\n    var x = parseFloat(node.getAttribute('cx'));\n    var y = parseFloat(node.getAttribute('cy'));\n    var r = parseFloat(node.getAttribute('r'));\n\n    var circle = new Circle(0, 0, r).noStroke();\n    circle.fill = 'black';\n\n    applySvgAttributes.call(this, node, circle, parentStyles);\n\n    circle.translation.x = x;\n    circle.translation.y = y;\n\n    return circle;\n\n  },\n\n  ellipse: function(node, parentStyles) {\n\n    var x = parseFloat(node.getAttribute('cx'));\n    var y = parseFloat(node.getAttribute('cy'));\n    var width = parseFloat(node.getAttribute('rx'));\n    var height = parseFloat(node.getAttribute('ry'));\n\n    var ellipse = new Ellipse(0, 0, width, height).noStroke();\n    ellipse.fill = 'black';\n\n    applySvgAttributes.call(this, node, ellipse, parentStyles);\n\n    ellipse.translation.x = x;\n    ellipse.translation.y = y;\n\n    return ellipse;\n\n  },\n\n  rect: function(node, parentStyles) {\n\n    var rx = parseFloat(node.getAttribute('rx'));\n    var ry = parseFloat(node.getAttribute('ry'));\n\n    if (!_.isNaN(rx) || !_.isNaN(ry)) {\n      return read['rounded-rect'](node);\n    }\n\n    var x = parseFloat(node.getAttribute('x')) || 0;\n    var y = parseFloat(node.getAttribute('y')) || 0;\n    var width = parseFloat(node.getAttribute('width'));\n    var height = parseFloat(node.getAttribute('height'));\n\n    var w2 = width / 2;\n    var h2 = height / 2;\n\n    var rect = new Rectangle(0, 0, width, height)\n      .noStroke();\n    rect.fill = 'black';\n\n    applySvgAttributes.call(this, node, rect, parentStyles);\n\n    // For rectangles, (x, y) is the center of the shape rather than the top\n    // left corner.\n    rect.translation.x += w2;\n    rect.translation.y += h2;\n\n    return rect;\n\n  },\n\n  'rounded-rect': function(node, parentStyles) {\n\n    var x = parseFloat(node.getAttribute('x')) || 0;\n    var y = parseFloat(node.getAttribute('y')) || 0;\n    var rx = parseFloat(node.getAttribute('rx')) || 0;\n    var ry = parseFloat(node.getAttribute('ry')) || 0;\n\n    var width = parseFloat(node.getAttribute('width'));\n    var height = parseFloat(node.getAttribute('height'));\n\n    var w2 = width / 2;\n    var h2 = height / 2;\n    var radius = new Vector(rx, ry);\n\n    var rect = new RoundedRectangle(0, 0, width, height, radius)\n      .noStroke();\n    rect.fill = 'black';\n\n    applySvgAttributes.call(this, node, rect, parentStyles);\n\n    // For rectangles, (x, y) is the center of the shape rather than the top\n    // left corner.\n    rect.translation.x += w2;\n    rect.translation.y += h2;\n\n    return rect;\n\n  },\n\n  line: function(node, parentStyles) {\n\n    var x1 = parseFloat(node.getAttribute('x1'));\n    var y1 = parseFloat(node.getAttribute('y1'));\n    var x2 = parseFloat(node.getAttribute('x2'));\n    var y2 = parseFloat(node.getAttribute('y2'));\n\n    var line = new Line(x1, y1, x2, y2).noFill();\n\n    applySvgAttributes.call(this, node, line, parentStyles);\n\n    return line;\n\n  },\n\n  lineargradient: function(node, parentStyles) {\n\n    var x1 = parseFloat(node.getAttribute('x1'));\n    var y1 = parseFloat(node.getAttribute('y1'));\n    var x2 = parseFloat(node.getAttribute('x2'));\n    var y2 = parseFloat(node.getAttribute('y2'));\n\n    var ox = (x2 + x1) / 2;\n    var oy = (y2 + y1) / 2;\n\n    var stops = [];\n    for (var i = 0; i < node.children.length; i++) {\n\n      var child = node.children[i];\n\n      var offset = child.getAttribute('offset');\n      if (/%/ig.test(offset)) {\n        offset = parseFloat(offset.replace(/%/ig, '')) / 100;\n      }\n      offset = parseFloat(offset);\n\n      var color = child.getAttribute('stop-color');\n      var opacity = child.getAttribute('stop-opacity');\n      var style = child.getAttribute('style');\n\n      var matches;\n      if (color === null) {\n        matches = style ? style.match(/stop-color:\\s?([#a-fA-F0-9]*)/) : false;\n        color = matches && matches.length > 1 ? matches[1] : undefined;\n      }\n\n      if (opacity === null) {\n        matches = style ? style.match(/stop-opacity:\\s?([0-9.-]*)/) : false;\n        opacity = matches && matches.length > 1 ? parseFloat(matches[1]) : 1;\n      } else {\n        opacity = parseFloat(opacity);\n      }\n\n      stops.push(new Stop(offset, color, opacity));\n\n    }\n\n    var gradient = new LinearGradient(x1 - ox, y1 - oy, x2 - ox,\n      y2 - oy, stops);\n\n    applySvgAttributes.call(this, node, gradient, parentStyles);\n\n    return gradient;\n\n  },\n\n  radialgradient: function(node, parentStyles) {\n\n    var cx = parseFloat(node.getAttribute('cx')) || 0;\n    var cy = parseFloat(node.getAttribute('cy')) || 0;\n    var r = parseFloat(node.getAttribute('r'));\n\n    var fx = parseFloat(node.getAttribute('fx'));\n    var fy = parseFloat(node.getAttribute('fy'));\n\n    if (_.isNaN(fx)) {\n      fx = cx;\n    }\n\n    if (_.isNaN(fy)) {\n      fy = cy;\n    }\n\n    var ox = Math.abs(cx + fx) / 2;\n    var oy = Math.abs(cy + fy) / 2;\n\n    var stops = [];\n    for (var i = 0; i < node.children.length; i++) {\n\n      var child = node.children[i];\n\n      var offset = child.getAttribute('offset');\n      if (/%/ig.test(offset)) {\n        offset = parseFloat(offset.replace(/%/ig, '')) / 100;\n      }\n      offset = parseFloat(offset);\n\n      var color = child.getAttribute('stop-color');\n      var opacity = child.getAttribute('stop-opacity');\n      var style = child.getAttribute('style');\n\n      var matches;\n      if (color === null) {\n        matches = style ? style.match(/stop-color:\\s?([#a-fA-F0-9]*)/) : false;\n        color = matches && matches.length > 1 ? matches[1] : undefined;\n      }\n\n      if (opacity === null) {\n        matches = style ? style.match(/stop-opacity:\\s?([0-9.-]*)/) : false;\n        opacity = matches && matches.length > 1 ? parseFloat(matches[1]) : 1;\n      } else {\n        opacity = parseFloat(opacity);\n      }\n\n      stops.push(new Stop(offset, color, opacity));\n\n    }\n\n    var gradient = new RadialGradient(cx - ox, cy - oy, r,\n      stops, fx - ox, fy - oy);\n\n    applySvgAttributes.call(this, node, gradient, parentStyles);\n\n    return gradient;\n\n  },\n\n  text: function(node, parentStyles) {\n\n    var alignment = getAlignment(node.getAttribute('text-anchor')) || 'left';\n    var baseline = getBaseline(node) || 'baseline';\n    var message = node.textContent;\n\n    var text = new Text(message);\n\n    applySvgAttributes.call(this, node, text, parentStyles);\n\n    text.alignment = alignment;\n    text.baseline = baseline;\n\n    return text;\n\n  }\n\n};\n\n/**\n * @name Utils.xhr\n * @function\n * @param {String} path\n * @param {Function} callback\n * @returns {XMLHttpRequest} The constructed and called XHR request.\n * @description Canonical method to initiate `GET` requests in the browser. Mainly used by {@link Two#load} method.\n */\nvar xhr = function(path, callback) {\n\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', path);\n\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      callback(xhr.responseText);\n    }\n  };\n\n  xhr.send();\n  return xhr;\n\n};\n\n/**\n * @name Two.ImageSequence\n * @class\n * @extends Two.Rectangle\n * @param {String|String[]|Two.Texture|Two.Texture[]} paths - A list of URLs or {@link Two.Texture}s.\n * @param {Number} [ox=0] - The initial `x` position of the Two.ImageSequence.\n * @param {Number} [oy=0] - The initial `y` position of the Two.ImageSequence.\n * @param {Integer} [frameRate=30] - The frame rate at which the images should playback at.\n * @description A convenient package to display still or animated images organized as a series of still images.\n */\nvar ImageSequence = function(paths, ox, oy, frameRate) {\n\n  // Not using default constructor of Rectangle due to odd `beginning` / `ending` behavior.\n  // See: https://github.com/jonobr1/two.js/issues/383\n  Path.call(this, [\n    new Anchor(),\n    new Anchor(),\n    new Anchor(),\n    new Anchor()\n  ], true);\n\n  this._renderer.flagTextures = ImageSequence.FlagTextures.bind(this);\n  this._renderer.bindTextures = ImageSequence.BindTextures.bind(this);\n  this._renderer.unbindTextures = ImageSequence.UnbindTextures.bind(this);\n\n  this.noStroke();\n  this.noFill();\n\n  /**\n   * @name Two.ImageSequence#textures\n   * @property {Two.Texture[]} - A list of textures to be used as frames for animating the {@link Two.ImageSequence}.\n   */\n  if (Array.isArray(paths)) {\n    this.textures = paths.map(ImageSequence.GenerateTexture.bind(this));\n  } else {\n    // If just a single path convert into a single Two.Texture\n    this.textures = [ImageSequence.GenerateTexture(paths)];\n  }\n\n  this.origin = new Vector();\n\n  this._update();\n  this.translation.set(ox || 0, oy || 0);\n\n  /**\n   * @name Two.ImageSequence#frameRate\n   * @property {Integer} - The number of frames to animate against per second.\n   */\n  if (typeof frameRate === 'number') {\n    this.frameRate = frameRate;\n  } else {\n    this.frameRate = ImageSequence.DefaultFrameRate;\n  }\n\n  /**\n   * @name Two.ImageSequence#index\n   * @property {Integer} - The index of the current tile of the sprite to display. Defaults to `0`.\n   */\n  this.index = 0;\n\n};\n\n_.extend(ImageSequence, {\n\n  /**\n   * @name Two.ImageSequence.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.ImageSequence}.\n   */\n  Properties: [\n    'frameRate',\n    'index'\n  ],\n\n  /**\n   * @name Two.ImageSequence.DefaultFrameRate\n   * @property The default frame rate that {@link Two.ImageSequence#frameRate} is set to when instantiated.\n   */\n  DefaultFrameRate: 30,\n\n  /**\n   * @name Two.ImageSequence.FlagTextures\n   * @function\n   * @description Cached method to let renderers know textures have been updated on a {@link Two.ImageSequence}.\n   */\n  FlagTextures: function() {\n    this._flagTextures = true;\n  },\n\n  /**\n   * @name Two.ImageSequence.BindTextures\n   * @function\n   * @description Cached method to let {@link Two.ImageSequence} know textures have been added to the instance.\n   */\n  BindTextures: function(items) {\n\n    var i = items.length;\n    while (i--) {\n      items[i].bind(Events.Types.change, this._renderer.flagTextures);\n    }\n\n    this._renderer.flagTextures();\n\n  },\n\n  /**\n   * @name Two.ImageSequence.UnbindVertices\n   * @function\n   * @description Cached method to let {@link Two.ImageSequence} know textures have been removed from the instance.\n   */\n  UnbindTextures: function(items) {\n\n    var i = items.length;\n    while (i--) {\n      items[i].unbind(Events.Types.change, this._renderer.flagTextures);\n    }\n\n    this._renderer.flagTextures();\n\n  },\n\n  /**\n   * @name Two.ImageSequence.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.ImageSequence} to any object. Handy if you'd like to extend or inherit the {@link Two.ImageSequence} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Rectangle.MakeObservable(obj);\n    _.each(ImageSequence.Properties, defineGetterSetter, obj);\n\n    Object.defineProperty(obj, 'textures', {\n\n      enumerable: true,\n\n      get: function() {\n        return this._textures;\n      },\n\n      set: function(textures) {\n\n        var updateTextures = this._renderer.flagTextures;\n        var bindTextures = this._renderer.bindTextures;\n        var unbindTextures = this._renderer.unbindTextures;\n\n        // Remove previous listeners\n        if (this._textures) {\n          this._textures\n            .unbind(Events.Types.insert, bindTextures)\n            .unbind(Events.Types.remove, unbindTextures);\n        }\n\n        // Create new Collection with copy of vertices\n        this._textures = new Collection((textures || []).slice(0));\n\n        // Listen for Collection changes and bind / unbind\n        this._textures\n          .bind(Events.Types.insert, bindTextures)\n          .bind(Events.Types.remove, unbindTextures);\n\n        // Bind Initial Textures\n        bindTextures(this._textures);\n\n      }\n\n    });\n\n  },\n\n  /**\n   * @name Two.ImageSequence.GenerateTexture\n   * @property {Function} - Shorthand function to prepare source image material into readable format by {@link Two.ImageSequence}.\n   * @param {String|Two.Texture} textureOrString - The texture or string to create a {@link Two.Texture} from.\n   * @description Function used internally by {@link Two.ImageSequence} to parse arguments and return {@link Two.Texture}s.\n   * @returns {Two.Texture}\n   */\n  GenerateTexture: function(obj) {\n    if (obj instanceof Texture) {\n      return obj;\n    } else if (typeof obj === 'string') {\n      return new Texture(obj);\n    }\n  }\n\n});\n\n_.extend(ImageSequence.prototype, Rectangle.prototype, {\n\n  /**\n   * @name Two.ImageSequence#_flagTextures\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ImageSequence#textures} need updating.\n   */\n  _flagTextures: false,\n\n  /**\n   * @name Two.ImageSequence#_flagFrameRate\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ImageSequence#frameRate} needs updating.\n   */\n  _flagFrameRate: false,\n\n  /**\n   * @name Two.ImageSequence#_flagIndex\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ImageSequence#index} needs updating.\n   */\n  _flagIndex: false,\n\n  // Private variables\n\n  /**\n   * @name Two.ImageSequence#_amount\n   * @private\n   * @property {Integer} - Number of frames for a given {@link Two.ImageSequence}.\n   */\n  _amount: 1,\n\n  /**\n   * @name Two.ImageSequence#_duration\n   * @private\n   * @property {Number} - Number of milliseconds a {@link Two.ImageSequence}.\n   */\n  _duration: 0,\n\n  /**\n   * @name Two.ImageSequence#_index\n   * @private\n   * @property {Integer} - The current frame the {@link Two.ImageSequence} is currently displaying.\n   */\n  _index: 0,\n\n  /**\n   * @name Two.ImageSequence#_startTime\n   * @private\n   * @property {Milliseconds} - Epoch time in milliseconds of when the {@link Two.ImageSequence} started.\n   */\n  _startTime: 0,\n\n  /**\n   * @name Two.ImageSequence#_playing\n   * @private\n   * @property {Boolean} - Dictates whether the {@link Two.ImageSequence} is animating or not.\n   */\n  _playing: false,\n\n  /**\n   * @name Two.ImageSequence#_firstFrame\n   * @private\n   * @property {Integer} - The frame the {@link Two.ImageSequence} should start with.\n   */\n  _firstFrame: 0,\n\n  /**\n   * @name Two.ImageSequence#_lastFrame\n   * @private\n   * @property {Integer} - The frame the {@link Two.ImageSequence} should end with.\n   */\n  _lastFrame: 0,\n\n  /**\n   * @name Two.ImageSequence#_playing\n   * @private\n   * @property {Boolean} - Dictates whether the {@link Two.ImageSequence} should loop or not.\n   */\n  _loop: true,\n\n  // Exposed through getter-setter\n\n  /**\n   * @name Two.ImageSequence#_textures\n   * @private\n   * @see {@link Two.ImageSequence#textures}\n   */\n  _textures: null,\n\n  /**\n   * @name Two.ImageSequence#_frameRate\n   * @private\n   * @see {@link Two.ImageSequence#frameRate}\n   */\n  _frameRate: 0,\n\n  /**\n   * @name Two.ImageSequence#_origin\n   * @private\n   * @see {@link Two.ImageSequence#origin}\n   */\n  _origin: null,\n\n  constructor: ImageSequence,\n\n  /**\n   * @name Two.ImageSequence#play\n   * @function\n   * @param {Integer} [firstFrame=0] - The index of the frame to start the animation with.\n   * @param {Integer} [lastFrame] - The index of the frame to end the animation with. Defaults to the last item in the {@link Two.ImageSequence#textures}.\n   * @param {Function} [onLastFrame] - Optional callback function to be triggered after playing the last frame. This fires multiple times when the image sequence is looped.\n   * @description Initiate animation playback of a {@link Two.ImageSequence}.\n   */\n  play: function(firstFrame, lastFrame, onLastFrame) {\n\n    this._playing = true;\n    this._firstFrame = 0;\n    this._lastFrame = this.amount - 1;\n    this._startTime = _.performance.now();\n\n    if (typeof firstFrame === 'number') {\n      this._firstFrame = firstFrame;\n    }\n    if (typeof lastFrame === 'number') {\n      this._lastFrame = lastFrame;\n    }\n    if (typeof onLastFrame === 'function') {\n      this._onLastFrame = onLastFrame;\n    } else {\n      delete this._onLastFrame;\n    }\n\n    if (this._index !== this._firstFrame) {\n      this._startTime -= 1000 * Math.abs(this._index - this._firstFrame)\n        / this._frameRate;\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.ImageSequence#pause\n   * @function\n   * @description Halt animation playback of a {@link Two.ImageSequence}.\n   */\n  pause: function() {\n\n    this._playing = false;\n    return this;\n\n  },\n\n  /**\n   * @name Two.ImageSequence#stop\n   * @function\n   * @description Halt animation playback of a {@link Two.ImageSequence} and set the current frame back to the first frame.\n   */\n  stop: function() {\n\n    this._playing = false;\n    this._index = this._firstFrame;\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.ImageSequence#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.ImageSequence}\n   * @description Create a new instance of {@link Two.ImageSequence} with the same properties of the current image sequence.\n   */\n  clone: function(parent) {\n\n    var clone = new ImageSequence(this.textures, this.translation.x,\n      this.translation.y, this.frameRate);\n\n    clone._loop = this._loop;\n\n    if (this._playing) {\n      clone.play();\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.ImageSequence#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n    var object = Rectangle.prototype.toObject.call(this);\n    object.textures = this.textures.map(function(texture) {\n      return texture.toObject();\n    });\n    object.frameRate = this.frameRate;\n    object.index = this.index;\n    object._firstFrame = this._firstFrame;\n    object._lastFrame = this._lastFrame;\n    object._loop = this._loop;\n    return object;\n  },\n\n  /**\n   * @name Two.ImageSequence#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    var effects = this._textures;\n    var width, height, elapsed, amount, duration, texture;\n    var index, frames;\n\n    if (this._flagTextures) {\n      this._amount = effects.length;\n    }\n\n    if (this._flagFrameRate) {\n      this._duration = 1000 * this._amount / this._frameRate;\n    }\n\n    if (this._playing && this._frameRate > 0) {\n\n      amount = this._amount;\n\n      if (_.isNaN(this._lastFrame)) {\n        this._lastFrame = amount - 1;\n      }\n\n      // TODO: Offload perf logic to instance of `Two`.\n      elapsed = _.performance.now() - this._startTime;\n      frames = this._lastFrame + 1;\n      duration = 1000 * (frames - this._firstFrame) / this._frameRate;\n\n      if (this._loop) {\n        elapsed = elapsed % duration;\n      } else {\n        elapsed = Math.min(elapsed, duration);\n      }\n\n      index = lerp(this._firstFrame, frames, elapsed / duration);\n      index = Math.floor(index);\n\n      if (index !== this._index) {\n\n        this._index = index;\n        texture = effects[this._index];\n\n        if (texture.loaded) {\n\n          width = texture.image.width;\n          height = texture.image.height;\n\n          if (this.width !== width) {\n            this.width = width;\n          }\n          if (this.height !== height) {\n            this.height = height;\n          }\n\n          this.fill = texture;\n\n          if (index >= this._lastFrame - 1 && this._onLastFrame) {\n            this._onLastFrame();  // Shortcut for chainable sprite animations\n          }\n\n        }\n\n      }\n\n    } else if (this._flagIndex || !(this.fill instanceof Texture)) {\n\n      texture = effects[this._index];\n\n      if (texture.loaded) {\n\n        width = texture.image.width;\n        height = texture.image.height;\n\n        if (this.width !== width) {\n          this.width = width;\n        }\n        if (this.height !== height) {\n          this.height = height;\n        }\n\n      }\n\n      this.fill = texture;\n\n    }\n\n    Rectangle.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.ImageSequence#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagTextures = this._flagFrameRate = false;\n    Rectangle.prototype.flagReset.call(this);\n\n    return this;\n\n  }\n\n});\n\nImageSequence.MakeObservable(ImageSequence.prototype);\n\n/**\n * @name Two.Sprite\n * @class\n * @extends Two.Rectangle\n * @param {String|Two.Texture} [path] - The URL path or {@link Two.Texture} to be used as the bitmap data displayed on the sprite.\n * @param {Number} [ox=0] - The initial `x` position of the Two.Sprite.\n * @param {Number} [oy=0] - The initial `y` position of the Two.Sprite.\n * @param {Integer} [cols=1] - The number of columns the sprite contains.\n * @param {Integer} [rows=1] - The number of rows the sprite contains.\n * @param {Integer} [frameRate=0] - The frame rate at which the partitions of the image should playback at.\n * @description A convenient package to display still or animated images through a tiled image source. For more information on the principals of animated imagery through tiling see [Texture Atlas](https://en.wikipedia.org/wiki/Texture_atlas) on Wikipedia.\n */\nvar Sprite = function(path, ox, oy, cols, rows, frameRate) {\n\n  // Not using default constructor of Rectangle due to odd `beginning` / `ending` behavior.\n  // See: https://github.com/jonobr1/two.js/issues/383\n  Path.call(this, [\n    new Anchor(),\n    new Anchor(),\n    new Anchor(),\n    new Anchor()\n  ], true);\n\n  this.noStroke();\n  this.noFill();\n\n  /**\n   * @name Two.Sprite#texture\n   * @property {Two.Texture} - The texture to be used as bitmap data to display image in the scene.\n   */\n  if (path instanceof Texture) {\n    this.texture = path;\n  } else if (typeof path === 'string') {\n    this.texture = new Texture(path);\n  }\n\n  this.origin = new Vector();\n\n  this._update();\n  this.translation.set(ox || 0, oy || 0);\n\n  /**\n   * @name Two.Sprite#columns\n   * @property {Integer} - The number of columns to split the texture into. Defaults to `1`.\n   */\n  if (typeof cols === 'number') {\n    this.columns = cols;\n  }\n\n  /**\n   * @name Two.Sprite#rows\n   * @property {Integer} - The number of rows to split the texture into. Defaults to `1`.\n   */\n  if (typeof rows === 'number') {\n    this.rows = rows;\n  }\n\n  /**\n   * @name Two.Sprite#frameRate\n   * @property {Integer} - The number of frames to animate against per second. Defaults to `0` for non-animated sprites.\n   */\n  if (typeof frameRate === 'number') {\n    this.frameRate = frameRate;\n  }\n\n  /**\n   * @name Two.Sprite#index\n   * @property {Integer} - The index of the current tile of the sprite to display. Defaults to `0`.\n   */\n  this.index = 0;\n\n};\n\n_.extend(Sprite, {\n\n  /**\n   * @name Two.Sprite.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Sprite}.\n   */\n  Properties: [\n    'texture', 'columns', 'rows', 'frameRate', 'index'\n  ],\n\n  /**\n   * @name Two.Sprite.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Sprite} to any object. Handy if you'd like to extend or inherit the {@link Two.Sprite} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Rectangle.MakeObservable(obj);\n    _.each(Sprite.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(Sprite.prototype, Rectangle.prototype, {\n\n  /**\n   * @name Two.Sprite#_flagTexture\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Sprite#texture} needs updating.\n   */\n  _flagTexture: false,\n\n  /**\n   * @name Two.Sprite#_flagColumns\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Sprite#columns} need updating.\n   */\n  _flagColumns: false,\n\n  /**\n   * @name Two.Sprite#_flagRows\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Sprite#rows} need updating.\n   */\n  _flagRows: false,\n\n  /**\n   * @name Two.Sprite#_flagFrameRate\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Sprite#flagFrameRate} needs updating.\n   */\n  _flagFrameRate: false,\n\n  /**\n   * @name Two.Sprite#_flagIndex\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Sprite#index} needs updating.\n   */\n  flagIndex: false,\n\n  // Private variables\n\n  /**\n   * @name Two.Sprite#_amount\n   * @private\n   * @property {Integer} - Number of frames for a given {@link Two.Sprite}.\n   */\n  _amount: 1,\n\n  /**\n   * @name Two.Sprite#_duration\n   * @private\n   * @property {Number} - Number of milliseconds a {@link Two.Sprite}.\n   */\n  _duration: 0,\n\n  /**\n   * @name Two.Sprite#_startTime\n   * @private\n   * @property {Milliseconds} - Epoch time in milliseconds of when the {@link Two.Sprite} started.\n   */\n  _startTime: 0,\n\n  /**\n   * @name Two.Sprite#_playing\n   * @private\n   * @property {Boolean} - Dictates whether the {@link Two.Sprite} is animating or not.\n   */\n  _playing: false,\n\n  /**\n   * @name Two.Sprite#_firstFrame\n   * @private\n   * @property {Integer} - The frame the {@link Two.Sprite} should start with.\n   */\n  _firstFrame: 0,\n\n  /**\n   * @name Two.Sprite#_lastFrame\n   * @private\n   * @property {Integer} - The frame the {@link Two.Sprite} should end with.\n   */\n  _lastFrame: 0,\n\n  /**\n   * @name Two.Sprite#_playing\n   * @private\n   * @property {Boolean} - Dictates whether the {@link Two.Sprite} should loop or not.\n   */\n  _loop: true,\n\n  // Exposed through getter-setter\n\n  /**\n   * @name Two.Sprite#_texture\n   * @private\n   * @see {@link Two.Sprite#texture}\n   */\n  _texture: null,\n\n  /**\n   * @name Two.Sprite#_columns\n   * @private\n   * @see {@link Two.Sprite#columns}\n   */\n  _columns: 1,\n\n  /**\n   * @name Two.Sprite#_rows\n   * @private\n   * @see {@link Two.Sprite#rows}\n   */\n  _rows: 1,\n\n  /**\n   * @name Two.Sprite#_frameRate\n   * @private\n   * @see {@link Two.Sprite#frameRate}\n   */\n  _frameRate: 0,\n\n  /**\n   * @name Two.Sprite#_index\n   * @private\n   * @property {Integer} - The current frame the {@link Two.Sprite} is currently displaying.\n   */\n  _index: 0,\n\n  /**\n   * @name Two.Sprite#_origin\n   * @private\n   * @see {@link Two.Sprite#origin}\n   */\n  _origin: null,\n\n  constructor: Sprite,\n\n  /**\n   * @name Two.Sprite#play\n   * @function\n   * @param {Integer} [firstFrame=0] - The index of the frame to start the animation with.\n   * @param {Integer} [lastFrame] - The index of the frame to end the animation with. Defaults to the last item in the {@link Two.Sprite#textures}.\n   * @param {Function} [onLastFrame] - Optional callback function to be triggered after playing the last frame. This fires multiple times when the sprite is looped.\n   * @description Initiate animation playback of a {@link Two.Sprite}.\n   */\n  play: function(firstFrame, lastFrame, onLastFrame) {\n\n    this._playing = true;\n    this._firstFrame = 0;\n    this._lastFrame = this.amount - 1;\n    this._startTime = _.performance.now();\n\n    if (typeof firstFrame === 'number') {\n      this._firstFrame = firstFrame;\n    }\n    if (typeof lastFrame === 'number') {\n      this._lastFrame = lastFrame;\n    }\n    if (typeof onLastFrame === 'function') {\n      this._onLastFrame = onLastFrame;\n    } else {\n      delete this._onLastFrame;\n    }\n\n    if (this._index !== this._firstFrame) {\n      this._startTime -= 1000 * Math.abs(this._index - this._firstFrame)\n        / this._frameRate;\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Sprite#pause\n   * @function\n   * @description Halt animation playback of a {@link Two.Sprite}.\n   */\n  pause: function() {\n\n    this._playing = false;\n    return this;\n\n  },\n\n  /**\n   * @name Two.Sprite#stop\n   * @function\n   * @description Halt animation playback of a {@link Two.Sprite} and set the current frame back to the first frame.\n   */\n  stop: function() {\n\n    this._playing = false;\n    this._index = 0;\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Sprite#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Sprite}\n   * @description Create a new instance of {@link Two.Sprite} with the same properties of the current sprite.\n   */\n  clone: function(parent) {\n\n    var clone = new Sprite(\n      this.texture, this.translation.x, this.translation.y,\n      this.columns, this.rows, this.frameRate\n    );\n\n    if (this.playing) {\n      clone.play(this._firstFrame, this._lastFrame);\n      clone._loop = this._loop;\n    }\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Sprite#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n    var object = Rectangle.prototype.toObject.call(this);\n    object.texture = this.texture.toObject();\n    object.columns = this.columns;\n    object.rows = this.rows;\n    object.frameRate = this.frameRate;\n    object.index = this.index;\n    object._firstFrame = this._firstFrame;\n    object._lastFrame = this._lastFrame;\n    object._loop = this._loop;\n    return object;\n  },\n\n  /**\n   * @name Two.Sprite#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    var effect = this._texture;\n    var cols = this._columns;\n    var rows = this._rows;\n\n    var width, height, elapsed, amount, duration;\n    var index, iw, ih, frames;\n\n    if (this._flagColumns || this._flagRows) {\n      this._amount = this._columns * this._rows;\n    }\n\n    if (this._flagFrameRate) {\n      this._duration = 1000 * this._amount / this._frameRate;\n    }\n\n    if (this._flagTexture) {\n      this.fill = this._texture;\n    }\n\n    if (this._texture.loaded) {\n\n      iw = effect.image.width;\n      ih = effect.image.height;\n\n      width = iw / cols;\n      height = ih / rows;\n      amount = this._amount;\n\n      if (this.width !== width) {\n        this.width = width;\n      }\n      if (this.height !== height) {\n        this.height = height;\n      }\n\n      if (this._playing && this._frameRate > 0) {\n\n        if (_.isNaN(this._lastFrame)) {\n          this._lastFrame = amount - 1;\n        }\n\n        // TODO: Offload perf logic to instance of `Two`.\n        elapsed = _.performance.now() - this._startTime;\n        frames = this._lastFrame + 1;\n        duration = 1000 * (frames - this._firstFrame) / this._frameRate;\n\n        if (this._loop) {\n          elapsed = elapsed % duration;\n        } else {\n          elapsed = Math.min(elapsed, duration);\n        }\n\n        index = lerp(this._firstFrame, frames, elapsed / duration);\n        index = Math.floor(index);\n\n        if (index !== this._index) {\n          this._index = index;\n          if (index >= this._lastFrame - 1 && this._onLastFrame) {\n            this._onLastFrame();  // Shortcut for chainable sprite animations\n          }\n        }\n\n      }\n\n      var col = this._index % cols;\n      var row = Math.floor(this._index / cols);\n\n      var ox = - width * col + (iw - width) / 2;\n      var oy = - height * row + (ih - height) / 2;\n\n      // TODO: Improve performance\n      if (ox !== effect.offset.x) {\n        effect.offset.x = ox;\n      }\n      if (oy !== effect.offset.y) {\n        effect.offset.y = oy;\n      }\n\n    }\n\n    Rectangle.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Sprite#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagTexture = this._flagColumns = this._flagRows\n      = this._flagFrameRate = false;\n\n    Rectangle.prototype.flagReset.call(this);\n\n    return this;\n  }\n\n\n});\n\nSprite.MakeObservable(Sprite.prototype);\n\nvar TWO_PI$3 = Math.PI * 2, HALF_PI$3 = Math.PI / 2;\n\n/**\n * @name Two.ArcSegment\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the arc segment.\n * @param {Number} [y=0] - The y position of the arc segment.\n * @param {Number} innerRadius - The inner radius value of the arc segment.\n * @param {Number} outerRadius - The outer radius value of the arc segment.\n * @param {Radians} startAngle - The start angle of the arc segment in radians.\n * @param {Radians} endAngle - The end angle of the arc segment in radians.\n * @param {Number} [resolution=24] - The number of vertices used to construct the arc segment.\n */\nvar ArcSegment = function(ox, oy, ir, or, sa, ea, res) {\n\n  var amount = res || (Constants.Resolution * 3);\n  var points = [];\n  for (var i = 0; i < amount; i++) {\n    points.push(new Anchor());\n  }\n\n  Path.call(this, points, true, false, true);\n\n  /**\n   * @name Two.ArcSegment#innerRadius\n   * @property {Number} - The size of the inner radius of the arc segment.\n   */\n  this.innerRadius = ir;\n  /**\n   * @name Two.ArcSegment#outerRadius\n   * @property {Number} - The size of the outer radius of the arc segment.\n   */\n  this.outerRadius = or;\n\n  /**\n   * @name Two.ArcSegment#startRadius\n   * @property {Radians} - The angle of one side for the arc segment.\n   */\n  this.startAngle = sa;\n  /**\n   * @name Two.ArcSegment#endAngle\n   * @property {Radians} - The angle of the other side for the arc segment.\n   */\n  this.endAngle = ea;\n\n  this._update();\n\n  if (typeof ox === 'number') {\n    this.translation.x = ox;\n  }\n  if (typeof oy === 'number') {\n    this.translation.y = oy;\n  }\n\n};\n\n_.extend(ArcSegment, {\n\n  /**\n   * @name Two.ArcSegment.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.ArcSegment}.\n   */\n  Properties: ['startAngle', 'endAngle', 'innerRadius', 'outerRadius'],\n\n  /**\n   * @name Two.ArcSegment.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.ArcSegment} to any object. Handy if you'd like to extend the {@link Two.ArcSegment} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Path.MakeObservable(obj);\n    _.each(ArcSegment.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(ArcSegment.prototype, Path.prototype, {\n\n  /**\n   * @name Two.ArcSegment#_flagStartAngle\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ArcSegment#startAngle} needs updating.\n   */\n  _flagStartAngle: false,\n  /**\n   * @name Two.ArcSegment#_flagEndAngle\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ArcSegment#endAngle} needs updating.\n   */\n  _flagEndAngle: false,\n  /**\n   * @name Two.ArcSegment#_flagInnerRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ArcSegment#innerRadius} needs updating.\n   */\n  _flagInnerRadius: false,\n  /**\n   * @name Two.ArcSegment#_flagOuterRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.ArcSegment#outerRadius} needs updating.\n   */\n  _flagOuterRadius: false,\n\n  /**\n   * @name Two.ArcSegment#_startAngle\n   * @private\n   * @see {@link Two.ArcSegment#startAngle}\n   */\n  _startAngle: 0,\n  /**\n   * @name Two.ArcSegment#_endAngle\n   * @private\n   * @see {@link Two.ArcSegment#endAngle}\n   */\n  _endAngle: TWO_PI$3,\n  /**\n   * @name Two.ArcSegment#_innerRadius\n   * @private\n   * @see {@link Two.ArcSegment#innerRadius}\n   */\n  _innerRadius: 0,\n  /**\n   * @name Two.ArcSegment#_outerRadius\n   * @private\n   * @see {@link Two.ArcSegment#outerRadius}\n   */\n  _outerRadius: 0,\n\n  constructor: ArcSegment,\n\n  /**\n   * @name Two.ArcSegment#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagStartAngle || this._flagEndAngle || this._flagInnerRadius\n      || this._flagOuterRadius) {\n\n      var sa = this._startAngle;\n      var ea = this._endAngle;\n\n      var ir = this._innerRadius;\n      var or = this._outerRadius;\n\n      var connected = mod(sa, TWO_PI$3) === mod(ea, TWO_PI$3);\n      var punctured = ir > 0;\n\n      var vertices = this.vertices;\n      var length = (punctured ? vertices.length / 2 : vertices.length);\n      var command, id = 0;\n\n      if (connected) {\n        length--;\n      } else if (!punctured) {\n        length -= 2;\n      }\n\n      /**\n       * Outer Circle\n       */\n      for (var i = 0, last = length - 1; i < length; i++) {\n\n        var pct = i / last;\n        var v = vertices[id];\n        var theta = pct * (ea - sa) + sa;\n        var step = (ea - sa) / length;\n\n        var x = or * Math.cos(theta);\n        var y = or * Math.sin(theta);\n\n        switch (i) {\n          case 0:\n            command = Commands.move;\n            break;\n          default:\n            command = Commands.curve;\n        }\n\n        v.command = command;\n        v.x = x;\n        v.y = y;\n        v.controls.left.clear();\n        v.controls.right.clear();\n\n        if (v.command === Commands.curve) {\n          var amp = or * step / Math.PI;\n          v.controls.left.x = amp * Math.cos(theta - HALF_PI$3);\n          v.controls.left.y = amp * Math.sin(theta - HALF_PI$3);\n          v.controls.right.x = amp * Math.cos(theta + HALF_PI$3);\n          v.controls.right.y = amp * Math.sin(theta + HALF_PI$3);\n          if (i === 1) {\n            v.controls.left.multiplyScalar(2);\n          }\n          if (i === last) {\n            v.controls.right.multiplyScalar(2);\n          }\n        }\n\n        id++;\n\n      }\n\n      if (punctured) {\n\n        if (connected) {\n          vertices[id].command = Commands.close;\n          id++;\n        } else {\n          length--;\n          last = length - 1;\n        }\n\n        /**\n         * Inner Circle\n         */\n        for (i = 0; i < length; i++) {\n\n          pct = i / last;\n          v = vertices[id];\n          theta = (1 - pct) * (ea - sa) + sa;\n          step = (ea - sa) / length;\n\n          x = ir * Math.cos(theta);\n          y = ir * Math.sin(theta);\n          command = Commands.curve;\n          if (i <= 0) {\n            command = connected ? Commands.move : Commands.line;\n          }\n\n          v.command = command;\n          v.x = x;\n          v.y = y;\n          v.controls.left.clear();\n          v.controls.right.clear();\n\n          if (v.command === Commands.curve) {\n            amp = ir * step / Math.PI;\n            v.controls.left.x = amp * Math.cos(theta + HALF_PI$3);\n            v.controls.left.y = amp * Math.sin(theta + HALF_PI$3);\n            v.controls.right.x = amp * Math.cos(theta - HALF_PI$3);\n            v.controls.right.y = amp * Math.sin(theta - HALF_PI$3);\n            if (i === 1) {\n              v.controls.left.multiplyScalar(2);\n            }\n            if (i === last) {\n              v.controls.right.multiplyScalar(2);\n            }\n          }\n\n          id++;\n\n        }\n\n        // Final Point\n        vertices[id].copy(vertices[0]);\n        vertices[id].command = Commands.line;\n\n      } else if (!connected) {\n\n        vertices[id].command = Commands.line;\n        vertices[id].x = 0;\n        vertices[id].y = 0;\n        id++;\n\n        // Final Point\n        vertices[id].copy(vertices[0]);\n        vertices[id].command = Commands.line;\n\n      }\n\n    }\n\n    Path.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.ArcSegment#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    Path.prototype.flagReset.call(this);\n\n    this._flagStartAngle = this._flagEndAngle\n      = this._flagInnerRadius = this._flagOuterRadius = false;\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.ArcSegment#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.ArcSegment}\n   * @description Create a new instance of {@link Two.ArcSegment} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var ir = this.innerRadius;\n    var or = this.outerradius;\n    var sa = this.startAngle;\n    var ea = this.endAngle;\n    var resolution = this.vertices.length;\n\n    var clone = new ArcSegment(0, 0, ir, or, sa, ea, resolution);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.ArcSegment#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(ArcSegment.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    return object;\n\n  }\n\n});\n\nArcSegment.MakeObservable(ArcSegment.prototype);\n\nvar TWO_PI$4 = Math.PI * 2, cos$4 = Math.cos, sin$4 = Math.sin;\n\n/**\n * @name Two.Polygon\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the polygon.\n * @param {Number} [y=0] - The y position of the polygon.\n * @param {Number} radius - The radius value of the polygon.\n * @param {Number} [sides=12] - The number of vertices used to construct the polygon.\n */\nvar Polygon = function(ox, oy, r, sides) {\n\n  sides = Math.max(sides || 0, 3);\n\n  Path.call(this);\n\n  this.closed = true;\n  this.automatic = false;\n\n  /**\n   * @name Two.Polygon#width\n   * @property {Number} - The size of the width of the polygon.\n   */\n  this.width = r * 2;\n  /**\n   * @name Two.Polygon#height\n   * @property {Number} - The size of the height of the polygon.\n   */\n  this.height = r * 2;\n  /**\n   * @name Two.Polygon#sides\n   * @property {Number} - The amount of sides the polyogn has.\n   */\n  this.sides = sides;\n\n  this._update();\n  this.translation.set(ox, oy);\n\n};\n\n_.extend(Polygon, {\n\n  /**\n   * @name Two.Polygon.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Polygon}.\n   */\n  Properties: ['width', 'height', 'sides'],\n\n  /**\n   * @name Two.Polygon.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Polygon} to any object. Handy if you'd like to extend the {@link Two.Polygon} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Path.MakeObservable(obj);\n    _.each(Polygon.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(Polygon.prototype, Path.prototype, {\n\n  /**\n   * @name Two.Polygon#_flagWidth\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Polygon#width} needs updating.\n   */\n  _flagWidth: false,\n  /**\n   * @name Two.Polygon#_flagHeight\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Polygon#height} needs updating.\n   */\n  _flagHeight: false,\n  /**\n   * @name Two.Polygon#_flagSides\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Polygon#sides} needs updating.\n   */\n  _flagSides: false,\n\n  /**\n   * @name Two.Polygon#_width\n   * @private\n   * @see {@link Two.Polygon#width}\n   */\n  _width: 0,\n  /**\n   * @name Two.Polygon#_height\n   * @private\n   * @see {@link Two.Polygon#height}\n   */\n  _height: 0,\n  /**\n   * @name Two.Polygon#_sides\n   * @private\n   * @see {@link Two.Polygon#sides}\n   */\n  _sides: 0,\n\n  constructor: Polygon,\n\n  /**\n   * @name Two.Polygon#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagWidth || this._flagHeight || this._flagSides) {\n\n      var sides = this._sides;\n      var amount = sides + 1;\n      var length = this.vertices.length;\n\n      if (length > sides) {\n        this.vertices.splice(sides - 1, length - sides);\n        length = sides;\n      }\n\n      for (var i = 0; i < amount; i++) {\n\n        var pct = (i + 0.5) / sides;\n        var theta = TWO_PI$4 * pct + Math.PI / 2;\n        var x = this._width * cos$4(theta) / 2;\n        var y = this._height * sin$4(theta) / 2;\n\n        if (i >= length) {\n          this.vertices.push(new Anchor(x, y));\n        } else {\n          this.vertices[i].set(x, y);\n        }\n\n        this.vertices[i].command = i === 0\n          ? Commands.move : Commands.line;\n\n      }\n\n    }\n\n    Path.prototype._update.call(this);\n    return this;\n\n  },\n\n  /**\n   * @name Two.Polygon#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagWidth = this._flagHeight = this._flagSides = false;\n    Path.prototype.flagReset.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Polygon#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Polygon}\n   * @description Create a new instance of {@link Two.Polygon} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var clone = new Polygon(0, 0, this.radius, this.sides);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Polygon#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(Polygon.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    return object;\n\n  }\n\n});\n\nPolygon.MakeObservable(Polygon.prototype);\n\nvar TWO_PI$5 = Math.PI * 2, cos$5 = Math.cos, sin$5 = Math.sin;\n\n/**\n * @name Two.Star\n * @class\n * @extends Two.Path\n * @param {Number} [x=0] - The x position of the star.\n * @param {Number} [y=0] - The y position of the star.\n * @param {Number} innerRadius - The inner radius value of the star.\n * @param {Number} outerRadius - The outer radius value of the star.\n * @param {Number} [sides=5] - The number of sides used to construct the star.\n */\nvar Star = function(ox, oy, ir, or, sides) {\n\n  if (arguments.length <= 3) {\n    or = ir;\n    ir = or / 2;\n  }\n\n  if (typeof sides !== 'number' || sides <= 0) {\n    sides = 5;\n  }\n\n  Path.call(this);\n  this.closed = true;\n  this.automatic = false;\n\n  /**\n   * @name Two.Star#innerRadius\n   * @property {Number} - The size of the inner radius of the star.\n   */\n  this.innerRadius = ir;\n  /**\n   * @name Two.Star#outerRadius\n   * @property {Number} - The size of the outer radius of the star.\n   */\n  this.outerRadius = or;\n  /**\n   * @name Two.Star#sides\n   * @property {Number} - The amount of sides the star has.\n   */\n  this.sides = sides;\n\n  this._update();\n  this.translation.set(ox, oy);\n\n};\n\n_.extend(Star, {\n\n  /**\n   * @name Two.Star.Properties\n   * @property {String[]} - A list of properties that are on every {@link Two.Star}.\n   */\n  Properties: ['innerRadius', 'outerRadius', 'sides'],\n\n  /**\n   * @name Two.Star.MakeObservable\n   * @function\n   * @param {Object} object - The object to make observable.\n   * @description Convenience function to apply observable qualities of a {@link Two.Star} to any object. Handy if you'd like to extend the {@link Two.Star} class on a custom class.\n   */\n  MakeObservable: function(obj) {\n\n    Path.MakeObservable(obj);\n    _.each(Star.Properties, defineGetterSetter, obj);\n\n  }\n\n});\n\n_.extend(Star.prototype, Path.prototype, {\n\n  /**\n   * @name Two.Star#_flagInnerRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Star#innerRadius} needs updating.\n   */\n  _flagInnerRadius: false,\n  /**\n   * @name Two.Star#_flagOuterRadius\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Star#outerRadius} needs updating.\n   */\n  _flagOuterRadius: false,\n  /**\n   * @name Two.Star#_flagSides\n   * @private\n   * @property {Boolean} - Determines whether the {@link Two.Star#sides} needs updating.\n   */\n  _flagSides: false,\n\n  /**\n   * @name Two.Star#_innerRadius\n   * @private\n   * @see {@link Two.Star#innerRadius}\n   */\n  _innerRadius: 0,\n  /**\n   * @name Two.Star#_outerRadius\n   * @private\n   * @see {@link Two.Star#outerRadius}\n   */\n  _outerRadius: 0,\n  /**\n   * @name Two.Star#_sides\n   * @private\n   * @see {@link Two.Star#sides}\n   */\n  _sides: 0,\n\n  constructor: Star,\n\n  /**\n   * @name Two.Star#_update\n   * @function\n   * @private\n   * @param {Boolean} [bubbles=false] - Force the parent to `_update` as well.\n   * @description This is called before rendering happens by the renderer. This applies all changes necessary so that rendering is up-to-date but not updated more than it needs to be.\n   * @nota-bene Try not to call this method more than once a frame.\n   */\n  _update: function() {\n\n    if (this._flagInnerRadius || this._flagOuterRadius || this._flagSides) {\n\n      var sides = this._sides * 2;\n      var amount = sides + 1;\n      var length = this.vertices.length;\n\n      if (length > sides) {\n        this.vertices.splice(sides - 1, length - sides);\n        length = sides;\n      }\n\n      for (var i = 0; i < amount; i++) {\n\n        var pct = (i + 0.5) / sides;\n        var theta = TWO_PI$5 * pct;\n        var r = (!(i % 2) ? this._innerRadius : this._outerRadius) / 2;\n        var x = r * cos$5(theta);\n        var y = r * sin$5(theta);\n\n        if (i >= length) {\n          this.vertices.push(new Anchor(x, y));\n        } else {\n          this.vertices[i].set(x, y);\n        }\n\n        this.vertices[i].command = i === 0\n          ? Commands.move : Commands.line;\n\n      }\n\n    }\n\n    Path.prototype._update.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Star#flagReset\n   * @function\n   * @private\n   * @description Called internally to reset all flags. Ensures that only properties that change are updated before being sent to the renderer.\n   */\n  flagReset: function() {\n\n    this._flagInnerRadius = this._flagOuterRadius = this._flagSides = false;\n    Path.prototype.flagReset.call(this);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two.Star#clone\n   * @function\n   * @param {Two.Group} [parent] - The parent group or scene to add the clone to.\n   * @returns {Two.Star}\n   * @description Create a new instance of {@link Two.Star} with the same properties of the current path.\n   */\n  clone: function(parent) {\n\n    var ir = this.innerRadius;\n    var or = this.outerRadius;\n    var sides = this.sides;\n\n    var clone = new Star(0, 0, ir, or, sides);\n\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n\n    _.each(Path.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n\n    if (parent) {\n      parent.add(clone);\n    }\n\n    return clone;\n\n  },\n\n  /**\n   * @name Two.Star#toObject\n   * @function\n   * @returns {Object}\n   * @description Return a JSON compatible plain object that represents the path.\n   */\n  toObject: function() {\n\n    var object = Path.prototype.toObject.call(this);\n\n    _.each(Star.Properties, function(property) {\n      object[property] = this[property];\n    }, this);\n\n    return object;\n\n  }\n\n});\n\nStar.MakeObservable(Star.prototype);\n\nvar svg = {\n\n  version: 1.1,\n\n  ns: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n\n  alignments: {\n    left: 'start',\n    center: 'middle',\n    right: 'end'\n  },\n\n  // Create an svg namespaced element.\n  createElement: function(name, attrs) {\n    var tag = name;\n    var elem = document.createElementNS(svg.ns, tag);\n    if (tag === 'svg') {\n      attrs = _.defaults(attrs || {}, {\n        version: svg.version\n      });\n    }\n    if (attrs && Object.keys(attrs).length > 0) {\n      svg.setAttributes(elem, attrs);\n    }\n    return elem;\n  },\n\n  // Add attributes from an svg element.\n  setAttributes: function(elem, attrs) {\n    var keys = Object.keys(attrs);\n    for (var i = 0; i < keys.length; i++) {\n      if (/href/.test(keys[i])) {\n        elem.setAttributeNS(svg.xlink, keys[i], attrs[keys[i]]);\n      } else {\n        elem.setAttribute(keys[i], attrs[keys[i]]);\n      }\n    }\n    return this;\n  },\n\n  // Remove attributes from an svg element.\n  removeAttributes: function(elem, attrs) {\n    for (var key in attrs) {\n      elem.removeAttribute(key);\n    }\n    return this;\n  },\n\n  // Turn a set of vertices into a string for the d property of a path\n  // element. It is imperative that the string collation is as fast as\n  // possible, because this call will be happening multiple times a\n  // second.\n  toString: function(points, closed) {\n\n    var l = points.length,\n      last = l - 1,\n      d, // The elusive last Commands.move point\n      string = '';\n\n    for (var i = 0; i < l; i++) {\n      var b = points[i];\n      var command;\n      var prev = closed ? mod(i - 1, l) : Math.max(i - 1, 0);\n      var next = closed ? mod(i + 1, l) : Math.min(i + 1, last);\n\n      var a = points[prev];\n      var c = points[next];\n\n      var vx, vy, ux, uy, ar, bl, br, cl;\n      var rx, ry, xAxisRotation, largeArcFlag, sweepFlag;\n\n      // Access x and y directly,\n      // bypassing the getter\n      var x = toFixed(b.x);\n      var y = toFixed(b.y);\n\n      switch (b.command) {\n\n        case Commands.close:\n          command = Commands.close;\n          break;\n\n        case Commands.arc:\n\n          rx = b.rx;\n          ry = b.ry;\n          xAxisRotation = b.xAxisRotation;\n          largeArcFlag = b.largeArcFlag;\n          sweepFlag = b.sweepFlag;\n\n          command = Commands.arc + ' ' + rx + ' ' + ry + ' '\n            + xAxisRotation + ' ' + largeArcFlag + ' ' + sweepFlag + ' '\n            + x + ' ' + y;\n          break;\n\n        case Commands.curve:\n\n          ar = (a.controls && a.controls.right) || Vector.zero;\n          bl = (b.controls && b.controls.left) || Vector.zero;\n\n          if (a.relative) {\n            vx = toFixed((ar.x + a.x));\n            vy = toFixed((ar.y + a.y));\n          } else {\n            vx = toFixed(ar.x);\n            vy = toFixed(ar.y);\n          }\n\n          if (b.relative) {\n            ux = toFixed((bl.x + b.x));\n            uy = toFixed((bl.y + b.y));\n          } else {\n            ux = toFixed(bl.x);\n            uy = toFixed(bl.y);\n          }\n\n          command = ((i === 0) ? Commands.move : Commands.curve) +\n            ' ' + vx + ' ' + vy + ' ' + ux + ' ' + uy + ' ' + x + ' ' + y;\n          break;\n\n        case Commands.move:\n          d = b;\n          command = Commands.move + ' ' + x + ' ' + y;\n          break;\n\n        default:\n          command = b.command + ' ' + x + ' ' + y;\n\n      }\n\n      // Add a final point and close it off\n\n      if (i >= last && closed) {\n\n        if (b.command === Commands.curve) {\n\n          // Make sure we close to the most previous Commands.move\n          c = d;\n\n          br = (b.controls && b.controls.right) || b;\n          cl = (c.controls && c.controls.left) || c;\n\n          if (b.relative) {\n            vx = toFixed((br.x + b.x));\n            vy = toFixed((br.y + b.y));\n          } else {\n            vx = toFixed(br.x);\n            vy = toFixed(br.y);\n          }\n\n          if (c.relative) {\n            ux = toFixed((cl.x + c.x));\n            uy = toFixed((cl.y + c.y));\n          } else {\n            ux = toFixed(cl.x);\n            uy = toFixed(cl.y);\n          }\n\n          x = toFixed(c.x);\n          y = toFixed(c.y);\n\n          command +=\n            ' C ' + vx + ' ' + vy + ' ' + ux + ' ' + uy + ' ' + x + ' ' + y;\n\n        }\n\n        if (b.command !== Commands.close) {\n          command += ' Z';\n        }\n\n      }\n\n      string += command + ' ';\n\n    }\n\n    return string;\n\n  },\n\n  getClip: function(shape) {\n\n    var clip = shape._renderer.clip;\n\n    if (!clip) {\n\n      var root = shape;\n\n      while (root.parent) {\n        root = root.parent;\n      }\n\n      clip = shape._renderer.clip = svg.createElement('clipPath');\n      root.defs.appendChild(clip);\n\n    }\n\n    return clip;\n\n  },\n\n  group: {\n\n    // TODO: Can speed up.\n    // TODO: How does this effect a f\n    appendChild: function(object) {\n\n      var elem = object._renderer.elem;\n\n      if (!elem) {\n        return;\n      }\n\n      var tag = elem.nodeName;\n\n      if (!tag || /(radial|linear)gradient/i.test(tag) || object._clip) {\n        return;\n      }\n\n      this.elem.appendChild(elem);\n\n    },\n\n    removeChild: function(object) {\n\n      var elem = object._renderer.elem;\n\n      if (!elem || elem.parentNode != this.elem) {\n        return;\n      }\n\n      var tag = elem.nodeName;\n\n      if (!tag) {\n        return;\n      }\n\n      // Defer subtractions while clipping.\n      if (object._clip) {\n        return;\n      }\n\n      this.elem.removeChild(elem);\n\n    },\n\n    orderChild: function(object) {\n      this.elem.appendChild(object._renderer.elem);\n    },\n\n    renderChild: function(child) {\n      svg[child._renderer.type].render.call(child, this);\n    },\n\n    render: function(domElement) {\n\n      this._update();\n\n      // Shortcut for hidden objects.\n      // Doesn't reset the flags, so changes are stored and\n      // applied once the object is visible again\n      if (this._opacity === 0 && !this._flagOpacity) {\n        return this;\n      }\n\n      if (!this._renderer.elem) {\n        this._renderer.elem = svg.createElement('g', {\n          id: this.id\n        });\n        domElement.appendChild(this._renderer.elem);\n      }\n\n      // _Update styles for the <g>\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n      var context = {\n        domElement: domElement,\n        elem: this._renderer.elem\n      };\n\n      if (flagMatrix) {\n        this._renderer.elem.setAttribute('transform', 'matrix(' + this._matrix.toString() + ')');\n      }\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        svg[child._renderer.type].render.call(child, domElement);\n      }\n\n      if (this._flagOpacity) {\n        this._renderer.elem.setAttribute('opacity', this._opacity);\n      }\n\n      if (this._flagClassName) {\n        this._renderer.elem.setAttribute('class', this.classList.join(' '));\n      }\n\n      if (this._flagAdditions) {\n        this.additions.forEach(svg.group.appendChild, context);\n      }\n\n      if (this._flagSubtractions) {\n        this.subtractions.forEach(svg.group.removeChild, context);\n      }\n\n      if (this._flagOrder) {\n        this.children.forEach(svg.group.orderChild, context);\n      }\n\n      // Commented two-way functionality of clips / masks with groups and\n      // polygons. Uncomment when this bug is fixed:\n      // https://code.google.com/p/chromium/issues/detail?id=370951\n\n      // if (this._flagClip) {\n\n      //   clip = svg.getClip(this);\n      //   elem = this._renderer.elem;\n\n      //   if (this._clip) {\n      //     elem.removeAttribute('id');\n      //     clip.setAttribute('id', this.id);\n      //     clip.appendChild(elem);\n      //   } else {\n      //     clip.removeAttribute('id');\n      //     elem.setAttribute('id', this.id);\n      //     this.parent._renderer.elem.appendChild(elem); // TODO: should be insertBefore\n      //   }\n\n      // }\n\n      if (this._flagMask) {\n        if (this._mask) {\n          this._renderer.elem.setAttribute('clip-path', 'url(#' + this._mask.id + ')');\n        } else {\n          this._renderer.elem.removeAttribute('clip-path');\n        }\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  path: {\n\n    render: function(domElement) {\n\n      this._update();\n\n      // Shortcut for hidden objects.\n      // Doesn't reset the flags, so changes are stored and\n      // applied once the object is visible again\n      if (this._opacity === 0 && !this._flagOpacity) {\n        return this;\n      }\n\n      // Collect any attribute that needs to be changed here\n      var changed = {};\n\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n\n      if (flagMatrix) {\n        changed.transform = 'matrix(' + this._matrix.toString() + ')';\n      }\n\n      if (this._flagVertices) {\n        var vertices = svg.toString(this._renderer.vertices, this._closed);\n        changed.d = vertices;\n      }\n\n      if (this._fill && this._fill._renderer) {\n        this._fill._update();\n        svg[this._fill._renderer.type].render.call(this._fill, domElement, true);\n      }\n\n      if (this._flagFill) {\n        changed.fill = this._fill && this._fill.id\n          ? 'url(#' + this._fill.id + ')' : this._fill;\n      }\n\n      if (this._stroke && this._stroke._renderer) {\n        this._stroke._update();\n        svg[this._stroke._renderer.type].render.call(this._stroke, domElement, true);\n      }\n\n      if (this._flagStroke) {\n        changed.stroke = this._stroke && this._stroke.id\n          ? 'url(#' + this._stroke.id + ')' : this._stroke;\n      }\n\n      if (this._flagLinewidth) {\n        changed['stroke-width'] = this._linewidth;\n      }\n\n      if (this._flagOpacity) {\n        changed['stroke-opacity'] = this._opacity;\n        changed['fill-opacity'] = this._opacity;\n      }\n\n      if (this._flagClassName) {\n        changed['class'] = this.classList.join(' ');\n      }\n\n      if (this._flagVisible) {\n        changed.visibility = this._visible ? 'visible' : 'hidden';\n      }\n\n      if (this._flagCap) {\n        changed['stroke-linecap'] = this._cap;\n      }\n\n      if (this._flagJoin) {\n        changed['stroke-linejoin'] = this._join;\n      }\n\n      if (this._flagMiter) {\n        changed['stroke-miterlimit'] = this._miter;\n      }\n\n      if (this.dashes && this.dashes.length > 0) {\n        changed['stroke-dasharray'] = this.dashes.join(' ');\n        changed['stroke-dashoffset'] = this.dashes.offset || 0;\n      }\n\n      // If there is no attached DOM element yet,\n      // create it with all necessary attributes.\n      if (!this._renderer.elem) {\n\n        changed.id = this.id;\n        this._renderer.elem = svg.createElement('path', changed);\n        domElement.appendChild(this._renderer.elem);\n\n      // Otherwise apply all pending attributes\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n\n      if (this._flagClip) {\n\n        var clip = svg.getClip(this);\n        var elem = this._renderer.elem;\n\n        if (this._clip) {\n          elem.removeAttribute('id');\n          clip.setAttribute('id', this.id);\n          clip.appendChild(elem);\n        } else {\n          clip.removeAttribute('id');\n          elem.setAttribute('id', this.id);\n          this.parent._renderer.elem.appendChild(elem); // TODO: should be insertBefore\n        }\n\n      }\n\n      // Commented two-way functionality of clips / masks with groups and\n      // polygons. Uncomment when this bug is fixed:\n      // https://code.google.com/p/chromium/issues/detail?id=370951\n\n      // if (this._flagMask) {\n      //   if (this._mask) {\n      //     elem.setAttribute('clip-path', 'url(#' + this._mask.id + ')');\n      //   } else {\n      //     elem.removeAttribute('clip-path');\n      //   }\n      // }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  text: {\n\n    render: function(domElement) {\n\n      this._update();\n\n      var changed = {};\n\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n\n      if (flagMatrix) {\n        changed.transform = 'matrix(' + this._matrix.toString() + ')';\n      }\n\n      if (this._flagFamily) {\n        changed['font-family'] = this._family;\n      }\n      if (this._flagSize) {\n        changed['font-size'] = this._size;\n      }\n      if (this._flagLeading) {\n        changed['line-height'] = this._leading;\n      }\n      if (this._flagAlignment) {\n        changed['text-anchor'] = svg.alignments[this._alignment] || this._alignment;\n      }\n      if (this._flagBaseline) {\n        changed['alignment-baseline'] = changed['dominant-baseline'] = this._baseline;\n      }\n      if (this._flagStyle) {\n        changed['font-style'] = this._style;\n      }\n      if (this._flagWeight) {\n        changed['font-weight'] = this._weight;\n      }\n      if (this._flagDecoration) {\n        changed['text-decoration'] = this._decoration;\n      }\n      if (this._fill && this._fill._renderer) {\n        this._fill._update();\n        svg[this._fill._renderer.type].render.call(this._fill, domElement, true);\n      }\n      if (this._flagFill) {\n        changed.fill = this._fill && this._fill.id\n          ? 'url(#' + this._fill.id + ')' : this._fill;\n      }\n      if (this._stroke && this._stroke._renderer) {\n        this._stroke._update();\n        svg[this._stroke._renderer.type].render.call(this._stroke, domElement, true);\n      }\n      if (this._flagStroke) {\n        changed.stroke = this._stroke && this._stroke.id\n          ? 'url(#' + this._stroke.id + ')' : this._stroke;\n      }\n      if (this._flagLinewidth) {\n        changed['stroke-width'] = this._linewidth;\n      }\n      if (this._flagOpacity) {\n        changed.opacity = this._opacity;\n      }\n      if (this._flagClassName) {\n        changed['class'] = this.classList.join(' ');\n      }\n      if (this._flagVisible) {\n        changed.visibility = this._visible ? 'visible' : 'hidden';\n      }\n      if (this.dashes && this.dashes.length > 0) {\n        changed['stroke-dasharray'] = this.dashes.join(' ');\n        changed['stroke-dashoffset'] = this.dashes.offset || 0;\n      }\n\n      if (!this._renderer.elem) {\n\n        changed.id = this.id;\n\n        this._renderer.elem = svg.createElement('text', changed);\n        domElement.defs.appendChild(this._renderer.elem);\n\n      } else {\n\n        svg.setAttributes(this._renderer.elem, changed);\n\n      }\n\n      if (this._flagClip) {\n\n        var clip = svg.getClip(this);\n        var elem = this._renderer.elem;\n\n        if (this._clip) {\n          elem.removeAttribute('id');\n          clip.setAttribute('id', this.id);\n          clip.appendChild(elem);\n        } else {\n          clip.removeAttribute('id');\n          elem.setAttribute('id', this.id);\n          this.parent._renderer.elem.appendChild(elem); // TODO: should be insertBefore\n        }\n\n      }\n\n      if (this._flagValue) {\n        this._renderer.elem.textContent = this._value;\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'linear-gradient': {\n\n    render: function(domElement, silent) {\n\n      if (!silent) {\n        this._update();\n      }\n\n      var changed = {};\n\n      if (this._flagEndPoints) {\n        changed.x1 = this.left._x;\n        changed.y1 = this.left._y;\n        changed.x2 = this.right._x;\n        changed.y2 = this.right._y;\n      }\n\n      if (this._flagSpread) {\n        changed.spreadMethod = this._spread;\n      }\n\n      // If there is no attached DOM element yet,\n      // create it with all necessary attributes.\n      if (!this._renderer.elem) {\n\n        changed.id = this.id;\n        changed.gradientUnits = 'userSpaceOnUse';\n        this._renderer.elem = svg.createElement('linearGradient', changed);\n        domElement.defs.appendChild(this._renderer.elem);\n\n      // Otherwise apply all pending attributes\n      } else {\n\n        svg.setAttributes(this._renderer.elem, changed);\n\n      }\n\n      if (this._flagStops) {\n\n        var lengthChanged = this._renderer.elem.childNodes.length\n          !== this.stops.length;\n\n        if (lengthChanged) {\n          while (this._renderer.elem.lastChild) {\n            this._renderer.elem.removeChild(this._renderer.elem.lastChild);\n          }\n        }\n\n        for (var i = 0; i < this.stops.length; i++) {\n\n          var stop = this.stops[i];\n          var attrs = {};\n\n          if (stop._flagOffset) {\n            attrs.offset = 100 * stop._offset + '%';\n          }\n          if (stop._flagColor) {\n            attrs['stop-color'] = stop._color;\n          }\n          if (stop._flagOpacity) {\n            attrs['stop-opacity'] = stop._opacity;\n          }\n\n          if (!stop._renderer.elem) {\n            stop._renderer.elem = svg.createElement('stop', attrs);\n          } else {\n            svg.setAttributes(stop._renderer.elem, attrs);\n          }\n\n          if (lengthChanged) {\n            this._renderer.elem.appendChild(stop._renderer.elem);\n          }\n          stop.flagReset();\n\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'radial-gradient': {\n\n    render: function(domElement, silent) {\n\n      if (!silent) {\n        this._update();\n      }\n\n      var changed = {};\n\n      if (this._flagCenter) {\n        changed.cx = this.center._x;\n        changed.cy = this.center._y;\n      }\n      if (this._flagFocal) {\n        changed.fx = this.focal._x;\n        changed.fy = this.focal._y;\n      }\n\n      if (this._flagRadius) {\n        changed.r = this._radius;\n      }\n\n      if (this._flagSpread) {\n        changed.spreadMethod = this._spread;\n      }\n\n      // If there is no attached DOM element yet,\n      // create it with all necessary attributes.\n      if (!this._renderer.elem) {\n\n        changed.id = this.id;\n        changed.gradientUnits = 'userSpaceOnUse';\n        this._renderer.elem = svg.createElement('radialGradient', changed);\n        domElement.defs.appendChild(this._renderer.elem);\n\n      // Otherwise apply all pending attributes\n      } else {\n\n        svg.setAttributes(this._renderer.elem, changed);\n\n      }\n\n      if (this._flagStops) {\n\n        var lengthChanged = this._renderer.elem.childNodes.length\n          !== this.stops.length;\n\n        if (lengthChanged) {\n          while (this._renderer.elem.lastChild) {\n            this._renderer.elem.removeChild(this._renderer.elem.lastChild);\n          }\n        }\n\n        for (var i = 0; i < this.stops.length; i++) {\n\n          var stop = this.stops[i];\n          var attrs = {};\n\n          if (stop._flagOffset) {\n            attrs.offset = 100 * stop._offset + '%';\n          }\n          if (stop._flagColor) {\n            attrs['stop-color'] = stop._color;\n          }\n          if (stop._flagOpacity) {\n            attrs['stop-opacity'] = stop._opacity;\n          }\n\n          if (!stop._renderer.elem) {\n            stop._renderer.elem = svg.createElement('stop', attrs);\n          } else {\n            svg.setAttributes(stop._renderer.elem, attrs);\n          }\n\n          if (lengthChanged) {\n            this._renderer.elem.appendChild(stop._renderer.elem);\n          }\n          stop.flagReset();\n\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  texture: {\n\n    render: function(domElement, silent) {\n\n      if (!silent) {\n        this._update();\n      }\n\n      var changed = {};\n      var styles = { x: 0, y: 0 };\n      var image = this.image;\n\n      if (this._flagLoaded && this.loaded) {\n\n        switch (image.nodeName.toLowerCase()) {\n\n          case 'canvas':\n            styles.href = styles['xlink:href'] = image.toDataURL('image/png');\n            break;\n          case 'img':\n          case 'image':\n            styles.href = styles['xlink:href'] = this.src;\n            break;\n\n        }\n\n      }\n\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n\n        changed.x = this._offset.x;\n        changed.y = this._offset.y;\n\n        if (image) {\n\n          changed.x -= image.width / 2;\n          changed.y -= image.height / 2;\n\n          if (this._scale instanceof Vector) {\n            changed.x *= this._scale.x;\n            changed.y *= this._scale.y;\n          } else {\n            changed.x *= this._scale;\n            changed.y *= this._scale;\n          }\n        }\n\n        if (changed.x > 0) {\n          changed.x *= - 1;\n        }\n        if (changed.y > 0) {\n          changed.y *= - 1;\n        }\n\n      }\n\n      if (this._flagScale || this._flagLoaded || this._flagRepeat) {\n\n        changed.width = 0;\n        changed.height = 0;\n\n        if (image) {\n\n          styles.width = changed.width = image.width;\n          styles.height = changed.height = image.height;\n\n          // TODO: Hack / Band-aid\n          switch (this._repeat) {\n            case 'no-repeat':\n              changed.width += 1;\n              changed.height += 1;\n              break;\n          }\n\n          if (this._scale instanceof Vector) {\n            changed.width *= this._scale.x;\n            changed.height *= this._scale.y;\n          } else {\n            changed.width *= this._scale;\n            changed.height *= this._scale;\n          }\n        }\n\n      }\n\n      if (this._flagScale || this._flagLoaded) {\n        if (!this._renderer.image) {\n          this._renderer.image = svg.createElement('image', styles);\n        } else {\n          svg.setAttributes(this._renderer.image, styles);\n        }\n      }\n\n      if (!this._renderer.elem) {\n\n        changed.id = this.id;\n        changed.patternUnits = 'userSpaceOnUse';\n        this._renderer.elem = svg.createElement('pattern', changed);\n        domElement.defs.appendChild(this._renderer.elem);\n\n      } else if (Object.keys(changed).length !== 0) {\n\n        svg.setAttributes(this._renderer.elem, changed);\n\n      }\n\n      if (this._renderer.elem && this._renderer.image && !this._renderer.appended) {\n        this._renderer.elem.appendChild(this._renderer.image);\n        this._renderer.appended = true;\n      }\n\n      return this.flagReset();\n\n    }\n\n  }\n\n};\n\n/**\n * @name Two.SVGRenderer\n * @class\n * @extends Two.Events\n * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n * @param {Element} [parameters.domElement] - The `<svg />` to draw to. If none given a new one will be constructed.\n * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.svg` (the default type). It takes Two.js' scenegraph and renders it to a `<svg />`.\n */\nvar Renderer$1 = function(params) {\n\n  /**\n   * @name Two.SVGRenderer#domElement\n   * @property {Element} - The `<svg />` associated with the Two.js scene.\n   */\n  this.domElement = params.domElement || svg.createElement('svg');\n\n  /**\n   * @name Two.SVGRenderer#scene\n   * @property {Two.Group} - The root group of the scenegraph.\n   */\n  this.scene = new Group();\n  this.scene.parent = this;\n\n  /**\n   * @name Two.SVGRenderer#defs\n   * @property {SvgDefintionsElement} - The `<defs />` to apply gradients, patterns, and bitmap imagery.\n   */\n  this.defs = svg.createElement('defs');\n  this.domElement.appendChild(this.defs);\n  this.domElement.defs = this.defs;\n  this.domElement.style.overflow = 'hidden';\n\n};\n\n_.extend(Renderer$1, {\n\n  /**\n   * @name Two.SVGRenderer.Utils\n   * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<svg />`.\n   */\n  Utils: svg\n\n});\n\n_.extend(Renderer$1.prototype, Events, {\n\n  constructor: Renderer$1,\n\n  /**\n   * @name Two.SVGRenderer#setSize\n   * @function\n   * @param {Number} width - The new width of the renderer.\n   * @param {Number} height - The new height of the renderer.\n   * @description Change the size of the renderer.\n   * @nota-bene Triggers a `Two.Events.resize`.\n   */\n  setSize: function(width, height) {\n\n    this.width = width;\n    this.height = height;\n\n    svg.setAttributes(this.domElement, {\n      width: width,\n      height: height\n    });\n\n    return this.trigger(Events.Types.resize, width, height);\n\n  },\n\n  /**\n   * @name Two.SVGRenderer#render\n   * @function\n   * @description Render the current scene to the `<svg />`.\n   */\n  render: function() {\n\n    svg.group.render.call(this.scene, this.domElement);\n\n    return this;\n\n  }\n\n});\n\n// Constants\n\nvar multiplyMatrix = Matrix$1.Multiply,\n  identity = [1, 0, 0, 0, 1, 0, 0, 0, 1],\n  transformation = new NumArray(9),\n  CanvasUtils = Renderer.Utils;\n\nvar webgl = {\n\n  isHidden: /(undefined|none|transparent)/i,\n\n  canvas: (root$1.document ? root$1.document.createElement('canvas') : { getContext: function() {} }),\n\n  alignments: {\n    left: 'start',\n    middle: 'center',\n    right: 'end'\n  },\n\n  matrix: new Matrix$1(),\n\n  group: {\n\n    removeChild: function(child, gl) {\n      if (child.children) {\n        for (var i = 0; i < child.children.length; i++) {\n          webgl.group.removeChild(child.children[i], gl);\n        }\n        return;\n      }\n      // Deallocate texture to free up gl memory.\n      gl.deleteTexture(child._renderer.texture);\n      delete child._renderer.texture;\n    },\n\n    render: function(gl, program) {\n\n      this._update();\n\n      var parent = this.parent;\n      var flagParentMatrix = (parent._matrix && parent._matrix.manual) || parent._flagMatrix;\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n\n      if (flagParentMatrix || flagMatrix) {\n\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n\n        // Reduce amount of object / array creation / deletion\n        this._matrix.toTransformArray(true, transformation);\n\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x;\n          this._renderer.scale.y = this._scale.y;\n        } else {\n          this._renderer.scale.x = this._scale;\n          this._renderer.scale.y = this._scale;\n        }\n\n        if (!(/renderer/i.test(parent._renderer.type))) {\n          this._renderer.scale.x *= parent._renderer.scale.x;\n          this._renderer.scale.y *= parent._renderer.scale.y;\n        }\n\n        if (flagParentMatrix) {\n          this._flagMatrix = true;\n        }\n\n      }\n\n      if (this._mask) {\n\n        // Stencil away everything that isn't rendered by the mask\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n\n        gl.stencilFunc(gl.ALWAYS, 1, 0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n        // Don't draw the element onto the canvas, only onto the stencil buffer\n        gl.colorMask(false, false, false, false);\n\n        webgl[this._mask._renderer.type].render.call(this._mask, gl, program, this);\n\n        gl.stencilFunc(gl.EQUAL, 1, 0xff);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        gl.colorMask(true, true, true, true);\n\n      }\n\n      this._flagOpacity = parent._flagOpacity || this._flagOpacity;\n\n      this._renderer.opacity = this._opacity\n        * (parent && parent._renderer ? parent._renderer.opacity : 1);\n\n      var i;\n      if (this._flagSubtractions) {\n        for (i = 0; i < this.subtractions.length; i++) {\n          webgl.group.removeChild(this.subtractions[i], gl);\n        }\n      }\n\n      for (i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        webgl[child._renderer.type].render.call(child, gl, program);\n      }\n\n      if (this._mask) {\n        gl.disable(gl.STENCIL_TEST);\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  path: {\n\n    updateCanvas: function(elem) {\n\n      var next, prev, a, c, ux, uy, vx, vy, ar, bl, br, cl, x, y;\n      var isOffset;\n\n      var commands = elem._renderer.vertices;\n      var canvas = this.canvas;\n      var ctx = this.ctx;\n\n      // Styles\n      var scale = elem._renderer.scale;\n      var stroke = elem._stroke;\n      var linewidth = elem._linewidth;\n      var fill = elem._fill;\n      var opacity = elem._renderer.opacity || elem._opacity;\n      var cap = elem._cap;\n      var join = elem._join;\n      var miter = elem._miter;\n      var closed = elem._closed;\n      var dashes = elem.dashes;\n      var length = commands.length;\n      var last = length - 1;\n\n      canvas.width = Math.max(Math.ceil(elem._renderer.rect.width * scale.x), 1);\n      canvas.height = Math.max(Math.ceil(elem._renderer.rect.height * scale.y), 1);\n\n      var centroid = elem._renderer.rect.centroid;\n      var cx = centroid.x;\n      var cy = centroid.y;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (fill) {\n        if (typeof fill === 'string') {\n          ctx.fillStyle = fill;\n        } else {\n          webgl[fill._renderer.type].render.call(fill, ctx, elem);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === 'string') {\n          ctx.strokeStyle = stroke;\n        } else {\n          webgl[stroke._renderer.type].render.call(stroke, ctx, elem);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n        if (miter) {\n          ctx.miterLimit = miter;\n        }\n        if (join) {\n          ctx.lineJoin = join;\n        }\n        if (!closed && cap) {\n          ctx.lineCap = cap;\n        }\n      }\n      if (typeof opacity === 'number') {\n        ctx.globalAlpha = opacity;\n      }\n\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n\n      var d;\n      ctx.save();\n      ctx.scale(scale.x, scale.y);\n\n      ctx.translate(cx, cy);\n\n      ctx.beginPath();\n      for (var i = 0; i < commands.length; i++) {\n\n        var b = commands[i];\n\n        x = b.x;\n        y = b.y;\n\n        switch (b.command) {\n\n          case Commands.close:\n            ctx.closePath();\n            break;\n\n          case Commands.arc:\n\n            var rx = b.rx;\n            var ry = b.ry;\n            var xAxisRotation = b.xAxisRotation;\n            var largeArcFlag = b.largeArcFlag;\n            var sweepFlag = b.sweepFlag;\n\n            prev = closed ? mod(i - 1, length) : Math.max(i - 1, 0);\n            a = commands[prev];\n\n            var ax = a.x;\n            var ay = a.y;\n\n            CanvasUtils.renderSvgArcCommand(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y);\n            break;\n\n          case Commands.curve:\n\n            prev = closed ? mod(i - 1, length) : Math.max(i - 1, 0);\n            next = closed ? mod(i + 1, length) : Math.min(i + 1, last);\n\n            a = commands[prev];\n            c = commands[next];\n            ar = (a.controls && a.controls.right) || Vector.zero;\n            bl = (b.controls && b.controls.left) || Vector.zero;\n\n            if (a._relative) {\n              vx = ar.x + a.x;\n              vy = ar.y + a.y;\n            } else {\n              vx = ar.x;\n              vy = ar.y;\n            }\n\n            if (b._relative) {\n              ux = bl.x + b.x;\n              uy = bl.y + b.y;\n            } else {\n              ux = bl.x;\n              uy = bl.y;\n            }\n\n            ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n\n            if (i >= last && closed) {\n\n              c = d;\n\n              br = (b.controls && b.controls.right) || Vector.zero;\n              cl = (c.controls && c.controls.left) || Vector.zero;\n\n              if (b._relative) {\n                vx = br.x + b.x;\n                vy = br.y + b.y;\n              } else {\n                vx = br.x;\n                vy = br.y;\n              }\n\n              if (c._relative) {\n                ux = cl.x + c.x;\n                uy = cl.y + c.y;\n              } else {\n                ux = cl.x;\n                uy = cl.y;\n              }\n\n              x = c.x;\n              y = c.y;\n\n              ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n\n            }\n\n            break;\n\n          case Commands.line:\n            ctx.lineTo(x, y);\n            break;\n\n          case Commands.move:\n            d = b;\n            ctx.moveTo(x, y);\n            break;\n\n        }\n\n      }\n\n      // Loose ends\n\n      if (closed) {\n        ctx.closePath();\n      }\n\n      if (!webgl.isHidden.test(fill)) {\n        isOffset = fill._renderer && fill._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(\n            - fill._renderer.offset.x, - fill._renderer.offset.y);\n          ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n        }\n        ctx.fill();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n\n      if (!webgl.isHidden.test(stroke)) {\n        isOffset = stroke._renderer && stroke._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(\n            - stroke._renderer.offset.x, - stroke._renderer.offset.y);\n          ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n          ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n        }\n        ctx.stroke();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n\n      ctx.restore();\n\n    },\n\n    // Returns the rect of a set of verts. Typically takes vertices that are\n    // \"centered\" around 0 and returns them to be anchored upper-left.\n    getBoundingClientRect: function(vertices, border, rect) {\n\n      var left = Infinity, right = -Infinity,\n          top = Infinity, bottom = -Infinity,\n          width, height;\n\n      vertices.forEach(function(v) {\n\n        var x = v.x, y = v.y, controls = v.controls;\n        var a, b, c, d, cl, cr;\n\n        top = Math.min(y, top);\n        left = Math.min(x, left);\n        right = Math.max(x, right);\n        bottom = Math.max(y, bottom);\n\n        if (!v.controls) {\n          return;\n        }\n\n        cl = controls.left;\n        cr = controls.right;\n\n        if (!cl || !cr) {\n          return;\n        }\n\n        a = v._relative ? cl.x + x : cl.x;\n        b = v._relative ? cl.y + y : cl.y;\n        c = v._relative ? cr.x + x : cr.x;\n        d = v._relative ? cr.y + y : cr.y;\n\n        if (!a || !b || !c || !d) {\n          return;\n        }\n\n        top = Math.min(b, d, top);\n        left = Math.min(a, c, left);\n        right = Math.max(a, c, right);\n        bottom = Math.max(b, d, bottom);\n\n      });\n\n      // Expand borders\n\n      if (typeof border === 'number') {\n        top -= border;\n        left -= border;\n        right += border;\n        bottom += border;\n      }\n\n      width = right - left;\n      height = bottom - top;\n\n      rect.top = top;\n      rect.left = left;\n      rect.right = right;\n      rect.bottom = bottom;\n      rect.width = width;\n      rect.height = height;\n\n      if (!rect.centroid) {\n        rect.centroid = {};\n      }\n\n      rect.centroid.x = - left;\n      rect.centroid.y = - top;\n\n    },\n\n    render: function(gl, program, forcedParent) {\n\n      if (!this._visible || !this._opacity) {\n        return this;\n      }\n\n      this._update();\n\n      // Calculate what changed\n\n      var parent = forcedParent || this.parent;\n      var flagParentMatrix = parent._matrix.manual || parent._flagMatrix;\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n      var parentChanged = this._renderer.parent !== parent;\n      var flagTexture = this._flagVertices || this._flagFill\n        || (this._fill instanceof LinearGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagEndPoints))\n        || (this._fill instanceof RadialGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagRadius || this._fill._flagCenter || this._fill._flagFocal))\n        || (this._fill instanceof Texture && (this._fill._flagLoaded && this._fill.loaded || this._fill._flagImage || this._fill._flagVideo || this._fill._flagRepeat || this._fill._flagOffset || this._fill._flagScale))\n        || (this._stroke instanceof LinearGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagEndPoints))\n        || (this._stroke instanceof RadialGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagRadius || this._stroke._flagCenter || this._stroke._flagFocal))\n        || (this._stroke instanceof Texture && (this._stroke._flagLoaded && this._stroke.loaded || this._stroke._flagImage || this._stroke._flagVideo || this._stroke._flagRepeat || this._stroke._flagOffset || this._fill._flagScale))\n        || this._flagStroke || this._flagLinewidth || this._flagOpacity\n        || parent._flagOpacity || this._flagVisible || this._flagCap\n        || this._flagJoin || this._flagMiter || this._flagScale\n        || (this.dashes && this.dashes.length > 0)\n        || !this._renderer.texture;\n\n      if (flagParentMatrix || flagMatrix || parentChanged) {\n\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n\n        // Reduce amount of object / array creation / deletion\n\n        this._matrix.toTransformArray(true, transformation);\n\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale.y * parent._renderer.scale.y;\n        } else {\n          this._renderer.scale.x = this._scale * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale * parent._renderer.scale.y;\n        }\n\n        if (parentChanged) {\n          this._renderer.parent = parent;\n        }\n      }\n\n      if (flagTexture) {\n\n        if (!this._renderer.rect) {\n          this._renderer.rect = {};\n        }\n\n        this._renderer.opacity = this._opacity * parent._renderer.opacity;\n\n        webgl.path.getBoundingClientRect(this._renderer.vertices, this._linewidth, this._renderer.rect);\n\n        webgl.updateTexture.call(webgl, gl, this);\n\n      } else {\n\n        // We still need to update child Two elements on the fill and\n        // stroke properties.\n        if (this._fill && this._fill._update) {\n          this._fill._update();\n        }\n        if (this._stroke && this._stroke._update) {\n          this._stroke._update();\n        }\n\n      }\n\n      // if (this._mask) {\n      //   webgl[this._mask._renderer.type].render.call(mask, gl, program, this);\n      // }\n\n      if (this._clip && !forcedParent) {\n        return;\n      }\n\n      // Draw Texture\n      gl.bindTexture(gl.TEXTURE_2D, this._renderer.texture);\n\n      // Draw Rect\n      var rect = this._renderer.rect;\n      gl.uniformMatrix3fv(program.matrix, false, this._renderer.matrix);\n      gl.uniform4f(program.rect, rect.left, rect.top, rect.right, rect.bottom);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  text: {\n\n    updateCanvas: function(elem) {\n\n      var canvas = this.canvas;\n      var ctx = this.ctx;\n\n      // Styles\n      var scale = elem._renderer.scale;\n      var stroke = elem._stroke;\n      var linewidth = elem._linewidth * scale;\n      var fill = elem._fill;\n      var opacity = elem._renderer.opacity || elem._opacity;\n      var dashes = elem.dashes;\n      var decoration = elem._decoration;\n      var alignment = CanvasUtils.alignments[elem._alignment] || elem._alignment;\n      var baseline = elem._baseline;\n\n      canvas.width = Math.max(Math.ceil(elem._renderer.rect.width * scale.x), 1);\n      canvas.height = Math.max(Math.ceil(elem._renderer.rect.height * scale.y), 1);\n\n      var centroid = elem._renderer.rect.centroid;\n      var cx = centroid.x;\n      var cy = centroid.y;\n\n      var a, b, c, d, e, sx, sy, x1, y1, x2, y2;\n      var isOffset = fill._renderer && fill._renderer.offset\n        && stroke._renderer && stroke._renderer.offset;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (!isOffset) {\n        ctx.font = [elem._style, elem._weight, elem._size + 'px/' +\n          elem._leading + 'px', elem._family].join(' ');\n      }\n\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      // Styles\n      if (fill) {\n        if (typeof fill === 'string') {\n          ctx.fillStyle = fill;\n        } else {\n          webgl[fill._renderer.type].render.call(fill, ctx, elem);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === 'string') {\n          ctx.strokeStyle = stroke;\n        } else {\n          webgl[stroke._renderer.type].render.call(stroke, ctx, elem);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n      }\n      if (typeof opacity === 'number') {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n\n      ctx.save();\n      ctx.scale(scale.x, scale.y);\n      ctx.translate(cx, cy);\n\n      if (!webgl.isHidden.test(fill)) {\n\n        if (fill._renderer && fill._renderer.offset) {\n\n          sx = fill._renderer.scale.x;\n          sy = fill._renderer.scale.y;\n\n          ctx.save();\n          ctx.translate( - fill._renderer.offset.x,\n            - fill._renderer.offset.y);\n          ctx.scale(sx, sy);\n\n          a = elem._size / fill._renderer.scale.y;\n          b = elem._leading / fill._renderer.scale.y;\n          ctx.font = [elem._style, elem._weight, a + 'px/',\n            b + 'px', elem._family].join(' ');\n\n          c = fill._renderer.offset.x / fill._renderer.scale.x;\n          d = fill._renderer.offset.y / fill._renderer.scale.y;\n\n          ctx.fillText(elem.value, c, d);\n          ctx.restore();\n\n        } else {\n          ctx.fillText(elem.value, 0, 0);\n        }\n\n      }\n\n      if (!webgl.isHidden.test(stroke)) {\n\n        if (stroke._renderer && stroke._renderer.offset) {\n\n          sx = stroke._renderer.scale.x;\n          sy = stroke._renderer.scale.y;\n\n          ctx.save();\n          ctx.translate(- stroke._renderer.offset.x,\n            - stroke._renderer.offset.y);\n          ctx.scale(sx, sy);\n\n          a = elem._size / stroke._renderer.scale.y;\n          b = elem._leading / stroke._renderer.scale.y;\n          ctx.font = [elem._style, elem._weight, a + 'px/',\n            b + 'px', elem._family].join(' ');\n\n          c = stroke._renderer.offset.x / stroke._renderer.scale.x;\n          d = stroke._renderer.offset.y / stroke._renderer.scale.y;\n          e = linewidth / stroke._renderer.scale.x;\n\n          ctx.lineWidth = e;\n          ctx.strokeText(elem.value, c, d);\n          ctx.restore();\n\n        } else {\n          ctx.strokeText(elem.value, 0, 0);\n        }\n\n      }\n\n      // Handle text-decoration\n      if (/(underline|strikethrough)/i.test(decoration)) {\n\n        var metrics = ctx.measureText(elem.value);\n\n        switch (decoration) {\n          case 'underline':\n            y1 = metrics.actualBoundingBoxAscent;\n            y2 = metrics.actualBoundingBoxAscent;\n            break;\n          case 'strikethrough':\n            y1 = 0;\n            y2 = 0;\n            break;\n        }\n\n        x1 = - metrics.width / 2;\n        x2 = metrics.width / 2;\n\n        ctx.lineWidth = Math.max(Math.floor(elem._size / 15), 1);\n        ctx.strokeStyle = ctx.fillStyle;\n\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n\n      }\n\n      ctx.restore();\n\n    },\n\n    getBoundingClientRect: function(elem, rect) {\n\n      var ctx = webgl.ctx;\n\n      ctx.font = [elem._style, elem._weight, elem._size + 'px/' +\n        elem._leading + 'px', elem._family].join(' ');\n\n      ctx.textAlign = 'center';\n      ctx.textBaseline = elem._baseline;\n\n      // TODO: Estimate this better\n      var width = ctx.measureText(elem._value).width * 1.25;\n      var height = Math.max(elem._size, elem._leading) * 1.25;\n\n      if (this._linewidth && !webgl.isHidden.test(this._stroke)) {\n        width += this._linewidth * 2;\n        height += this._linewidth * 2;\n      }\n\n      var w = width / 2;\n      var h = height / 2;\n\n      switch (webgl.alignments[elem._alignment] || elem._alignment) {\n\n        case webgl.alignments.left:\n          rect.left = 0;\n          rect.right = width;\n          break;\n        case webgl.alignments.right:\n          rect.left = - width;\n          rect.right = 0;\n          break;\n        default:\n          rect.left = - w;\n          rect.right = w;\n      }\n\n      // TODO: Gradients aren't inherited...\n      switch (elem._baseline) {\n        case 'bottom':\n          rect.top = - height;\n          rect.bottom = 0;\n          break;\n        case 'top':\n          rect.top = 0;\n          rect.bottom = height;\n          break;\n        default:\n          rect.top = - h;\n          rect.bottom = h;\n      }\n\n      rect.width = width;\n      rect.height = height;\n\n      if (!rect.centroid) {\n        rect.centroid = {};\n      }\n\n      // TODO:\n      rect.centroid.x = w;\n      rect.centroid.y = h;\n\n    },\n\n    render: function(gl, program, forcedParent) {\n\n      if (!this._visible || !this._opacity) {\n        return this;\n      }\n\n      this._update();\n\n      // Calculate what changed\n\n      var parent = forcedParent || this.parent;\n      var flagParentMatrix = parent._matrix.manual || parent._flagMatrix;\n      var flagMatrix = this._matrix.manual || this._flagMatrix;\n      var parentChanged = this._renderer.parent !== parent;\n      var flagTexture = this._flagVertices || this._flagFill\n        || (this._fill instanceof LinearGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagEndPoints))\n        || (this._fill instanceof RadialGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagRadius || this._fill._flagCenter || this._fill._flagFocal))\n        || (this._fill instanceof Texture && (this._fill._flagLoaded && this._fill.loaded || this._fill._flagImage || this._fill._flagVideo || this._fill._flagRepeat || this._fill._flagOffset || this._fill._flagScale))\n        || (this._stroke instanceof LinearGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagEndPoints))\n        || (this._stroke instanceof RadialGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagRadius || this._stroke._flagCenter || this._stroke._flagFocal))\n        || (this._stroke instanceof Texture && (this._stroke._flagLoaded && this._stroke.loaded || this._stroke._flagImage || this._stroke._flagVideo || this._stroke._flagRepeat || this._stroke._flagOffset || this._fill._flagScale))\n        || this._flagStroke || this._flagLinewidth || this._flagOpacity\n        || parent._flagOpacity || this._flagVisible || this._flagScale\n        || this._flagValue || this._flagFamily || this._flagSize\n        || this._flagLeading || this._flagAlignment || this._flagBaseline\n        || this._flagStyle || this._flagWeight || this._flagDecoration\n        || (this.dashes && this.dashes.length > 0)\n        || !this._renderer.texture;\n\n      if (flagParentMatrix || flagMatrix || parentChanged) {\n\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n\n        // Reduce amount of object / array creation / deletion\n\n        this._matrix.toTransformArray(true, transformation);\n\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale.y * parent._renderer.scale.y;\n        } else {\n          this._renderer.scale.x = this._scale * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale * parent._renderer.scale.y;\n        }\n\n        if (parentChanged) {\n          this._renderer.parent = parent;\n        }\n      }\n\n      if (flagTexture) {\n\n        if (!this._renderer.rect) {\n          this._renderer.rect = {};\n        }\n\n        this._renderer.opacity = this._opacity * parent._renderer.opacity;\n\n        webgl.text.getBoundingClientRect(this, this._renderer.rect);\n\n        webgl.updateTexture.call(webgl, gl, this);\n\n      } else {\n\n        // We still need to update child Two elements on the fill and\n        // stroke properties.\n        if (this._fill && this._fill._update) {\n          this._fill._update();\n        }\n        if (this._stroke && this._stroke._update) {\n          this._stroke._update();\n        }\n\n      }\n\n      // if (this._mask) {\n      //   webgl[this._mask._renderer.type].render.call(mask, gl, program, this);\n      // }\n\n      if (this._clip && !forcedParent) {\n        return;\n      }\n\n      // Draw Texture\n      gl.bindTexture(gl.TEXTURE_2D, this._renderer.texture);\n\n      // Draw Rect\n      var rect = this._renderer.rect;\n      gl.uniformMatrix3fv(program.matrix, false, this._renderer.matrix);\n      gl.uniform4f(program.rect, rect.left, rect.top, rect.right, rect.bottom);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'linear-gradient': {\n\n    render: function(ctx, elem) {\n\n      if (!ctx.canvas.getContext('2d')) {\n        return;\n      }\n\n      this._update();\n\n      if (!this._renderer.effect || this._flagEndPoints || this._flagStops) {\n\n        this._renderer.effect = ctx.createLinearGradient(\n          this.left._x, this.left._y,\n          this.right._x, this.right._y\n        );\n\n        for (var i = 0; i < this.stops.length; i++) {\n          var stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  'radial-gradient': {\n\n    render: function(ctx, elem) {\n\n      if (!ctx.canvas.getContext('2d')) {\n        return;\n      }\n\n      this._update();\n\n      if (!this._renderer.effect || this._flagCenter || this._flagFocal\n          || this._flagRadius || this._flagStops) {\n\n        this._renderer.effect = ctx.createRadialGradient(\n          this.center._x, this.center._y, 0,\n          this.focal._x, this.focal._y, this._radius\n        );\n\n        for (var i = 0; i < this.stops.length; i++) {\n          var stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  texture: {\n\n    render: function(ctx, elem) {\n\n      if (!ctx.canvas.getContext('2d')) {\n        return;\n      }\n\n      this._update();\n\n      var image = this.image;\n\n      if (((this._flagLoaded || this._flagImage || this._flagVideo || this._flagRepeat) && this.loaded)) {\n        this._renderer.effect = ctx.createPattern(image, this._repeat);\n      } else if (!this._renderer.effect) {\n        return this.flagReset();\n      }\n\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n\n        if (!(this._renderer.offset instanceof Vector)) {\n          this._renderer.offset = new Vector();\n        }\n\n        this._renderer.offset.x = - this._offset.x;\n        this._renderer.offset.y = - this._offset.y;\n\n        if (image) {\n\n          this._renderer.offset.x += image.width / 2;\n          this._renderer.offset.y += image.height / 2;\n\n          if (this._scale instanceof Vector) {\n            this._renderer.offset.x *= this._scale.x;\n            this._renderer.offset.y *= this._scale.y;\n          } else {\n            this._renderer.offset.x *= this._scale;\n            this._renderer.offset.y *= this._scale;\n          }\n        }\n\n      }\n\n      if (this._flagScale || this._flagLoaded) {\n\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.copy(this._scale);\n        } else {\n          this._renderer.scale.set(this._scale, this._scale);\n        }\n\n      }\n\n      return this.flagReset();\n\n    }\n\n  },\n\n  updateTexture: function(gl, elem) {\n\n    this[elem._renderer.type].updateCanvas.call(webgl, elem);\n\n    if (!elem._renderer.texture) {\n      elem._renderer.texture = gl.createTexture();\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, elem._renderer.texture);\n\n    // Set the parameters so we can render any size image.\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    if (this.canvas.width <= 0 || this.canvas.height <= 0) {\n      return;\n    }\n\n    // Upload the image into the texture.\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.canvas);\n\n  },\n\n  program: {\n\n    create: function(gl, shaders) {\n      var program, linked, error;\n      program = gl.createProgram();\n      _.each(shaders, function(s) {\n        gl.attachShader(program, s);\n      });\n\n      gl.linkProgram(program);\n      linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n      if (!linked) {\n        error = gl.getProgramInfoLog(program);\n        gl.deleteProgram(program);\n        throw new TwoError('unable to link program: ' + error);\n      }\n\n      return program;\n\n    }\n\n  },\n\n  shaders: {\n\n    create: function(gl, source, type) {\n      var shader, compiled, error;\n      shader = gl.createShader(gl[type]);\n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n\n      compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n      if (!compiled) {\n        error = gl.getShaderInfoLog(shader);\n        gl.deleteShader(shader);\n        throw new TwoError('unable to compile shader ' + shader + ': ' + error);\n      }\n\n      return shader;\n\n    },\n\n    types: {\n      vertex: 'VERTEX_SHADER',\n      fragment: 'FRAGMENT_SHADER'\n    },\n\n    vertex: [\n      'precision mediump float;',\n      'attribute vec2 a_position;',\n      '',\n      'uniform mat3 u_matrix;',\n      'uniform vec2 u_resolution;',\n      'uniform vec4 u_rect;',\n      '',\n      'varying vec2 v_textureCoords;',\n      '',\n      'void main() {',\n      '   vec2 rectCoords = (a_position * (u_rect.zw - u_rect.xy)) + u_rect.xy;',\n      '   vec2 projected = (u_matrix * vec3(rectCoords, 1.0)).xy;',\n      '   vec2 normal = projected / u_resolution;',\n      '   vec2 clipspace = (normal * 2.0) - 1.0;',\n      '',\n      '   gl_Position = vec4(clipspace * vec2(1.0, -1.0), 0.0, 1.0);',\n      '   v_textureCoords = a_position;',\n      '}'\n    ].join('\\n'),\n\n    fragment: [\n      'precision mediump float;',\n      '',\n      'uniform sampler2D u_image;',\n      'varying vec2 v_textureCoords;',\n      '',\n      'void main() {',\n      '  vec4 texel = texture2D(u_image, v_textureCoords);',\n      '  if (texel.a == 0.0) {',\n      '    discard;',\n      '  }',\n      '  gl_FragColor = texel;',\n      '}'\n    ].join('\\n')\n\n  },\n\n  TextureRegistry: new Registry()\n\n};\n\nwebgl.ctx = webgl.canvas.getContext('2d');\n\n/**\n * @name Two.WebGLRenderer\n * @class\n * @extends Two.Events\n * @param {Object} [parameters] - This object is inherited when constructing a new instance of {@link Two}.\n * @param {Element} [parameters.domElement] - The `<canvas />` to draw to. If none given a new one will be constructed.\n * @param {CanvasElement} [parameters.offscreenElement] - The offscreen two dimensional `<canvas />` to render each element on WebGL texture updates.\n * @param {Boolean} [parameters.antialias] - Determines whether the canvas should clear render with antialias on.\n * @description This class is used by {@link Two} when constructing with `type` of `Two.Types.webgl`. It takes Two.js' scenegraph and renders it to a `<canvas />` through the WebGL api.\n * @see {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/}\n */\nvar Renderer$2 = function(params) {\n\n  var gl, vs, fs;\n\n  /**\n   * @name Two.WebGLRenderer#domElement\n   * @property {Element} - The `<canvas />` associated with the Two.js scene.\n   */\n  this.domElement = params.domElement || document.createElement('canvas');\n\n  if (typeof params.offscreenElement !== 'undefined') {\n    webgl.canvas = params.offscreenElement;\n    webgl.ctx = webgl.canvas.getContext('2d');\n  }\n\n  /**\n   * @name Two.WebGLRenderer#scene\n   * @property {Two.Group} - The root group of the scenegraph.\n   */\n  this.scene = new Group();\n  this.scene.parent = this;\n\n  this._renderer = {\n    type: 'renderer',\n    matrix: new NumArray(identity),\n    scale: 1,\n    opacity: 1\n  };\n  this._flagMatrix = true;\n\n  // http://games.greggman.com/game/webgl-and-alpha/\n  // http://www.khronos.org/registry/webgl/specs/latest/#5.2\n  params = _.defaults(params || {}, {\n    antialias: false,\n    alpha: true,\n    premultipliedAlpha: true,\n    stencil: true,\n    preserveDrawingBuffer: true,\n    overdraw: false\n  });\n\n  /**\n   * @name Two.WebGLRenderer#overdraw\n   * @property {Boolean} - Determines whether the canvas clears the background each draw call.\n   * @default true\n   */\n  this.overdraw = params.overdraw;\n\n  /**\n   * @name Two.WebGLRenderer#ctx\n   * @property {WebGLContext} - Associated two dimensional context to render on the `<canvas />`.\n   */\n  gl = this.ctx = this.domElement.getContext('webgl', params) ||\n    this.domElement.getContext('experimental-webgl', params);\n\n  if (!this.ctx) {\n    throw new TwoError(\n      'unable to create a webgl context. Try using another renderer.');\n  }\n\n  // Compile Base Shaders to draw in pixel space.\n  vs = webgl.shaders.create(\n    gl, webgl.shaders.vertex, webgl.shaders.types.vertex);\n  fs = webgl.shaders.create(\n    gl, webgl.shaders.fragment, webgl.shaders.types.fragment);\n\n  /**\n   * @name Two.WebGLRenderer#program\n   * @property {WebGLProgram} - Associated WebGL program to render all elements from the scenegraph.\n   */\n  this.program = webgl.program.create(gl, [vs, fs]);\n  gl.useProgram(this.program);\n\n  // Create and bind the drawing buffer\n\n  // look up where the vertex data needs to go.\n  this.program.position = gl.getAttribLocation(this.program, 'a_position');\n  this.program.matrix = gl.getUniformLocation(this.program, 'u_matrix');\n  this.program.rect = gl.getUniformLocation(this.program, 'u_rect');\n\n  // Bind the vertex buffer\n  var positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  gl.vertexAttribPointer(this.program.position, 2, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(this.program.position);\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new NumArray([\n      0, 0,\n      1, 0,\n      0, 1,\n      0, 1,\n      1, 0,\n      1, 1\n    ]),\n    gl.STATIC_DRAW);\n\n  // Setup some initial statements of the gl context\n  gl.enable(gl.BLEND);\n\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n\n  gl.blendEquation(gl.FUNC_ADD);\n  gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n};\n\n_.extend(Renderer$2, {\n\n  /**\n   * @name Two.WebGLRenderer.Utils\n   * @property {Object} - A massive object filled with utility functions and properties to render Two.js objects to a `<canvas />` through the WebGL API.\n   */\n  Utils: webgl\n\n});\n\n_.extend(Renderer$2.prototype, Events, {\n\n  constructor: Renderer$2,\n\n  /**\n   * @name Two.WebGLRenderer#setSize\n   * @function\n   * @fires resize\n   * @param {Number} width - The new width of the renderer.\n   * @param {Number} height - The new height of the renderer.\n   * @param {Number} [ratio] - The new pixel ratio (pixel density) of the renderer. Defaults to calculate the pixel density of the user's screen.\n   * @description Change the size of the renderer.\n   */\n  setSize: function(width, height, ratio) {\n\n    this.width = width;\n    this.height = height;\n\n    this.ratio = typeof ratio === 'undefined' ? getRatio(this.ctx) : ratio;\n\n    this.domElement.width = width * this.ratio;\n    this.domElement.height = height * this.ratio;\n\n    if (_.isObject(this.domElement.style)) {\n      _.extend(this.domElement.style, {\n        width: width + 'px',\n        height: height + 'px'\n      });\n    }\n\n    // Set for this.stage parent scaling to account for HDPI\n    this._renderer.matrix[0] = this._renderer.matrix[4] = this._renderer.scale = this.ratio;\n\n    this._flagMatrix = true;\n\n    this.ctx.viewport(0, 0, width * this.ratio, height * this.ratio);\n\n    var resolutionLocation = this.ctx.getUniformLocation(\n      this.program, 'u_resolution');\n    this.ctx.uniform2f(resolutionLocation, width * this.ratio, height * this.ratio);\n\n    return this.trigger(Events.Types.resize, width, height, ratio);\n\n  },\n\n  /**\n   * @name Two.WebGLRenderer#render\n   * @function\n   * @description Render the current scene to the `<canvas />`.\n   */\n  render: function() {\n\n    var gl = this.ctx;\n\n    if (!this.overdraw) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    webgl.group.render.call(this.scene, gl, this.program);\n    this._flagMatrix = false;\n\n    return this;\n\n  }\n\n});\n\n// Utils\n\n/**\n * @name Two\n * @class\n * @global\n * @param {Object} [options]\n * @param {Boolean} [options.fullscreen=false] - Set to `true` to automatically make the stage adapt to the width and height of the parent document. This parameter overrides `width` and `height` parameters if set to `true`. This overrides `options.fitted` as well.\n * @param {Boolean} [options.fitted=false] = Set to `true` to automatically make the stage adapt to the width and height of the parent element. This parameter overrides `width` and `height` parameters if set to `true`.\n * @param {Number} [options.width=640] - The width of the stage on construction. This can be set at a later time.\n * @param {Number} [options.height=480] - The height of the stage on construction. This can be set at a later time.\n * @param {String} [options.type=Two.Types.svg] - The type of renderer to setup drawing with. See {@link Two.Types} for available options.\n * @param {Boolean} [options.autostart=false] - Set to `true` to add the instance to draw on `requestAnimationFrame`. This is a convenient substitute for {@link Two#play}.\n * @param {Element} [options.domElement] - The canvas or SVG element to draw into. This overrides the `options.type` argument.\n * @description The entrypoint for Two.js. Instantiate a `new Two` in order to setup a scene to render to. `Two` is also the publicly accessible namespace that all other sub-classes, functions, and utilities attach to.\n */\nvar Two = function(options) {\n\n  // Determine what Renderer to use and setup a scene.\n\n  var params = _.defaults(options || {}, {\n    fullscreen: false,\n    fitted: false,\n    width: 640,\n    height: 480,\n    type: Two.Types.svg,\n    autostart: false\n  });\n\n  _.each(params, function(v, k) {\n    if (/fullscreen/i.test(k) || /autostart/i.test(k)) {\n      return;\n    }\n    this[k] = v;\n  }, this);\n\n  // Specified domElement overrides type declaration only if the element does not support declared renderer type.\n  if (_.isElement(params.domElement)) {\n    var tagName = params.domElement.tagName.toLowerCase();\n    // TODO: Reconsider this if statement's logic.\n    if (!/^(CanvasRenderer-canvas|WebGLRenderer-canvas|SVGRenderer-svg)$/.test(this.type+'-'+tagName)) {\n      this.type = Two.Types[tagName];\n    }\n  }\n\n  this.renderer = new Two[this.type](this);\n  this.setPlaying(params.autostart);\n  this.frameCount = 0;\n\n  /**\n   * @name Two#fit\n   * @function\n   * @description If `options.fullscreen` or `options.fitted` in construction create this function. It sets the `width` and `height` of the instance to its respective parent `window` or `element` depending on the `options` passed.\n   */\n  if (params.fullscreen) {\n\n    this.fit = fitToWindow.bind(this);\n    this.fit.domElement = window;\n    this.fit.attached = true;\n    _.extend(document.body.style, {\n      overflow: 'hidden',\n      margin: 0,\n      padding: 0,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      position: 'fixed'\n    });\n    _.extend(this.renderer.domElement.style, {\n      display: 'block',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      position: 'fixed'\n    });\n    dom.bind(this.fit.domElement, 'resize', this.fit);\n    this.fit();\n\n  } else if (params.fitted) {\n\n    this.fit = fitToParent.bind(this);\n    _.extend(this.renderer.domElement.style, {\n      display: 'block'\n    });\n\n  } else if (!_.isElement(params.domElement)) {\n\n    this.renderer.setSize(params.width, params.height, this.ratio);\n    this.width = params.width;\n    this.height = params.height;\n\n  }\n\n  this.renderer.bind(Events.Types.resize, updateDimensions.bind(this));\n  this.scene = this.renderer.scene;\n\n  Two.Instances.push(this);\n  if (params.autostart) {\n    raf.init();\n  }\n\n};\n\n_.extend(Two, Constants);\n\n_.extend(Two.prototype, Events, {\n\n  constructor: Two,\n\n  /**\n   * @name Two#appendTo\n   * @function\n   * @param {Element} elem - The DOM element to append the Two.js stage to.\n   * @description Shorthand method to append your instance of Two.js to the `document`.\n   */\n  appendTo: function(elem) {\n\n    elem.appendChild(this.renderer.domElement);\n\n    if (this.fit) {\n      if (this.fit.domElement !== window) {\n        this.fit.domElement = elem;\n        this.fit.attached = false;\n      }\n      this.update();\n    }\n\n    return this;\n\n  },\n\n  /**\n   * @name Two#play\n   * @function\n   * @fires Two.Events.Types.play event\n   * @description Call to start an internal animation loop.\n   * @nota-bene This function initiates a `requestAnimationFrame` loop.\n   */\n  play: function() {\n\n    this.playing = true;\n    raf.init();\n    return this.trigger(Events.Types.play);\n\n  },\n\n  /**\n   * @name Two#pause\n   * @function\n   * @fires Two.Events.Types.pause event\n   * @description Call to stop the internal animation loop for a specific instance of Two.js.\n   */\n  pause: function() {\n\n    this.playing = false;\n    return this.trigger(Events.Types.pause);\n\n  },\n\n  setPlaying: function(p) {\n    this.playing = p;\n  },\n\n  /**\n   * @name Two#release\n   * @function\n   * @param {Object} obj\n   * @returns {Object} The object passed for event deallocation.\n   * @description Release an arbitrary class' events from the Two.js corpus and recurse through its children and or vertices.\n   */\n  release: function(obj) {\n\n    var i, v, child;\n\n    if (!_.isObject(obj)) {\n      return;\n    }\n\n    if (typeof obj.unbind === 'function') {\n      obj.unbind();\n    }\n\n    if (obj.vertices) {\n      if (typeof obj.vertices.unbind === 'function') {\n        obj.vertices.unbind();\n      }\n      for (i = 0; i < obj.vertices.length; i++) {\n        v = obj.vertices[i];\n        if (typeof v.unbind === 'function') {\n          v.unbind();\n        }\n      }\n    }\n\n    if (obj.children) {\n      for (i = 0; i < obj.children.length; i++) {\n        child = obj.children[i];\n        this.release(child);\n      }\n    }\n\n    return obj;\n\n  },\n\n  /**\n   * @name Two#update\n   * @fires Two.Events.Types.update event\n   * @description Update positions and calculations in one pass before rendering. Then render to the canvas.\n   * @nota-bene This function is called automatically if using {@link Two#play} or the `autostart` parameter in construction.\n   */\n  update: function() {\n\n    var animated = !!this._lastFrame;\n    var now = _.performance.now();\n\n    if (animated) {\n      this.timeDelta = parseFloat((now - this._lastFrame).toFixed(3));\n    }\n    this._lastFrame = now;\n\n    if (this.fit && !this.fit.attached) {\n\n        dom.bind(this.fit.domElement, 'resize', this.fit);\n        this.fit.attached = true;\n        this.fit();\n\n    }\n\n    var width = this.width;\n    var height = this.height;\n    var renderer = this.renderer;\n\n    // Update width / height for the renderer\n    if (width !== renderer.width || height !== renderer.height) {\n      renderer.setSize(width, height, this.ratio);\n    }\n\n    this.trigger(Events.Types.update, this.frameCount, this.timeDelta);\n\n    return this.render();\n\n  },\n\n  /**\n   * @name Two#render\n   * @fires render\n   * @description Render all drawable and visible objects of the scene.\n   */\n  render: function() {\n\n    this.renderer.render();\n    return this.trigger(Events.Types.render, this.frameCount++);\n\n  },\n\n  // Convenience Methods\n\n  /**\n   * @name Two#add\n   * @function\n   * @param {(Two.Shape[]|...Two.Shape)} [objects] - An array of Two.js objects. Alternatively can add objects as individual arguments.\n   * @description A shorthand method to add specific Two.js objects to the scene.\n   */\n  add: function(o) {\n\n    var objects = o;\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n\n    this.scene.add(objects);\n    return this;\n\n  },\n\n  /**\n   * @name Two#remove\n   * @function\n   * @param {(Two.Shape[]|...Two.Shape)} [objects] - An array of Two.js objects.\n   * @description A shorthand method to remove specific Two.js objects from the scene.\n   */\n  remove: function(o) {\n\n    var objects = o;\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n\n    this.scene.remove(objects);\n\n    return this;\n\n  },\n\n  /**\n   * @name Two#clear\n   * @function\n   * @description Remove all all Two.js objects from the scene.\n   */\n  clear: function() {\n\n    this.scene.remove(this.scene.children);\n    return this;\n\n  },\n\n  /**\n   * @name Two#makeLine\n   * @function\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @returns {Two.Line}\n   * @description Creates a Two.js line and adds it to the scene.\n   */\n  makeLine: function(x1, y1, x2, y2) {\n\n    var line = new Line(x1, y1, x2, y2);\n    this.scene.add(line);\n\n    return line;\n\n  },\n\n  /**\n   * @name Two#makeArrow\n   * @function\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @returns {Two.Path}\n   * @description Creates a Two.js arrow and adds it to the scene.\n   */\n  makeArrow: function(x1, y1, x2, y2, size) {\n\n    var headlen = typeof size === 'number' ? size : 10;\n\n    var angle = Math.atan2(y2 - y1, x2 - x1);\n\n    var vertices = [\n\n      new Anchor(x1, y1, undefined, undefined, undefined, undefined, Commands.move),\n      new Anchor(x2, y2, undefined, undefined, undefined, undefined, Commands.line),\n      new Anchor(\n        x2 - headlen * Math.cos(angle - Math.PI / 4),\n        y2 - headlen * Math.sin(angle - Math.PI / 4),\n        undefined, undefined, undefined, undefined, Commands.line\n      ),\n\n      new Anchor(x2, y2, undefined, undefined, undefined, undefined, Commands.move),\n      new Anchor(\n        x2 - headlen * Math.cos(angle + Math.PI / 4),\n        y2 - headlen * Math.sin(angle + Math.PI / 4),\n        undefined, undefined, undefined, undefined, Commands.line\n      )\n\n    ];\n\n    var path = new Path(vertices, false, false, true);\n    path.noFill();\n    path.cap = 'round';\n    path.join = 'round';\n\n    this.scene.add(path);\n\n    return path;\n  },\n\n  /**\n   * @name Two#makeRectangle\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} width\n   * @param {Number} height\n   * @returns {Two.Rectangle}\n   * @description Creates a Two.js rectangle and adds it to the scene.\n   */\n  makeRectangle: function(x, y, width, height) {\n\n    var rect = new Rectangle(x, y, width, height);\n    this.scene.add(rect);\n\n    return rect;\n\n  },\n\n  /**\n   * @name Two#makeRoundedRectangle\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} width\n   * @param {Number} height\n   * @param {Number} sides\n   * @returns {Two.Rectangle}\n   * @description Creates a Two.js rounded rectangle and adds it to the scene.\n   */\n  makeRoundedRectangle: function(x, y, width, height, sides) {\n\n    var rect = new RoundedRectangle(x, y, width, height, sides);\n    this.scene.add(rect);\n\n    return rect;\n\n  },\n\n  /**\n   * @name Two#makeCircle\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} [resolution=4]\n   * @returns {Two.Circle}\n   * @description Creates a Two.js circle and adds it to the scene.\n   */\n  makeCircle: function(x, y, radius, resolution) {\n\n    var circle = new Circle(x, y, radius, resolution);\n    this.scene.add(circle);\n\n    return circle;\n\n  },\n\n  /**\n   * @name Two#makeEllipse\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} rx\n   * @param {Number} ry\n   * @param {Number} [resolution=4]\n   * @returns {Two.Ellipse}\n   * @description Creates a Two.js ellipse and adds it to the scene.\n   */\n  makeEllipse: function(x, y, rx, ry, resolution) {\n\n    var ellipse = new Ellipse(x, y, rx, ry, resolution);\n    this.scene.add(ellipse);\n\n    return ellipse;\n\n  },\n\n  /**\n   * @name Two#makeStar\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} outerRadius\n   * @param {Number} innerRadius\n   * @param {Number} sides\n   * @returns {Two.Star}\n   * @description Creates a Two.js star and adds it to the scene.\n   */\n  makeStar: function(ox, oy, outerRadius, innerRadius, sides) {\n\n    var star = new Star(ox, oy, outerRadius, innerRadius, sides);\n    this.scene.add(star);\n\n    return star;\n\n  },\n\n  /**\n   * @name Two#makeCurve\n   * @function\n   * @param {Two.Anchor[]} [points] - An array of {@link Two.Anchor} points.\n   * @param {...Number} - Alternatively you can pass alternating `x` / `y` coordinate values as individual arguments. These will be combined into {@link Two.Anchor}s for use in the path.\n   * @returns {Two.Path} - Where `path.curved` is set to `true`.\n   * @description Creates a Two.js path that is curved and adds it to the scene.\n   * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n   */\n  makeCurve: function(p) {\n\n    var l = arguments.length, points = p;\n    if (!Array.isArray(p)) {\n      points = [];\n      for (var i = 0; i < l; i+=2) {\n        var x = arguments[i];\n        if (typeof x !== 'number') {\n          break;\n        }\n        var y = arguments[i + 1];\n        points.push(new Anchor(x, y));\n      }\n    }\n\n    var last = arguments[l - 1];\n    var curve = new Path(points, !(typeof last === 'boolean' ? last : undefined), true);\n    var rect = curve.getBoundingClientRect();\n    curve.center().translation\n      .set(rect.left + rect.width / 2, rect.top + rect.height / 2);\n\n    this.scene.add(curve);\n\n    return curve;\n\n  },\n\n  /**\n   * @name Two#makePolygon\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} radius\n   * @param {Number} sides\n   * @returns {Two.Polygon}\n   * @description Creates a Two.js polygon and adds it to the scene.\n   */\n  makePolygon: function(x, y, radius, sides) {\n\n    var poly = new Polygon(x, y, radius, sides);\n    this.scene.add(poly);\n\n    return poly;\n\n  },\n\n  /**\n   * @name Two#makeArcSegment\n   * @function\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} innerRadius\n   * @param {Number} outerRadius\n   * @param {Number} startAngle\n   * @param {Number} endAngle\n   * @param {Number} [resolution=Two.Resolution] - The number of vertices that should comprise the arc segment.\n   */\n  makeArcSegment: function(ox, oy, ir, or, sa, ea, res) {\n    var arcSegment = new ArcSegment(ox, oy, ir, or, sa, ea, res);\n    this.scene.add(arcSegment);\n    return arcSegment;\n  },\n\n  /**\n   * @name Two#makePath\n   * @function\n   * @param {Two.Anchor[]} [points] - An array of {@link Two.Anchor} points.\n   * @param {...Number} - Alternatively you can pass alternating `x` / `y` coordinate values as individual arguments. These will be combined into {@link Two.Anchor}s for use in the path.\n   * @returns {Two.Path}\n   * @description Creates a Two.js path and adds it to the scene.\n   * @nota-bene In either case of passing an array or passing numbered arguments the last argument is an optional `Boolean` that defines whether the path should be open or closed.\n   */\n  makePath: function(p) {\n\n    var l = arguments.length, points = p;\n    if (!Array.isArray(p)) {\n      points = [];\n      for (var i = 0; i < l; i+=2) {\n        var x = arguments[i];\n        if (typeof x !== 'number') {\n          break;\n        }\n        var y = arguments[i + 1];\n        points.push(new Anchor(x, y));\n      }\n    }\n\n    var last = arguments[l - 1];\n    var path = new Path(points, !(typeof last === 'boolean' ? last : undefined));\n    var rect = path.getBoundingClientRect();\n    if (typeof rect.top === 'number'   && typeof rect.left === 'number' &&\n        typeof rect.right === 'number' && typeof rect.bottom === 'number') {\n      path.center().translation\n        .set(rect.left + rect.width / 2, rect.top + rect.height / 2);\n    }\n\n    this.scene.add(path);\n\n    return path;\n\n  },\n\n  /**\n   * @name Two#makeText\n   * @function\n   * @param {String} message\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Object} [styles] - An object to describe any of the {@link Two.Text.Properties} including `fill`, `stroke`, `linewidth`, `family`, `alignment`, `leading`, `opacity`, etc..\n   * @returns {Two.Text}\n   * @description Creates a Two.js text object and adds it to the scene.\n   */\n  makeText: function(message, x, y, styles) {\n    var text = new Text(message, x, y, styles);\n    this.add(text);\n    return text;\n  },\n\n  /**\n   * @name Two#makeLinearGradient\n   * @function\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   * @param {...Two.Stop} [stops] - Any number of color stops sometimes reffered to as ramp stops. If none are supplied then the default black-to-white two stop gradient is applied.\n   * @returns {Two.LinearGradient}\n   * @description Creates a Two.js linear gradient and ads it to the scene. In the case of an effect it's added to an invisible \"definitions\" group.\n   */\n  makeLinearGradient: function(x1, y1, x2, y2 /* stops */) {\n\n    var stops = Array.prototype.slice.call(arguments, 4);\n    var gradient = new LinearGradient(x1, y1, x2, y2, stops);\n\n    this.add(gradient);\n\n    return gradient;\n\n  },\n\n  /**\n   * @name Two#makeRadialGradient\n   * @function\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} radius\n   * @param {...Two.Stop} [stops] - Any number of color stops sometimes reffered to as ramp stops. If none are supplied then the default black-to-white two stop gradient is applied.\n   * @returns {Two.RadialGradient}\n   * @description Creates a Two.js linear-gradient object and ads it to the scene. In the case of an effect it's added to an invisible \"definitions\" group.\n   */\n  makeRadialGradient: function(x1, y1, r /* stops */) {\n\n    var stops = Array.prototype.slice.call(arguments, 3);\n    var gradient = new RadialGradient(x1, y1, r, stops);\n\n    this.add(gradient);\n\n    return gradient;\n\n  },\n\n  /**\n   * @name Two#makeSprite\n   * @function\n   * @param {(String|Two.Texture)} pathOrTexture - The URL path to an image or an already created {@link Two.Texture}.\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} [columns=1]\n   * @param {Number} [rows=1]\n   * @param {Integer} [frameRate=0]\n   * @param {Boolean} [autostart=false]\n   * @returns {Two.Sprite}\n   * @description Creates a Two.js sprite object and adds it to the scene. Sprites can be used for still images as well as animations.\n   */\n  makeSprite: function(path, x, y, cols, rows, frameRate, autostart) {\n\n    var sprite = new Sprite(path, x, y, cols, rows, frameRate);\n    if (autostart) {\n      sprite.play();\n    }\n    this.add(sprite);\n\n    return sprite;\n\n  },\n\n  /**\n   * @name Two#makeImageSequence\n   * @function\n   * @param {(String[]|Two.Texture[])} pathsOrTextures - An array of paths or of {@link Two.Textures}.\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} [frameRate=0]\n   * @param {Boolean} [autostart=false]\n   * @returns {Two.ImageSequence}\n   * @description Creates a Two.js image sequence object and adds it to the scene.\n   */\n  makeImageSequence: function(paths, x, y, frameRate, autostart) {\n\n    var imageSequence = new ImageSequence(paths, x, y, frameRate);\n    if (autostart) {\n      imageSequence.play();\n    }\n    this.add(imageSequence);\n\n    return imageSequence;\n\n  },\n\n  /**\n   * @name Two#makeTexture\n   * @function\n   * @param {(String|Image|Canvas|Video)} [pathOrSource] - The URL path to an image or a DOM image-like element.\n   * @param {Function} [callback] - Function to be invoked when the image is loaded.\n   * @returns {Two.Texture}\n   * @description Creates a Two.js texture object.\n   */\n  makeTexture: function(path, callback) {\n\n    var texture = new Texture(path, callback);\n    return texture;\n\n  },\n\n  /**\n   * @name Two#makeGroup\n   * @function\n   * @param {(Two.Shape[]|...Two.Shape)} [objects] - Two.js objects to be added to the group in the form of an array or as individual arguments.\n   * @returns {Two.Group}\n   * @description Creates a Two.js group object and adds it to the scene.\n   */\n  makeGroup: function(o) {\n\n    var objects = o;\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n\n    var group = new Group();\n    this.scene.add(group);\n    group.add(objects);\n\n    return group;\n\n  },\n\n  /**\n   * @name Two#interpret\n   * @function\n   * @param {SvgNode} svgNode - The SVG node to be parsed.\n   * @param {Boolean} shallow - Don't create a top-most group but append all content directly.\n   * @param {Boolean} add – Automatically add the reconstructed SVG node to scene.\n   * @returns {Two.Group}\n   * @description Interpret an SVG Node and add it to this instance's scene. The distinction should be made that this doesn't `import` svg's, it solely interprets them into something compatible for Two.js - this is slightly different than a direct transcription.\n   */\n  interpret: function(svgNode, shallow, add) {\n\n    var tag = svgNode.tagName.toLowerCase();\n\n    add = (typeof add !== 'undefined') ? add : true;\n\n    if (!(tag in read)) {\n      return null;\n    }\n\n    var node = read[tag].call(this, svgNode);\n\n    if (add) {\n      this.add(shallow && node instanceof Group ? node.children : node);\n    } else if (node.parent) {\n      // Remove `g` tags that have been added to scenegraph / DOM\n      // in order to be compatible with `getById` methods.\n      node.remove();\n    }\n\n    return node;\n\n  },\n\n  /**\n   * @name Two#load\n   * @function\n   * @param {String|SvgNode} pathOrSVGContent - The URL path of an SVG file or an SVG document as text.\n   * @param {Function} callback - Function to call once loading has completed.\n   * @returns {Two.Group}\n   * @description Load an SVG file or SVG text and interpret it into Two.js legible objects.\n   */\n  load: function(text, callback) {\n\n    var group = new Group();\n    var elem, i, j;\n\n    var attach = (function(data) {\n\n      dom.temp.innerHTML = data;\n\n      for (i = 0; i < dom.temp.children.length; i++) {\n        elem = dom.temp.children[i];\n        if (/svg/i.test(elem.nodeName)) {\n          // Two.Utils.applySvgViewBox.call(this, group, elem.getAttribute('viewBox'));\n          for (j = 0; j < elem.children.length; j++) {\n            group.add(this.interpret(elem.children[j]));\n          }\n        } else {\n          group.add(this.interpret(elem));\n        }\n      }\n\n      if (typeof callback === 'function') {\n        var svg = dom.temp.children.length <= 1\n          ? dom.temp.children[0] : dom.temp.children;\n        callback(group, svg);\n      }\n\n    }).bind(this);\n\n    if (/.*\\.svg/ig.test(text)) {\n\n      xhr(text, attach);\n\n      return group;\n\n    }\n\n    attach(text);\n\n    return group;\n\n  }\n\n});\n\nfunction fitToWindow() {\n\n  var wr = document.body.getBoundingClientRect();\n\n  var width = this.width = wr.width;\n  var height = this.height = wr.height;\n\n  this.renderer.setSize(width, height, this.ratio);\n\n}\n\nfunction fitToParent() {\n\n  var parent = this.renderer.domElement.parentElement;\n  if (!parent) {\n    console.warn('Two.js: Attempting to fit to parent, but no parent found.');\n    return;\n  }\n  var wr = parent.getBoundingClientRect();\n\n  var width = this.width = wr.width;\n  var height = this.height = wr.height;\n\n  this.renderer.setSize(width, height, this.ratio);\n\n}\n\nfunction updateDimensions(width, height) {\n  this.width = width;\n  this.height = height;\n  this.trigger(Events.Types.resize, width, height);\n}\n\n// Request Animation Frame\n\nvar raf = dom.getRequestAnimationFrame();\n\nfunction loop() {\n\n  for (var i = 0; i < Two.Instances.length; i++) {\n    var t = Two.Instances[i];\n    if (t.playing) {\n      t.update();\n    }\n  }\n\n  Two.nextFrameID = raf(loop);\n\n}\n\nraf.init = function() {\n  loop();\n  raf.init = function() {};\n};\n\n_.extend(Two, {\n  Anchor: Anchor,\n  Collection: Collection,\n  Events: Events,\n  Group: Group,\n  Matrix: Matrix$1,\n  Path: Path,\n  Registry: Registry,\n  Shape: Shape,\n  Text: Text,\n  Vector: Vector,\n\n  Gradient: Gradient,\n  ImageSequence: ImageSequence,\n  LinearGradient: LinearGradient,\n  RadialGradient: RadialGradient,\n  Sprite: Sprite,\n  Stop: Stop,\n  Texture: Texture,\n\n  ArcSegment: ArcSegment,\n  Circle: Circle,\n  Ellipse: Ellipse,\n  Line: Line,\n  Polygon: Polygon,\n  Rectangle: Rectangle,\n  RoundedRectangle: RoundedRectangle,\n  Star: Star,\n\n  CanvasRenderer: Renderer,\n  SVGRenderer: Renderer$1,\n  WebGLRenderer: Renderer$2,\n\n  /**\n   * @name Two.Commands\n   * @property {Object} - Map of possible path commands. Taken from the SVG specification.\n   */\n  Commands: Commands,\n\n  Utils: _.extend({\n\n    Error: TwoError,\n    getRatio: getRatio,\n    defineGetterSetter: defineGetterSetter,\n    read: read,\n    xhr: xhr\n\n  }, _, CanvasShim, Curves, math)\n\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Two);\n\n\n//# sourceURL=webpack://premium/./node_modules/two.js/build/two.module.js?")},"./node_modules/uuid/dist/esm-browser/regex.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n\n//# sourceURL=webpack://premium/./node_modules/uuid/dist/esm-browser/regex.js?')},"./node_modules/uuid/dist/esm-browser/rng.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ rng; }\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n\n//# sourceURL=webpack://premium/./node_modules/uuid/dist/esm-browser/rng.js?")},"./node_modules/uuid/dist/esm-browser/stringify.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"./node_modules/uuid/dist/esm-browser/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (stringify);\n\n//# sourceURL=webpack://premium/./node_modules/uuid/dist/esm-browser/stringify.js?")},"./node_modules/uuid/dist/esm-browser/v4.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.default)(rnds);\n}\n\n/* harmony default export */ __webpack_exports__["default"] = (v4);\n\n//# sourceURL=webpack://premium/./node_modules/uuid/dist/esm-browser/v4.js?')},"./node_modules/uuid/dist/esm-browser/validate.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && _regex_js__WEBPACK_IMPORTED_MODULE_0__.default.test(uuid);\n}\n\n/* harmony default export */ __webpack_exports__["default"] = (validate);\n\n//# sourceURL=webpack://premium/./node_modules/uuid/dist/esm-browser/validate.js?')},"./node_modules/vanilla-picker/dist/vanilla-picker.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nString.prototype.startsWith = String.prototype.startsWith || function (needle) {\n    return this.indexOf(needle) === 0;\n};\nString.prototype.padStart = String.prototype.padStart || function (len, pad) {\n    var str = this;while (str.length < len) {\n        str = pad + str;\n    }return str;\n};\n\nvar colorNames = { cb: '0f8ff', tqw: 'aebd7', q: '-ffff', qmrn: '7fffd4', zr: '0ffff', bg: '5f5dc', bsq: 'e4c4', bck: '---', nch: 'ebcd', b: '--ff', bvt: '8a2be2', brwn: 'a52a2a', brw: 'deb887', ctb: '5f9ea0', hrt: '7fff-', chcT: 'd2691e', cr: '7f50', rnw: '6495ed', crns: '8dc', crms: 'dc143c', cn: '-ffff', Db: '--8b', Dcn: '-8b8b', Dgnr: 'b8860b', Dgr: 'a9a9a9', Dgrn: '-64-', Dkhk: 'bdb76b', Dmgn: '8b-8b', Dvgr: '556b2f', Drng: '8c-', Drch: '9932cc', Dr: '8b--', Dsmn: 'e9967a', Dsgr: '8fbc8f', DsTb: '483d8b', DsTg: '2f4f4f', Dtrq: '-ced1', Dvt: '94-d3', ppnk: '1493', pskb: '-bfff', mgr: '696969', grb: '1e90ff', rbrc: 'b22222', rwht: 'af0', stg: '228b22', chs: '-ff', gnsb: 'dcdcdc', st: '8f8ff', g: 'd7-', gnr: 'daa520', gr: '808080', grn: '-8-0', grnw: 'adff2f', hnw: '0fff0', htpn: '69b4', nnr: 'cd5c5c', ng: '4b-82', vr: '0', khk: '0e68c', vnr: 'e6e6fa', nrb: '0f5', wngr: '7cfc-', mnch: 'acd', Lb: 'add8e6', Lcr: '08080', Lcn: 'e0ffff', Lgnr: 'afad2', Lgr: 'd3d3d3', Lgrn: '90ee90', Lpnk: 'b6c1', Lsmn: 'a07a', Lsgr: '20b2aa', Lskb: '87cefa', LsTg: '778899', Lstb: 'b0c4de', Lw: 'e0', m: '-ff-', mgrn: '32cd32', nn: 'af0e6', mgnt: '-ff', mrn: '8--0', mqm: '66cdaa', mmb: '--cd', mmrc: 'ba55d3', mmpr: '9370db', msg: '3cb371', mmsT: '7b68ee', '': '-fa9a', mtr: '48d1cc', mmvt: 'c71585', mnLb: '191970', ntc: '5fffa', mstr: 'e4e1', mccs: 'e4b5', vjw: 'dead', nv: '--80', c: 'df5e6', v: '808-0', vrb: '6b8e23', rng: 'a5-', rngr: '45-', rch: 'da70d6', pgnr: 'eee8aa', pgrn: '98fb98', ptrq: 'afeeee', pvtr: 'db7093', ppwh: 'efd5', pchp: 'dab9', pr: 'cd853f', pnk: 'c0cb', pm: 'dda0dd', pwrb: 'b0e0e6', prp: '8-080', cc: '663399', r: '--', sbr: 'bc8f8f', rb: '4169e1', sbrw: '8b4513', smn: 'a8072', nbr: '4a460', sgrn: '2e8b57', ssh: '5ee', snn: 'a0522d', svr: 'c0c0c0', skb: '87ceeb', sTb: '6a5acd', sTgr: '708090', snw: 'afa', n: '-ff7f', stb: '4682b4', tn: 'd2b48c', t: '-8080', thst: 'd8bfd8', tmT: '6347', trqs: '40e0d0', vt: 'ee82ee', whT: '5deb3', wht: '', hts: '5f5f5', w: '-', wgrn: '9acd32' };\n\nfunction printNum(num) {\n    var decs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    var str = decs > 0 ? num.toFixed(decs).replace(/0+$/, '').replace(/\\.$/, '') : num.toString();\n    return str || '0';\n}\n\nvar Color = function () {\n    function Color(r, g, b, a) {\n        classCallCheck(this, Color);\n\n\n        var that = this;\n        function parseString(input) {\n\n            if (input.startsWith('hsl')) {\n                var _input$match$map = input.match(/([\\-\\d\\.e]+)/g).map(Number),\n                    _input$match$map2 = slicedToArray(_input$match$map, 4),\n                    h = _input$match$map2[0],\n                    s = _input$match$map2[1],\n                    l = _input$match$map2[2],\n                    _a = _input$match$map2[3];\n\n                if (_a === undefined) {\n                    _a = 1;\n                }\n\n                h /= 360;\n                s /= 100;\n                l /= 100;\n                that.hsla = [h, s, l, _a];\n            } else if (input.startsWith('rgb')) {\n                var _input$match$map3 = input.match(/([\\-\\d\\.e]+)/g).map(Number),\n                    _input$match$map4 = slicedToArray(_input$match$map3, 4),\n                    _r = _input$match$map4[0],\n                    _g = _input$match$map4[1],\n                    _b = _input$match$map4[2],\n                    _a2 = _input$match$map4[3];\n\n                if (_a2 === undefined) {\n                    _a2 = 1;\n                }\n\n                that.rgba = [_r, _g, _b, _a2];\n            } else {\n                if (input.startsWith('#')) {\n                    that.rgba = Color.hexToRgb(input);\n                } else {\n                    that.rgba = Color.nameToRgb(input) || Color.hexToRgb(input);\n                }\n            }\n        }\n\n        if (r === undefined) ; else if (Array.isArray(r)) {\n            this.rgba = r;\n        } else if (b === undefined) {\n            var color = r && '' + r;\n            if (color) {\n                parseString(color.toLowerCase());\n            }\n        } else {\n            this.rgba = [r, g, b, a === undefined ? 1 : a];\n        }\n    }\n\n    createClass(Color, [{\n        key: 'printRGB',\n        value: function printRGB(alpha) {\n            var rgb = alpha ? this.rgba : this.rgba.slice(0, 3),\n                vals = rgb.map(function (x, i) {\n                return printNum(x, i === 3 ? 3 : 0);\n            });\n\n            return alpha ? 'rgba(' + vals + ')' : 'rgb(' + vals + ')';\n        }\n    }, {\n        key: 'printHSL',\n        value: function printHSL(alpha) {\n            var mults = [360, 100, 100, 1],\n                suff = ['', '%', '%', ''];\n\n            var hsl = alpha ? this.hsla : this.hsla.slice(0, 3),\n                vals = hsl.map(function (x, i) {\n                return printNum(x * mults[i], i === 3 ? 3 : 1) + suff[i];\n            });\n\n            return alpha ? 'hsla(' + vals + ')' : 'hsl(' + vals + ')';\n        }\n    }, {\n        key: 'printHex',\n        value: function printHex(alpha) {\n            var hex = this.hex;\n            return alpha ? hex : hex.substring(0, 7);\n        }\n    }, {\n        key: 'rgba',\n        get: function get$$1() {\n            if (this._rgba) {\n                return this._rgba;\n            }\n            if (!this._hsla) {\n                throw new Error('No color is set');\n            }\n\n            return this._rgba = Color.hslToRgb(this._hsla);\n        },\n        set: function set$$1(rgb) {\n            if (rgb.length === 3) {\n                rgb[3] = 1;\n            }\n\n            this._rgba = rgb;\n            this._hsla = null;\n        }\n    }, {\n        key: 'rgbString',\n        get: function get$$1() {\n            return this.printRGB();\n        }\n    }, {\n        key: 'rgbaString',\n        get: function get$$1() {\n            return this.printRGB(true);\n        }\n    }, {\n        key: 'hsla',\n        get: function get$$1() {\n            if (this._hsla) {\n                return this._hsla;\n            }\n            if (!this._rgba) {\n                throw new Error('No color is set');\n            }\n\n            return this._hsla = Color.rgbToHsl(this._rgba);\n        },\n        set: function set$$1(hsl) {\n            if (hsl.length === 3) {\n                hsl[3] = 1;\n            }\n\n            this._hsla = hsl;\n            this._rgba = null;\n        }\n    }, {\n        key: 'hslString',\n        get: function get$$1() {\n            return this.printHSL();\n        }\n    }, {\n        key: 'hslaString',\n        get: function get$$1() {\n            return this.printHSL(true);\n        }\n    }, {\n        key: 'hex',\n        get: function get$$1() {\n            var rgb = this.rgba,\n                hex = rgb.map(function (x, i) {\n                return i < 3 ? x.toString(16) : Math.round(x * 255).toString(16);\n            });\n\n            return '#' + hex.map(function (x) {\n                return x.padStart(2, '0');\n            }).join('');\n        },\n        set: function set$$1(hex) {\n            this.rgba = Color.hexToRgb(hex);\n        }\n    }], [{\n        key: 'hexToRgb',\n        value: function hexToRgb(input) {\n\n            var hex = (input.startsWith('#') ? input.slice(1) : input).replace(/^(\\w{3})$/, '$1F').replace(/^(\\w)(\\w)(\\w)(\\w)$/, '$1$1$2$2$3$3$4$4').replace(/^(\\w{6})$/, '$1FF');\n\n            if (!hex.match(/^([0-9a-fA-F]{8})$/)) {\n                throw new Error('Unknown hex color; ' + input);\n            }\n\n            var rgba = hex.match(/^(\\w\\w)(\\w\\w)(\\w\\w)(\\w\\w)$/).slice(1).map(function (x) {\n                return parseInt(x, 16);\n            });\n\n            rgba[3] = rgba[3] / 255;\n            return rgba;\n        }\n    }, {\n        key: 'nameToRgb',\n        value: function nameToRgb(input) {\n\n            var hash = input.toLowerCase().replace('at', 'T').replace(/[aeiouyldf]/g, '').replace('ght', 'L').replace('rk', 'D').slice(-5, 4),\n                hex = colorNames[hash];\n            return hex === undefined ? hex : Color.hexToRgb(hex.replace(/\\-/g, '00').padStart(6, 'f'));\n        }\n    }, {\n        key: 'rgbToHsl',\n        value: function rgbToHsl(_ref) {\n            var _ref2 = slicedToArray(_ref, 4),\n                r = _ref2[0],\n                g = _ref2[1],\n                b = _ref2[2],\n                a = _ref2[3];\n\n            r /= 255;\n            g /= 255;\n            b /= 255;\n\n            var max = Math.max(r, g, b),\n                min = Math.min(r, g, b);\n            var h = void 0,\n                s = void 0,\n                l = (max + min) / 2;\n\n            if (max === min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);break;\n                    case g:\n                        h = (b - r) / d + 2;break;\n                    case b:\n                        h = (r - g) / d + 4;break;\n                }\n\n                h /= 6;\n            }\n\n            return [h, s, l, a];\n        }\n    }, {\n        key: 'hslToRgb',\n        value: function hslToRgb(_ref3) {\n            var _ref4 = slicedToArray(_ref3, 4),\n                h = _ref4[0],\n                s = _ref4[1],\n                l = _ref4[2],\n                a = _ref4[3];\n\n            var r = void 0,\n                g = void 0,\n                b = void 0;\n\n            if (s === 0) {\n                r = g = b = l;\n            } else {\n                var hue2rgb = function hue2rgb(p, q, t) {\n                    if (t < 0) t += 1;\n                    if (t > 1) t -= 1;\n                    if (t < 1 / 6) return p + (q - p) * 6 * t;\n                    if (t < 1 / 2) return q;\n                    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                    return p;\n                };\n\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s,\n                    p = 2 * l - q;\n\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n\n            var rgba = [r * 255, g * 255, b * 255].map(Math.round);\n            rgba[3] = a;\n\n            return rgba;\n        }\n    }]);\n    return Color;\n}();\n\nvar EventBucket = function () {\n    function EventBucket() {\n        classCallCheck(this, EventBucket);\n\n        this._events = [];\n    }\n\n    createClass(EventBucket, [{\n        key: 'add',\n        value: function add(target, type, handler) {\n            target.addEventListener(type, handler, false);\n            this._events.push({\n                target: target,\n                type: type,\n                handler: handler\n            });\n        }\n    }, {\n        key: 'remove',\n        value: function remove(target, type, handler) {\n            this._events = this._events.filter(function (e) {\n                var isMatch = true;\n                if (target && target !== e.target) {\n                    isMatch = false;\n                }\n                if (type && type !== e.type) {\n                    isMatch = false;\n                }\n                if (handler && handler !== e.handler) {\n                    isMatch = false;\n                }\n\n                if (isMatch) {\n                    EventBucket._doRemove(e.target, e.type, e.handler);\n                }\n                return !isMatch;\n            });\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this._events.forEach(function (e) {\n                return EventBucket._doRemove(e.target, e.type, e.handler);\n            });\n            this._events = [];\n        }\n    }], [{\n        key: '_doRemove',\n        value: function _doRemove(target, type, handler) {\n            target.removeEventListener(type, handler, false);\n        }\n    }]);\n    return EventBucket;\n}();\n\nfunction parseHTML(htmlString) {\n\n    var div = document.createElement('div');\n    div.innerHTML = htmlString;\n    return div.firstElementChild;\n}\n\nfunction dragTrack(eventBucket, area, callback) {\n    var dragging = false;\n\n    function clamp(val, min, max) {\n        return Math.max(min, Math.min(val, max));\n    }\n\n    function onMove(e, info, starting) {\n        if (starting) {\n            dragging = true;\n        }\n        if (!dragging) {\n            return;\n        }\n\n        e.preventDefault();\n\n        var bounds = area.getBoundingClientRect(),\n            w = bounds.width,\n            h = bounds.height,\n            x = info.clientX,\n            y = info.clientY;\n\n        var relX = clamp(x - bounds.left, 0, w),\n            relY = clamp(y - bounds.top, 0, h);\n\n        callback(relX / w, relY / h);\n    }\n\n    function onMouse(e, starting) {\n        var button = e.buttons === undefined ? e.which : e.buttons;\n        if (button === 1) {\n            onMove(e, e, starting);\n        } else {\n            dragging = false;\n        }\n    }\n\n    function onTouch(e, starting) {\n        if (e.touches.length === 1) {\n            onMove(e, e.touches[0], starting);\n        } else {\n            dragging = false;\n        }\n    }\n\n    eventBucket.add(area, 'mousedown', function (e) {\n        onMouse(e, true);\n    });\n    eventBucket.add(area, 'touchstart', function (e) {\n        onTouch(e, true);\n    });\n    eventBucket.add(window, 'mousemove', onMouse);\n    eventBucket.add(area, 'touchmove', onTouch);\n    eventBucket.add(window, 'mouseup', function (e) {\n        dragging = false;\n    });\n    eventBucket.add(area, 'touchend', function (e) {\n        dragging = false;\n    });\n    eventBucket.add(area, 'touchcancel', function (e) {\n        dragging = false;\n    });\n}\n\nvar BG_TRANSP = 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'2\\' height=\\'2\\'%3E%3Cpath d=\\'M1,0H0V1H2V2H1\\' fill=\\'lightgrey\\'/%3E%3C/svg%3E\")';\nvar HUES = 360;\n\nvar EVENT_KEY = 'keydown',\n    EVENT_CLICK_OUTSIDE = 'mousedown',\n    EVENT_TAB_MOVE = 'focusin';\n\nfunction $(selector, context) {\n    return (context || document).querySelector(selector);\n}\n\nfunction stopEvent(e) {\n\n    e.preventDefault();\n    e.stopPropagation();\n}\nfunction onKey(bucket, target, keys, handler, stop) {\n    bucket.add(target, EVENT_KEY, function (e) {\n        if (keys.indexOf(e.key) >= 0) {\n            if (stop) {\n                stopEvent(e);\n            }\n            handler(e);\n        }\n    });\n}\n\nvar _style = document.createElement('style');\n_style.textContent = '.picker_wrapper.no_alpha .picker_alpha{display:none}.picker_wrapper.no_editor .picker_editor{position:absolute;z-index:-1;opacity:0}.picker_wrapper.no_cancel .picker_cancel{display:none}.layout_default.picker_wrapper{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-flow:row wrap;-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:stretch;align-items:stretch;font-size:10px;width:25em;padding:.5em}.layout_default.picker_wrapper input,.layout_default.picker_wrapper button{font-size:1rem}.layout_default.picker_wrapper>*{margin:.5em}.layout_default.picker_wrapper::before{content:\\'\\';display:block;width:100%;height:0;-webkit-box-ordinal-group:2;order:1}.layout_default .picker_slider,.layout_default .picker_selector{padding:1em}.layout_default .picker_hue{width:100%}.layout_default .picker_sl{-webkit-box-flex:1;flex:1 1 auto}.layout_default .picker_sl::before{content:\\'\\';display:block;padding-bottom:100%}.layout_default .picker_editor{-webkit-box-ordinal-group:2;order:1;width:6.5rem}.layout_default .picker_editor input{width:100%;height:100%}.layout_default .picker_sample{-webkit-box-ordinal-group:2;order:1;-webkit-box-flex:1;flex:1 1 auto}.layout_default .picker_done,.layout_default .picker_cancel{-webkit-box-ordinal-group:2;order:1}.picker_wrapper{box-sizing:border-box;background:#f2f2f2;box-shadow:0 0 0 1px silver;cursor:default;font-family:sans-serif;color:#444;pointer-events:auto}.picker_wrapper:focus{outline:none}.picker_wrapper button,.picker_wrapper input{box-sizing:border-box;border:none;box-shadow:0 0 0 1px silver;outline:none}.picker_wrapper button:focus,.picker_wrapper button:active,.picker_wrapper input:focus,.picker_wrapper input:active{box-shadow:0 0 2px 1px dodgerblue}.picker_wrapper button{padding:.4em .6em;cursor:pointer;background-color:whitesmoke;background-image:-webkit-gradient(linear, left bottom, left top, from(gainsboro), to(transparent));background-image:linear-gradient(0deg, gainsboro, transparent)}.picker_wrapper button:active{background-image:-webkit-gradient(linear, left bottom, left top, from(transparent), to(gainsboro));background-image:linear-gradient(0deg, transparent, gainsboro)}.picker_wrapper button:hover{background-color:white}.picker_selector{position:absolute;z-index:1;display:block;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);border:2px solid white;border-radius:100%;box-shadow:0 0 3px 1px #67b9ff;background:currentColor;cursor:pointer}.picker_slider .picker_selector{border-radius:2px}.picker_hue{position:relative;background-image:-webkit-gradient(linear, left top, right top, from(red), color-stop(yellow), color-stop(lime), color-stop(cyan), color-stop(blue), color-stop(magenta), to(red));background-image:linear-gradient(90deg, red, yellow, lime, cyan, blue, magenta, red);box-shadow:0 0 0 1px silver}.picker_sl{position:relative;box-shadow:0 0 0 1px silver;background-image:-webkit-gradient(linear, left top, left bottom, from(white), color-stop(50%, rgba(255,255,255,0))),-webkit-gradient(linear, left bottom, left top, from(black), color-stop(50%, rgba(0,0,0,0))),-webkit-gradient(linear, left top, right top, from(gray), to(rgba(128,128,128,0)));background-image:linear-gradient(180deg, white, rgba(255,255,255,0) 50%),linear-gradient(0deg, black, rgba(0,0,0,0) 50%),linear-gradient(90deg, gray, rgba(128,128,128,0))}.picker_alpha,.picker_sample{position:relative;background:url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'2\\' height=\\'2\\'%3E%3Cpath d=\\'M1,0H0V1H2V2H1\\' fill=\\'lightgrey\\'/%3E%3C/svg%3E\") left top/contain white;box-shadow:0 0 0 1px silver}.picker_alpha .picker_selector,.picker_sample .picker_selector{background:none}.picker_editor input{font-family:monospace;padding:.2em .4em}.picker_sample::before{content:\\'\\';position:absolute;display:block;width:100%;height:100%;background:currentColor}.picker_arrow{position:absolute;z-index:-1}.picker_wrapper.popup{position:absolute;z-index:2;margin:1.5em}.picker_wrapper.popup,.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{background:#f2f2f2;box-shadow:0 0 10px 1px rgba(0,0,0,0.4)}.picker_wrapper.popup .picker_arrow{width:3em;height:3em;margin:0}.picker_wrapper.popup .picker_arrow::before,.picker_wrapper.popup .picker_arrow::after{content:\"\";display:block;position:absolute;top:0;left:0;z-index:-99}.picker_wrapper.popup .picker_arrow::before{width:100%;height:100%;-webkit-transform:skew(45deg);transform:skew(45deg);-webkit-transform-origin:0 100%;transform-origin:0 100%}.picker_wrapper.popup .picker_arrow::after{width:150%;height:150%;box-shadow:none}.popup.popup_top{bottom:100%;left:0}.popup.popup_top .picker_arrow{bottom:0;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.popup.popup_bottom{top:100%;left:0}.popup.popup_bottom .picker_arrow{top:0;left:0;-webkit-transform:rotate(90deg) scale(1, -1);transform:rotate(90deg) scale(1, -1)}.popup.popup_left{top:0;right:100%}.popup.popup_left .picker_arrow{top:0;right:0;-webkit-transform:scale(-1, 1);transform:scale(-1, 1)}.popup.popup_right{top:0;left:100%}.popup.popup_right .picker_arrow{top:0;left:0}';\ndocument.documentElement.firstElementChild.appendChild(_style);\n\nvar Picker = function () {\n    function Picker(options) {\n        classCallCheck(this, Picker);\n\n\n        this.settings = {\n\n            popup: 'right',\n            layout: 'default',\n            alpha: true,\n            editor: true,\n            editorFormat: 'hex',\n            cancelButton: false,\n            defaultColor: '#0cf'\n        };\n\n        this._events = new EventBucket();\n\n        this.onChange = null;\n\n        this.onDone = null;\n\n        this.onOpen = null;\n\n        this.onClose = null;\n\n        this.setOptions(options);\n    }\n\n    createClass(Picker, [{\n        key: 'setOptions',\n        value: function setOptions(options) {\n            var _this = this;\n\n            if (!options) {\n                return;\n            }\n            var settings = this.settings;\n\n            function transfer(source, target, skipKeys) {\n                for (var key in source) {\n                    if (skipKeys && skipKeys.indexOf(key) >= 0) {\n                        continue;\n                    }\n\n                    target[key] = source[key];\n                }\n            }\n\n            if (options instanceof HTMLElement) {\n                settings.parent = options;\n            } else {\n\n                if (settings.parent && options.parent && settings.parent !== options.parent) {\n                    this._events.remove(settings.parent);\n                    this._popupInited = false;\n                }\n\n                transfer(options, settings);\n\n                if (options.onChange) {\n                    this.onChange = options.onChange;\n                }\n                if (options.onDone) {\n                    this.onDone = options.onDone;\n                }\n                if (options.onOpen) {\n                    this.onOpen = options.onOpen;\n                }\n                if (options.onClose) {\n                    this.onClose = options.onClose;\n                }\n\n                var col = options.color || options.colour;\n                if (col) {\n                    this._setColor(col);\n                }\n            }\n\n            var parent = settings.parent;\n            if (parent && settings.popup && !this._popupInited) {\n\n                var openProxy = function openProxy(e) {\n                    return _this.openHandler(e);\n                };\n\n                this._events.add(parent, 'click', openProxy);\n\n                onKey(this._events, parent, [' ', 'Spacebar', 'Enter'], openProxy);\n\n                this._popupInited = true;\n            } else if (options.parent && !settings.popup) {\n                this.show();\n            }\n        }\n    }, {\n        key: 'openHandler',\n        value: function openHandler(e) {\n            if (this.show()) {\n\n                e && e.preventDefault();\n\n                this.settings.parent.style.pointerEvents = 'none';\n\n                var toFocus = e && e.type === EVENT_KEY ? this._domEdit : this.domElement;\n                setTimeout(function () {\n                    return toFocus.focus();\n                }, 100);\n\n                if (this.onOpen) {\n                    this.onOpen(this.colour);\n                }\n            }\n        }\n    }, {\n        key: 'closeHandler',\n        value: function closeHandler(e) {\n            var event = e && e.type;\n            var doHide = false;\n\n            if (!e) {\n                doHide = true;\n            } else if (event === EVENT_CLICK_OUTSIDE || event === EVENT_TAB_MOVE) {\n\n                var knownTime = (this.__containedEvent || 0) + 100;\n                if (e.timeStamp > knownTime) {\n                    doHide = true;\n                }\n            } else {\n\n                stopEvent(e);\n\n                doHide = true;\n            }\n\n            if (doHide && this.hide()) {\n                this.settings.parent.style.pointerEvents = '';\n\n                if (event !== EVENT_CLICK_OUTSIDE) {\n                    this.settings.parent.focus();\n                }\n\n                if (this.onClose) {\n                    this.onClose(this.colour);\n                }\n            }\n        }\n    }, {\n        key: 'movePopup',\n        value: function movePopup(options, open) {\n\n            this.closeHandler();\n\n            this.setOptions(options);\n            if (open) {\n                this.openHandler();\n            }\n        }\n    }, {\n        key: 'setColor',\n        value: function setColor(color, silent) {\n            this._setColor(color, { silent: silent });\n        }\n    }, {\n        key: '_setColor',\n        value: function _setColor(color, flags) {\n            if (typeof color === 'string') {\n                color = color.trim();\n            }\n            if (!color) {\n                return;\n            }\n\n            flags = flags || {};\n            var c = void 0;\n            try {\n\n                c = new Color(color);\n            } catch (ex) {\n                if (flags.failSilently) {\n                    return;\n                }\n                throw ex;\n            }\n\n            if (!this.settings.alpha) {\n                var hsla = c.hsla;\n                hsla[3] = 1;\n                c.hsla = hsla;\n            }\n            this.colour = this.color = c;\n            this._setHSLA(null, null, null, null, flags);\n        }\n    }, {\n        key: 'setColour',\n        value: function setColour(colour, silent) {\n            this.setColor(colour, silent);\n        }\n    }, {\n        key: 'show',\n        value: function show() {\n            var parent = this.settings.parent;\n            if (!parent) {\n                return false;\n            }\n\n            if (this.domElement) {\n                var toggled = this._toggleDOM(true);\n\n                this._setPosition();\n\n                return toggled;\n            }\n\n            var html = this.settings.template || '<div class=\"picker_wrapper\" tabindex=\"-1\"><div class=\"picker_arrow\"></div><div class=\"picker_hue picker_slider\"><div class=\"picker_selector\"></div></div><div class=\"picker_sl\"><div class=\"picker_selector\"></div></div><div class=\"picker_alpha picker_slider\"><div class=\"picker_selector\"></div></div><div class=\"picker_editor\"><input aria-label=\"Type a color name or hex value\"/></div><div class=\"picker_sample\"></div><div class=\"picker_done\"><button>Ok</button></div><div class=\"picker_cancel\"><button>Cancel</button></div></div>';\n            var wrapper = parseHTML(html);\n\n            this.domElement = wrapper;\n            this._domH = $('.picker_hue', wrapper);\n            this._domSL = $('.picker_sl', wrapper);\n            this._domA = $('.picker_alpha', wrapper);\n            this._domEdit = $('.picker_editor input', wrapper);\n            this._domSample = $('.picker_sample', wrapper);\n            this._domOkay = $('.picker_done button', wrapper);\n            this._domCancel = $('.picker_cancel button', wrapper);\n\n            wrapper.classList.add('layout_' + this.settings.layout);\n            if (!this.settings.alpha) {\n                wrapper.classList.add('no_alpha');\n            }\n            if (!this.settings.editor) {\n                wrapper.classList.add('no_editor');\n            }\n            if (!this.settings.cancelButton) {\n                wrapper.classList.add('no_cancel');\n            }\n            this._ifPopup(function () {\n                return wrapper.classList.add('popup');\n            });\n\n            this._setPosition();\n\n            if (this.colour) {\n                this._updateUI();\n            } else {\n                this._setColor(this.settings.defaultColor);\n            }\n            this._bindEvents();\n\n            return true;\n        }\n    }, {\n        key: 'hide',\n        value: function hide() {\n            return this._toggleDOM(false);\n        }\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this._events.destroy();\n            if (this.domElement) {\n                this.settings.parent.removeChild(this.domElement);\n            }\n        }\n    }, {\n        key: '_bindEvents',\n        value: function _bindEvents() {\n            var _this2 = this;\n\n            var that = this,\n                dom = this.domElement,\n                events = this._events;\n\n            function addEvent(target, type, handler) {\n                events.add(target, type, handler);\n            }\n\n            addEvent(dom, 'click', function (e) {\n                return e.preventDefault();\n            });\n\n            dragTrack(events, this._domH, function (x, y) {\n                return that._setHSLA(x);\n            });\n\n            dragTrack(events, this._domSL, function (x, y) {\n                return that._setHSLA(null, x, 1 - y);\n            });\n\n            if (this.settings.alpha) {\n                dragTrack(events, this._domA, function (x, y) {\n                    return that._setHSLA(null, null, null, 1 - y);\n                });\n            }\n\n            var editInput = this._domEdit;\n            {\n                addEvent(editInput, 'input', function (e) {\n                    that._setColor(this.value, { fromEditor: true, failSilently: true });\n                });\n\n                addEvent(editInput, 'focus', function (e) {\n                    var input = this;\n\n                    if (input.selectionStart === input.selectionEnd) {\n                        input.select();\n                    }\n                });\n            }\n\n            this._ifPopup(function () {\n\n                var popupCloseProxy = function popupCloseProxy(e) {\n                    return _this2.closeHandler(e);\n                };\n\n                addEvent(window, EVENT_CLICK_OUTSIDE, popupCloseProxy);\n                addEvent(window, EVENT_TAB_MOVE, popupCloseProxy);\n                onKey(events, dom, ['Esc', 'Escape'], popupCloseProxy);\n\n                var timeKeeper = function timeKeeper(e) {\n                    _this2.__containedEvent = e.timeStamp;\n                };\n                addEvent(dom, EVENT_CLICK_OUTSIDE, timeKeeper);\n\n                addEvent(dom, EVENT_TAB_MOVE, timeKeeper);\n\n                addEvent(_this2._domCancel, 'click', popupCloseProxy);\n            });\n\n            var onDoneProxy = function onDoneProxy(e) {\n                _this2._ifPopup(function () {\n                    return _this2.closeHandler(e);\n                });\n                if (_this2.onDone) {\n                    _this2.onDone(_this2.colour);\n                }\n            };\n            addEvent(this._domOkay, 'click', onDoneProxy);\n            onKey(events, dom, ['Enter'], onDoneProxy);\n        }\n    }, {\n        key: '_setPosition',\n        value: function _setPosition() {\n            var parent = this.settings.parent,\n                elm = this.domElement;\n\n            if (parent !== elm.parentNode) {\n                parent.appendChild(elm);\n            }\n\n            this._ifPopup(function (popup) {\n\n                if (getComputedStyle(parent).position === 'static') {\n                    parent.style.position = 'relative';\n                }\n\n                var cssClass = popup === true ? 'popup_right' : 'popup_' + popup;\n\n                ['popup_top', 'popup_bottom', 'popup_left', 'popup_right'].forEach(function (c) {\n\n                    if (c === cssClass) {\n                        elm.classList.add(c);\n                    } else {\n                        elm.classList.remove(c);\n                    }\n                });\n\n                elm.classList.add(cssClass);\n            });\n        }\n    }, {\n        key: '_setHSLA',\n        value: function _setHSLA(h, s, l, a, flags) {\n            flags = flags || {};\n\n            var col = this.colour,\n                hsla = col.hsla;\n\n            [h, s, l, a].forEach(function (x, i) {\n                if (x || x === 0) {\n                    hsla[i] = x;\n                }\n            });\n            col.hsla = hsla;\n\n            this._updateUI(flags);\n\n            if (this.onChange && !flags.silent) {\n                this.onChange(col);\n            }\n        }\n    }, {\n        key: '_updateUI',\n        value: function _updateUI(flags) {\n            if (!this.domElement) {\n                return;\n            }\n            flags = flags || {};\n\n            var col = this.colour,\n                hsl = col.hsla,\n                cssHue = 'hsl(' + hsl[0] * HUES + ', 100%, 50%)',\n                cssHSL = col.hslString,\n                cssHSLA = col.hslaString;\n\n            var uiH = this._domH,\n                uiSL = this._domSL,\n                uiA = this._domA,\n                thumbH = $('.picker_selector', uiH),\n                thumbSL = $('.picker_selector', uiSL),\n                thumbA = $('.picker_selector', uiA);\n\n            function posX(parent, child, relX) {\n                child.style.left = relX * 100 + '%';\n            }\n            function posY(parent, child, relY) {\n                child.style.top = relY * 100 + '%';\n            }\n\n            posX(uiH, thumbH, hsl[0]);\n\n            this._domSL.style.backgroundColor = this._domH.style.color = cssHue;\n\n            posX(uiSL, thumbSL, hsl[1]);\n            posY(uiSL, thumbSL, 1 - hsl[2]);\n\n            uiSL.style.color = cssHSL;\n\n            posY(uiA, thumbA, 1 - hsl[3]);\n\n            var opaque = cssHSL,\n                transp = opaque.replace('hsl', 'hsla').replace(')', ', 0)'),\n                bg = 'linear-gradient(' + [opaque, transp] + ')';\n\n            this._domA.style.backgroundImage = bg + ', ' + BG_TRANSP;\n\n            if (!flags.fromEditor) {\n                var format = this.settings.editorFormat,\n                    alpha = this.settings.alpha;\n\n                var value = void 0;\n                switch (format) {\n                    case 'rgb':\n                        value = col.printRGB(alpha);break;\n                    case 'hsl':\n                        value = col.printHSL(alpha);break;\n                    default:\n                        value = col.printHex(alpha);\n                }\n                this._domEdit.value = value;\n            }\n\n            this._domSample.style.color = cssHSLA;\n        }\n    }, {\n        key: '_ifPopup',\n        value: function _ifPopup(actionIf, actionElse) {\n            if (this.settings.parent && this.settings.popup) {\n                actionIf && actionIf(this.settings.popup);\n            } else {\n                actionElse && actionElse();\n            }\n        }\n    }, {\n        key: '_toggleDOM',\n        value: function _toggleDOM(toVisible) {\n            var dom = this.domElement;\n            if (!dom) {\n                return false;\n            }\n\n            var displayStyle = toVisible ? '' : 'none',\n                toggle = dom.style.display !== displayStyle;\n\n            if (toggle) {\n                dom.style.display = displayStyle;\n            }\n            return toggle;\n        }\n    }], [{\n        key: 'StyleElement',\n        get: function get$$1() {\n            return _style;\n        }\n    }]);\n    return Picker;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Picker);\n\n\n//# sourceURL=webpack://premium/./node_modules/vanilla-picker/dist/vanilla-picker.mjs?")},formiojs:function(n){"use strict";n.exports=__WEBPACK_EXTERNAL_MODULE_formiojs__}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=function(n,e){for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),__webpack_require__.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},__webpack_require__.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./lib/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__}()}));